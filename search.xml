<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2023/05/01/%E9%80%9A%E4%BF%A1%E6%8A%80%E6%9C%AF/VBA%E8%AF%AD%E6%B3%95/"/>
      <url>/2023/05/01/%E9%80%9A%E4%BF%A1%E6%8A%80%E6%9C%AF/VBA%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<pre><code>VBA语言的基础认识第一节：标识符一、定义标识符是一种标识变量、常量、过程、函数、类等语言构成单位的符号，利用它可以完成对变量、常量、过程、函数、类等引用。二、命名规则（1）字母打头，由字母、数字和下划线组成，如A987b_23Abc（2）字符长度小于40，（Excel2002以上中文版本等，可以用汉字且长度可达254个字符）（3）不能与VB保留字重名，如public，private，dim，goto，next，with，integer，single等第二节：运算符定义：运算符是代表VB某种运算功能的符号。（1）赋值运算符  =（2）数学运算符 &amp;、+ (字符连接符)、+(加)、-（减）、Mod（取余）、\（整除）、*（乘）、/（除）、-（负号）、^（指数）（3）逻辑运算符Not（非）、And（与）、Or(或)、Xor(异或)、Eqv(相等)、Imp(隐含)（4）关系运算符 = （相同）、&lt;&gt;（不等）、&gt;（大于）、&lt;（小于）、&gt;=（不小于）、&lt;=（不大于）、Like、Is（5）位运算符  Not（逻辑非）、And（逻辑与）、Or（逻辑或）、Xor（逻辑异或）、Eqv（逻辑等）、Imp（隐含）第三节：数据类型VBA共有12种数据类型，具体见下表，此外用户还可以根据以下类型用Type自定义数据类型。VBA数据类型第四节：变量与常量（1）VBA允许使用未定义的变量，默认是变体变量（2）在模块通用说明部分，加入Option Explicit语句可以强迫用户进行变量定义（3）变量定义语句及变量作用域一般变量作用域的原则是，那部分定义就在那部分起作用，模块中定义则在该模块那作用。（4）常量为变量的一种特例，用Const定义，且定义时赋值，程序中不能改变值，作用域也如同变量作用域。如下定义：Const Pi=3.1415926 as single第五节：数组数组是包含相同数据类型的一组变量的集合，对数组中的单个变量引用通过数组索引下标进行。在内存中表现为一个连续的内存块，必须用Global或Dim语句来定义。定义规则如下：Dim 数组名([lower to ]upper [, [lower to ]upper, ….]) as type ;Lower缺省值为0。二维数组是按行列排列，如XYZ(行，列)。除了以上固定数组外，VBA 还有一种功能强大的动态数组，定义时无大小维数声明；在程序中再利用Redim语句来重新改变数组大小，原来数组内容可以通过加preserve关键字来保留。如下例：Dim array1() as double : Redim array1(5) : array1(3)=250 : Redim preserve array1(5,10)第六节：注释和赋值语句（1）注释语句是用来说明程序中某些语句的功能和作用；VBA中有两种方法标识为注释语句。√单引号 ’  ;如：’定义全局变量；可以位于别的语句之尾，也可单独一行√Rem ;如：Rem定义全局变量；只能单独一行（2）赋值语句是进行对变量或对象属性赋值的语句，采用赋值号 =，如X=123：Form1.caption=”我的窗口”对对象的赋值采用：set myobject=object 或  myobject:=object第七节：书写规范（1）VBA不区分标识符的字母大小写，一律认为是小写字母；（2）一行可以书写多条语句，各语句之间以冒号 :  分开；（3）一条语句可以多行书写，以空格加下划线 _  来标识下行为续行；（4）标识符最好能简洁明了，不造成歧义。第八节：判断语句（1）If…Then…Else语句If condition Then [statements][Else elsestatements]如1：If A&gt;B And C&lt;D Then A=B+2 Else  A=C+2如2：If x&gt;250 Then  x=x-100或者，可以使用块形式的语法：If condition Then[statements][ElseIf condition-n Then[elseifstatements] ...[Else[elsestatements]]End If如1:If Number &lt; 10  Then     Digits = 1ElseIf Number &lt; 100  Then     Digits = 2Else     Digits = 3End If（2）Select Case…Case…End Case语句如1：Select Case  Pid   Case  “A101”   Price=200   Case  “A102”   Price=300   ……   Case Else   Price=900End Case（3）Choose 函数choose(index, choce-1,choice-2,…,choice-n)，可以用来选择自变量串列中的一个值，并将其返回，index 必要参数，数值表达式或字段，它的运算结果是一个数值，且界于 1 和可选择的项目数之间。choice 必要参数，Variant表达式，包含可选择项目的其中之一。如：GetChoice = Choose(Ind, &quot;Speedy&quot;, &quot;United&quot;, &quot;Federal&quot;)（4）Switch函数Switch(expr-1, value-1[, expr-2, value-2 _ [, expr-n,value-n]])switch 函数和 Choose 函数类似，但它是以两个一组的方式返回所要的值，在串列中，最先为TRUE 的值会被返回。 expr 必要参数，要加以计算的 Variant 表达式。value 必要参数。如果相关的表达式为 True，则返回此部分的数值或表达式，没有一个表达式为 True，Switch 会返回一个 Null值。第九节：循环语句（1）For Next语句  以指定次数来重复执行一组语句For counter = start To end [Step step]                  ＇step 缺省值为1[statements][Exit For][statements]Next [counter]如1：For Words = 10 To 1 Step  -1                               ＇建立 10 次循环       For Chars = 0 To 9                                        ＇建立 10 次循环           MyString = MyString &amp; Chars                      ＇将数字添加到字符串中      Next Chars                                                   ＇Increment counter      MyString = MyString &amp; &quot; &quot;                                ＇添加一个空格Next  Words（2）For Each…Next 语句  主要功能是对一个数组或集合对象进行，让所有元素重复执行一次语句For Each element In  groupStatements[Exit for]StatementsNext  [element]如1：For Each rang2 In  range1     With range2.interior             .colorindex=6             .pattern=xlSolid     End withNext这上面一例中用到了 With…End With  语句，目的是省去对象多次调用，加快速度；语法为：With object[statements]End With（3）Do…loop语句 在条件为true时，重复执行区块命令Do {while |until} condition&#39; while 为当型循环，until为直到型循环，顾名思义，不多说啦StatementsExit doStatementsLoop或者使用下面语法：Do                                    &#39; 先do 再判断，即不论如何先干一次再说StatementsExit doStatementsLoop {while |until} condition第十节 其他类语句和错误语句处理一．其他循环语句结构化程序使用以上判断和循环语句已经足够，建议不要轻易使用下面的语句，虽然 VBA 还支持。（1）Goto line 该语句为跳转到line语句行（2） On expression gosub destinatioinlist 或者 on expression goto destinationlist 语句为根据 exprssion表达式值来跳转到所要的行号或行标记（3）Gosub line…line…Return语句，  Return 返回到 Gosub line行，如下例：Sub gosubtry()      Dim num      Num=inputbox(“输入一个数字，此值将会被判断循环”)      If num&gt;0 then Gosub Routine1 ：Debug.print num：Exit  sub      Routine1:      Num=num/5      ReturnEnd sub（4）while…wend语句，只要条件为TRUE，循环就执行，这是以前VB老语法保留下来的，如下例：while condition      ‘while I&lt;50[statements]        ‘I=I+1wend                  ‘Wend二．错误语句处理执行阶段有时会有错误的情况发生，利用OnError语句来处理错误，启动一个错误的处理程序。语法如下：On Error Goto Line        ‘当错误发生时，会立刻转移到line行去On Error Resume Next    ‘当错误发生时，会立刻转移到发生错误的下一行去On Erro Goto 0             ‘当错误发生时，会立刻停止过程中任何错误处理过程第十一节 过程和函数过程是构成程序的一个模块，往往用来完成一个相对独立的功能。过程可以使程序更清晰、更具结构性。VBA具有四种过程：Sub 过程、Function函数、Property属性过程和Event事件过程。一．Sub过程Sub 过程的参数有两种传递方式：按值传递(ByVal)和按地址传递(ByRef)。如下例：Sub password (ByVal x as integer, ByRef y as integer)      If y=100 then y=x+y else y=x-y      x=x+100End subSub call_password ()      Dim x1 as integer      Dim y1 as integer      x1=12      y1=100      Callpassword(x1,y1)     ‘调用过程方式：1.Call   过程名(参数1,  参数2…);2.  过程名 参数1, 参数2…      debug.print x1,y1         ‘结果是12、112，y1按地址传递改变了值，而x1按值传递，未改变原值End sub二．Function函数函数实际是实现一种映射，它通过一定的映射规则，完成运算并返回结果。参数传递也两种：按值传递(ByVal)和按地址传递(ByRef)。如下例：Function password(ByVal x as integer, byref y as integer) as boolean       If y=100 then y=x+y else y=x-y       x=x+100       if y=150 then password=true else password=falseEnd FunctionSub call_password ()      Dim x1 as integer      Dim y1 as integer      x1=12      y1=100      if password then ‘调用函数：1. 作为一个表达式放在=右端 ; 2. 作为参数使用      debug.print x1      end ifEnd sub三．Property属性过程和Event事件过程这是VB在对象功能上添加的两个过程，与对象特征密切相关，也是VBA比较重要组成，技术比较复杂，可以参考相关书籍。第十二节内部函数在VBA程序语言中有许多内置函数，可以帮助程序代码设计和减少代码的编写工作。一．测试函数IsNumeric(x)          ‘是否为数字,  返回Boolean结果，True  or False      IsDate(x)              ‘是否是日期,  返回Boolean结果，True  or FalseIsEmpty（x）         ‘是否为Empty, 返回Boolean结果，True  or FalseIsArray(x)             ‘指出变量是否为一个数组。IsError(expression)  ‘指出表达式是否为一个错误值IsNull(expression)    ‘指出表达式是否不包含任何有效数据 (Null)。IsObject(identifier)  ‘指出标识符是否表示对象变量二．数学函数Sin(X)、Cos(X)、Tan(X)、Atan(x)  三角函数，单位为弧度Log(x) 返回x的自然对数Exp(x)返回 Abs(x) 返回绝对值Int(number)、Fix(number) 都返回参数的整数部分，区别：Int 将 -8.4 转换成 -9，而 Fix 将-8.4 转换成 -8Sgn(number) 返回一个 Variant (Integer)，指出参数的正负号Sqr(number) 返回一个 Double，指定参数的平方根VarType(varname) 返回一个 Integer，指出变量的子类型Rnd（x）返回0-1之间的单精度数据，x为随机种子三．字符串函数Trim(string)                       去掉string左右两端空白Ltrim(string)                      去掉string左端空白Rtrim(string)                      去掉string右端空白Len(string)                        计算string长度Left(string, x)                    取string左段x个字符组成的字符串Right(string, x)                   取string右段x个字符组成的字符串Mid(string, start,x)              取string从start位开始的x个字符组成的字符串Ucase(string)                     转换为大写Lcase(string)                      转换为小写Space(x)                           返回x个空白的字符串Asc(string)                         返回一个 integer，代表字符串中首字母的字符代码Chr(charcode)                     返回 string,其中包含有与指定的字符代码相关的字符四．转换函数CBool(expression)                   转换为Boolean型CByte(expression)                  转换为Byte型CCur(expression)                    转换为Currency型CDate(expression)                  转换为Date型CDbl(expression)                    转换为Double型CDec(expression)                   转换为Decemal型CInt(expression)                    转换为Integer型CLng(expression)                   转换为Long型CSng(expression)                   转换为Single型CStr(expression)                    转换为String型CVar(expression)                    转换为Variant型Val(string)                             转换为数据型Str(number)                           转换为String五．时间函数Now            返回一个 Variant (Date)，根据计算机系统设置的日期和时间来指定日期和时间。Date           返回包含系统日期的 Variant (Date)。Time           返回一个指明当前系统时间的 Variant (Date)。Timer          返回一个 Single，代表从午夜开始到现在经过的秒数。TimeSerial(hour, minute, second) 返回一个 Variant (Date)，包含具有具体时、分、秒的时间。DateDiff(interval, date1, date2[, firstdayofweek[, firstweekofyear]]) 返回 Variant(Long) 的值，表示两个指定日期间的时间间隔数目Second(time) 返回一个 Variant (Integer)，其值为 0 到 59 之间的整数，表示一分钟之中的某个秒Minute(time) 返回一个 Variant (Integer)，其值为 0 到 59 之间的整数，表示一小时中的某分钟Hour(time)  返回一个 Variant(Integer)，其值为 0 到 23 之间的整数，表示一天之中的某一钟点Day(date)   返回一个 Variant(Integer)，其值为 1 到 31 之间的整数，表示一个月中的某一日Month(date) 返回一个 Variant(Integer)，其值为 1 到 12 之间的整数，表示一年中的某月Year(date)  返回 Variant (Integer)，包含表示年份的整数。Weekday(date, [firstdayofweek]) 返回一个 Variant (Integer)，包含一个整数，代表某个日期是星期几第十三节 文件操作文件Dir[(pathname[,attributes])] ；pathname 可选参数，用来指定文件名的字符串表达式，可能包含目录或文件夹、以及驱动器。如果没有找到  pathname，则会返回零长度字符串 (&quot;&quot;);attributes 可选参数。常数或数值表达式，其总和用来指定文件属性。如果省略，则会返回匹配 pathname 但不包含属性的文件。删除Kill pathname   从磁盘中删除文件, pathname 参数是用来指定一个文件名RmDir pathname  从磁盘中删除目录，pathname 参数是用来指定一个文件夹打开Open pathname For mode [Access access] [lock] As [#]filenumber [Len=reclength] 能够对文件输入/输出 (I/O)。pathname 必要。字符串表达式，指定文件名，该文件名可能还包括目录、文件夹及驱动器。mode 必要。关键字，指定文件方式，有 Append、Binary、Input、Output、或 Random 方式。如果未指定方式，则以 Random 访问方式打开文件。access 可选。关键字，说明打开的文件可以进行的操作，有 Read、Write、或 ReadWrite 操作。lock 可选。关键字，说明限定于其它进程打开的文件的操作，有 Shared、LockRead、LockWrite、和 Lock Read Write 操作。filenumber 必要。一个有效的文件号，范围在 1 到 511 之间。使用 FreeFile 函数可得到下一个可用的文件号。 reclength 可选。小于或等于 32，767（字节）的一个数。对于用随机访问方式打开的文件，该值就是记录长度。对于顺序文件，该值就是缓冲字符数。说明 对文件做任何 I/O 操作之前都必须先打开文件。Open  语句分配一个缓冲区供文件进行I/O 之用，并决定缓冲区所使用的访问方式。如果 pathname 指定的文件不存在，那么，在用Append、Binary、Output、或 Random 方式打开文件时，可以建立这一文件。如果文件已由其它进程打开，而且不允许指定的访问类型，则 Open 操作失败，而且会有错误发生。如果 mode是 Binary 方式，则 Len 子句会被忽略掉。重要 在 Binary、Input 和 Random 方式下可以用不同的文件号打开同一文件，而不必先将该文件关闭。在 Append 和 Output 方式下，如果要用不同的文件号打开同一文件，则必须在打开文件之前先关闭该文件。读入Input #filenumber, varlist 从已打开的顺序文件中读出数据并将数据指定给变量Get [#]filenumber, [recnumber], varname将一个已打开的磁盘文件读入一个变量之中。写入Write #filenumber, [outputlist] 将数据写入顺序文件Print #filenumber, [outputlist] 将格式化显示的数据写入顺序文件中Put [#]filenumber, [recnumber], varname 将一个变量的数据写入磁盘文件中。关闭Close [filenumberlist] 关闭 Open 语句所打开的输入/输出 (I/O) 文件注意 如果今后想用 Input # 语句读出文件的数据，就要用 Write # 语句而不用 Print # 语句将数据写入文件。因为在使用 Write# 时，将数据域分界就可确保每个数据域的完整性，因此可用 Input# 再将数据读出来。使用 Write#  还能确保任何地区的数据都被正确读出。Write与 Print # 语句不同，当要将数据写入文件时，Write # 语句会在项目和用来标记字符串的引号之间插入逗号。Write # 语句在将 outputlist 中的最后一个字符写入文件后会插入一个新行字符，即回车换行符，(Chr(13) + Chr(10))。其他文件函数LOF(filenumber)  返回一个 Long，表示用 Open 语句打开的文件的大小，该大小以字节为单位。EOF(filenumber)  返回一个 Integer，它包含 Boolean 值 True，表明已经到达为 Random 或顺序 Input 打开的文件的结尾。Loc(filenumber)   返回一个 Long，在已打开的文件中指定当前读/写位置Seek(filenumber)  返回一个 Long，在 Open 语句打开的文件中指定当前的读/写位IF 多条件判断返回值　　IF(logical_test, [value_if_true], [value_if_false])　　示例：　小于500，且未到期的，返回“补款”　　IF(AND(A2&lt;500,B2=&quot;未到期&quot;),&quot;补款&quot;,&quot;&quot;)　　职称为工程师或高工的，返回“满足”　　IF(OR(C3=&quot;工程师&quot;, C3=&quot;高工&quot;),&quot;满足&quot;,&quot;&quot;)　　说明：两个条件同时成立用AND,任一个成立用OR函数。IFS 多场景判断返回值IFS(logical_test1,value_if_true1, logical_test2, value_if_true2, ...)示例：在一列中，根据不同的判断条件，给出符合条件的值IFERROR 把公式产生的错误值显示为自定义值IFERROR(value, value_if_error)  第一个参数为需要判断的计算式，第二个参数为当第一个参数出错时要返回的值。　　示例：成绩低于60，不及格　　IFERROR(A2&gt;=60,&quot;不及格&quot;)COUNTIF 单条件计数　　COUNTIF(range, criteria)　　示例：统计E列工资大于6000的人员数　　COUNTIF(E:E, &quot;&gt;6000&quot;)　　COUNTIF(E:E, &quot;&gt;&quot;&amp;M9) 假设M9单元格内容为6000COUNTIFS 多条件计数　　COUNTIFS(criteria_range1, criteria1, criteria_range2, criteria2, ...)　　示例：统计属于销售部门，工资大于6000的员工人数　　COUNTIFS(D:D, &quot;销售&quot;, E:E, &quot;&gt;6000&quot;)SUMIF 按条件在查找区域进行查找，并返回查找区域对应的数据区域中数值的和　　SUMIF(range, criteria, [sum_range])　　示例：当不指定SUM_RANGE时，将直接对RANGE区域求和　　SUMIF(C:C, &quot;&gt;1000&quot;), 对大于1000的单元格求和　　SUMIF(B:B, &quot;果汁&quot;, C:C), 对B列为果汁对应的C列销量求和SUMIFS 多条件组合的数据求和　　SUMIFS(sum_range, criteria_range1, criteria1, criteria_range2, criteria2, ...)　　示例： 统计生产部门，男性工资的总和　　SUMIFS(K:K, D:D, &quot;生产&quot;, C:C, &quot;男&quot;)　　AVERAGEIF, AVERAGEIFS和SUMIF, SUMIFS类似VLOOKUP, HLOOKUP 搜索用户查找范围中首列（或首行）中满足条件的数据，并根据指定的列号（行号）返回对应的值。VLOOKUP对列数据按行进行查找，HLOOKUP对行数据按列查找　　VLOOKUP(lookup_value, table_array, col_index_num, [range_lookup])　　HLOOKUP(lookup_value, table_array, row_index_num, [range_lookup])　　[range_lookup]默认值为1或TRUE，使用模糊匹配方式进行查找。如果设置成0或FALSE，使用精确查找，同时支持无序查找。　　示例：查找员工号为2267的员工姓名　　VLOOKUP(&quot;2267&quot;, A1:D4, 2)LEN 返回文本串的字符个数　　LEN(text)SUBSTITUTE 将目标文本中指定的字符串替换为新的字符串　　SUBSTITUTE(text, old_text, new_text, instance_num)　　示例：　　将第二个狐替换成虎　　SUBSTITUTE(&quot;狐假狐威&quot;, &quot;狐&quot;, &quot;虎&quot;, 2)　　计算单元格中MANUAL字符的个数(LEN(J13)-LEN(SUBSTITUTE(J13,&quot;MANUAL&quot;,)))/LEN(&quot;MANUAL&quot;)　　INDEX 根据给定的一个范围（区域引用或数组）中指定的行号和列号来返回一个值，如果源数据是区域，则返回单元格引用；如果源范围是数组，则返回数组中的某个值。　　INDEX(reference, row_num, [column_num], [area_num])　　INDEX(array, row_num, [column_num])　　示例：从左侧的数据表隔行提取，生成新的工作表　　E4：INDEX($C$3:$C$8, ROW(A2)*2-1)　　F4：INDEX($C$3:$C$8,ROW(A2)*2)SMALL 取指定的第N小的值　　SMALL(array, K) 　　示例：　　取第一小的值　　SMALL({10，15，20},1.5)等同于SMALLSMALL({10，15，20},1)，结果为10LARGE 取指定的第N大的值，与SMALL相反</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/01/%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E5%90%8D%E7%A7%B0/%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E5%90%8D%E7%A7%B0/"/>
      <url>/2023/05/01/%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E5%90%8D%E7%A7%B0/%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E5%90%8D%E7%A7%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="文件名称修改"><a href="#文件名称修改" class="headerlink" title="文件名称修改"></a>文件名称修改</h4><pre><code class="python">import osfrom re import splitimport shutil# 提取文件名称ym = &#39;C:/Users/Administrator/Desktop/源文件&#39;path = &#39;C:/Users/Administrator/Desktop/20201225&#39;# 获取该目录下所有文件，存入列表中fileList_ym = os.listdir(ym)fileList_path = os.listdir(path)# # 创建新文件# for index in range(3):#     f4 = open(&#39;C:/Users/Administrator/Desktop/新建文件夹/&#39; + str(index) + &#39;.xlsx&#39;,&#39;w&#39;,encoding = &#39;utf-8&#39;)#     f4.close()n = 0for i in fileList_path:    # 设置旧文件名（就是路径+文件名）    # ENBID = i.split(&#39;[&#39;, 2)[1].split(&#39;]&#39;,2)[0]    oldname = path + os.sep + fileList_path[n]  # os.sep添加系统分隔符    # # 设置新文件名    # file = fileList[n].split(&#39;-&#39;, 2)    newname = path + os.sep + fileList_ym[n]    os.rename(oldname, newname)  # 用os模块中的rename方法对文件改名    print(oldname, &#39;======&gt;&#39;, newname)    n += 1</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>EXCEL</title>
      <link href="/2020/11/19/%E9%80%9A%E4%BF%A1%E6%8A%80%E6%9C%AF/EXCEL%E6%93%8D%E4%BD%9C/"/>
      <url>/2020/11/19/%E9%80%9A%E4%BF%A1%E6%8A%80%E6%9C%AF/EXCEL%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h4 id="数据透视表有去重的作用"><a href="#数据透视表有去重的作用" class="headerlink" title="数据透视表有去重的作用"></a><font color="red">数据透视表有去重的作用</font></h4><ul><li>计数：<ul><li>count：计有数字的单元格</li><li>counta：计单元格的个数</li></ul></li><li>表格判断：if（条件，true，false），三个判断的时候，用两个if函数</li><li>四舍五入：round(float,number)<ul><li>float：代表原始的数据</li><li>number：代表保留的有效数字</li></ul></li><li>计算某个区域中满足条件的单元格个数：countif（计数区域，条件）</li><li>对满足条件的单元格求和：sumif（范围，区间，求和区域）</li><li>计算单元格中所有数值的和：sum（单元格1,2,3,4,5）</li><li><p>批量查找：vlookup（查找值，数据表，列序数，0精确匹配）<strong>只能从左往右查</strong></p><ul><li>快V工具中的字段对应公式中的数据<ul><li>V关键字：查找值    </li><li>源关键字：数据表中的字段</li><li>源需求字段：数据表中的字段</li><li>V关键字:查找值</li><li>V需求字段结果:查找结果</li></ul></li></ul></li><li><p>截取函数的使用</p><ul><li>left(text,num_chars)<ul><li>text：用来截取的单元格内容</li><li>num_chars：从左开始截取的字符数</li></ul></li><li>right(text,num_chars)<ul><li>text：用来截取的单元格内容</li><li>num_chars：从左开始截取的字符数</li></ul></li><li>mid(text，start，num_chars)<ul><li>text：用来截取的单元格内容</li><li>start：从那个字符开始截取</li><li>num_chars：截取的字符数，可以用len函数取字符串的长度</li></ul></li></ul></li><li>替换：substitute(字符串，原字符，替换字符)</li><li>筛选的快捷键：ctrl+shift+l</li><li>分列问题可以先替换，再分列</li></ul>]]></content>
      
      
      <categories>
          
          <category> databases </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EXCEL </tag>
            
            <tag> 公式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部署Django项目</title>
      <link href="/2018/12/14/Django/Django/"/>
      <url>/2018/12/14/Django/Django/</url>
      
        <content type="html"><![CDATA[<h3 id="安装MariaDB"><a href="#安装MariaDB" class="headerlink" title="安装MariaDB"></a>安装MariaDB</h3><p>安装命令</p><pre><code>yum -y install mariadb mariadb-server</code></pre><p>安装完成MariaDB，首先启动MariaDB</p><pre><code>systemctl start mariadb</code></pre><p>设置开机启动</p><pre><code>systemctl enable mariadb</code></pre><h3 id="设置密码"><a href="#设置密码" class="headerlink" title="设置密码"></a>设置密码</h3><p>命令: mysql_secure_installation</p><pre><code class="python">Enter current password for root:&lt;–初次运行直接回车设置密码Set root password? [Y/n] &lt;– 是否设置root用户密码，输入y并回车或直接回车New password: &lt;– 设置root用户的密码Re-enter new password: &lt;– 再输入一次你设置的密码其他配置Remove anonymous users? [Y/n] &lt;– 是否删除匿名用户，回车Disallow root login remotely? [Y/n] &lt;–是否禁止root远程登录,回车,Remove test database and access to it? [Y/n] &lt;– 是否删除test数据库，回车Reload privilege tables now? [Y/n] &lt;– 是否重新加载权限表，回车初始化MariaDB完成，接下来测试登录mysql -u root -p</code></pre><h3 id="开启远程连接"><a href="#开启远程连接" class="headerlink" title="开启远程连接"></a>开启远程连接</h3><p>在mysql数据库中的user表中可以看到默认是只能本地连接的，所有可以添加一个新的用户，该用户可以远程访问</p><h4 id="1-创建用户"><a href="#1-创建用户" class="headerlink" title="1. 创建用户"></a>1. 创建用户</h4><pre><code class="python"># 先使用数据库use mysql;# 针对ipcreate user &#39;root&#39;@&#39;192.168.10.10&#39; identified by &#39;password&#39;;#全部 create user &#39;root&#39;@&#39;%&#39; identified by &#39;password&#39;;</code></pre><h4 id="2-授权"><a href="#2-授权" class="headerlink" title="2. 授权"></a>2. 授权</h4><pre><code class="python"># 给用户最大权限grant all privileges on *.* to &#39;root&#39;@&#39;%&#39; identified by &#39;password&#39;;# 给部分权限(test 数据库)grant all privileges on test.* to &#39;root&#39;@&#39;%&#39; identified by &#39;password&#39; with grant option;# 刷新权限表</code></pre><pre><code> flush privileges;# 查看show grants for &#39;root&#39;@&#39;localhost&#39;;</code></pre><p>接下来就可以在远程的数据库可视化工具中直接访问该服务器中的mysql了。</p><pre><code># 访问数据库mysql -u root -p</code></pre><h3 id="安装python3-6"><a href="#安装python3-6" class="headerlink" title="安装python3.6"></a>安装python3.6</h3><p>在centos中，系统默认只提供python2.7的版本，但是项目我们使用的python3.6的版本。所有我们自己安装python3</p><h4 id="安装Python3的方法"><a href="#安装Python3的方法" class="headerlink" title="安装Python3的方法"></a>安装Python3的方法</h4><p>首先安装依赖包</p><p>安装Python3.6所需要的依赖包：</p><pre><code>yum -y groupinstall &quot;Development tools&quot;yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel</code></pre><p>安装Python3.7还需额外安装依赖包：</p><pre><code>yum install libffi-devel -y</code></pre><p>然后根据自己需求下载不同版本的Python3，我下载的是Python3.6.2</p><pre><code class="python">wget https://www.python.org/ftp/python/3.6.2/Python-3.6.2.tar.xz然后解压压缩包，进入该目录，安装Python3tar -xvJf  Python-3.6.2.tar.xzcd Python-3.6.2./configure --prefix=/usr/local/python3make &amp;&amp; make install</code></pre><p>最后创建软链接</p><pre><code>ln -s /usr/local/python3/bin/python3 /usr/bin/python3ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3</code></pre><h3 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h3><h4 id="1-安装virtualenv"><a href="#1-安装virtualenv" class="headerlink" title="1. 安装virtualenv"></a>1. 安装virtualenv</h4><pre><code>yum install python-virtualenv</code></pre><h4 id="2-创建虚拟环境"><a href="#2-创建虚拟环境" class="headerlink" title="2. 创建虚拟环境"></a>2. 创建虚拟环境</h4><pre><code>virtualenv --no-site-packages envcd env# 激活虚拟环境source bin/activate</code></pre><h4 id="3-安装环境需要的包"><a href="#3-安装环境需要的包" class="headerlink" title="3. 安装环境需要的包"></a>3. 安装环境需要的包</h4><pre><code>pip3 install -r re_install.txt其中re_install.txt文件中记录的是需要安装包的名称以及对应的版本</code></pre><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>该部署采用的是cenots7系统来部署</p><p>Django的项目中，在工程目录下settings.py文件中有一个DEBUG=True参数，如果DEBUG=False则会出现js,css，img无法加载的情况出现。</p><p>原因如下：</p><p>Django框架仅在开发模式下提供静态文件服务。当我开启DEBUG模式时，Django内置的服务器是提供静态文件的服务的，所以css等文件访问都没有问题，但是关闭DEBUG模式后，Django便不提供静态文件服务了。想一想这是符合Django的哲学的：这部分事情标准服务器都很擅长，就让服务器去做吧！</p><h4 id="1-测试环境中部署方式"><a href="#1-测试环境中部署方式" class="headerlink" title="1. 测试环境中部署方式"></a>1. 测试环境中部署方式</h4><h5 id="urls-py中的修改"><a href="#urls-py中的修改" class="headerlink" title="urls.py中的修改"></a>urls.py中的修改</h5><p>在测试环境中一般都直接使用python manage.py runserver的方式去运行项目。其中就涉及到DEBUG=False的修改，静态目录的修改等，具体修改如下：</p><pre><code class="python">a) 修改settings.py配置文件中的DEBUG=False模式，修改ALLOEWD_HOST=[&#39;*&#39;]b) 修改工程目录下的urls.pyfrom django.views.static import serveurlpatterns = [    url(r&#39;^admin/&#39;, admin.site.urls),    url(r&#39;^axf/&#39;, include(&#39;axf.urls&#39;, namespace=&#39;axf&#39;)),    # 增加以下的url路由    url(r&#39;^static/(?P&lt;path&gt;.*)$&#39;, serve, {&quot;document_root&quot;: settings.STATICFILES_DIRS[0]}),    url(r&#39;^media/(?P&lt;path&gt;.*)$&#39;, serve, {&quot;document_root&quot;: settings.MEDIA_ROOT}),</code></pre><pre><code>    url(r&#39;^$&#39;, views.home)]</code></pre><h5 id="中间件的修改"><a href="#中间件的修改" class="headerlink" title="中间件的修改"></a>中间件的修改</h5><p>如果中间件是过滤哪些地址不需要登录验证的话，可以设置如下的static和media过滤地址的参数：</p><pre><code class="python"># 验证用户的登录状态paths = [&#39;/user/login/&#39;, &#39;/user/register/&#39;,         &#39;/axf/market/&#39;, &#39;/axf/marketparams/(\d+)/(\d+)/(\d+)/&#39;,        &#39;/static/[0-9a-zA-Z/\.]&#39;, &#39;/media/[0-9a-zA-Z/\.]&#39;]for path in paths:    if re.match(path, request.path):        return None</code></pre><h4 id="2-正式环境中部署方式"><a href="#2-正式环境中部署方式" class="headerlink" title="2. 正式环境中部署方式"></a>2. 正式环境中部署方式</h4><p>正式环境中部署为nginx+uwsgi来部署django项目</p><h5 id="2-1-安装nginx"><a href="#2-1-安装nginx" class="headerlink" title="2.1 安装nginx"></a>2.1 安装nginx</h5><p>a）添加nginx存储库<br>​<br>​    yum install epel-release</p><p>b) 安装nginx</p><pre><code>yum install nginx</code></pre><p>c) 运行nginx</p><p>Nginx不会自行启动。要运行Nginx<br>​<br>​    systemctl start nginx</p><p>nginx的运行命令：</p><pre><code class="python"> systemctl status nginx 查看nginx的状态 systemctl start/stop/enable/disable nginx 启动/关闭/设置开机启动/禁止开机启动</code></pre><p>d）系统启动时启用Nginx<br>​<br>​    systemctl enable nginx</p><p>e）如果您正在运行防火墙，请运行以下命令以允许HTTP和HTTPS通信：<br>​    </p><pre><code class="python">sudo firewall-cmd --permanent --zone=public --add-service=http sudo firewall-cmd --permanent --zone=public --add-service=httpssudo firewall-cmd --reload</code></pre><h4 id="3-配置uwsgi"><a href="#3-配置uwsgi" class="headerlink" title="3.配置uwsgi"></a>3.配置uwsgi</h4><h5 id="3-1-安装uwsgi"><a href="#3-1-安装uwsgi" class="headerlink" title="3.1 安装uwsgi"></a>3.1 安装uwsgi</h5><p>在虚拟环境中安装uwsgi，假设虚拟环境安装在/home/env/axfenv中</p><pre><code>/home/env/axfeng/bin/python3/pip3 install uwsgi</code></pre><h4 id="4-配置项目代码，配置项目nginx，配置uwsgi-ini等"><a href="#4-配置项目代码，配置项目nginx，配置uwsgi-ini等" class="headerlink" title="4. 配置项目代码，配置项目nginx，配置uwsgi.ini等"></a>4. 配置项目代码，配置项目nginx，配置uwsgi.ini等</h4><p><strong>在home文件中创建如下四个文件夹</strong></p><p>conf是配置文件，用于存放项目的nginx.conf文件，uwsgi.ini文件</p><p>logs是日志文件，用于存放nginx的启动成功和失败文件，以及uwsgi的运行日志文件</p><p>env是用于存放虚拟环境</p><p>src是项目文件，该目录下上传的是目录代码</p><h4 id="4-1-配置nginx-conf文件"><a href="#4-1-配置nginx-conf文件" class="headerlink" title="4.1 配置nginx.conf文件"></a>4.1 配置nginx.conf文件</h4><p><b>首先</b>：编写自己项目的nginx.conf文件如下：</p><p>每一个项目对应有一个自己定义的nginx的配置文件，比如爱鲜蜂项目，我定义为axfnginx.conf文件</p><pre><code class="python">server {     listen       80;     server_name 39.104.176.9 localhost;     access_log /home/logs/access.log;     error_log /home/logs/error.log;     location / {         include uwsgi_params;         uwsgi_pass 127.0.0.1:8890;     }     location /static/ {         alias /home/src/axf/static/;         expires 30d;     } }</code></pre><p><b>其次</b>：修改总的nginx的配置文件，让总的nginx文件包含我们自定义的项目的axfnginx.conf文件</p><p>总的nginx配置文件在：/etc/nginx/nginx.conf中</p><p><img src="/2018/12/14/Django/Django/django_centos_nginx_peizhi.png" alt="django_centos_nginx_peizhi"></p><p>以上步骤操作完成以后，需要重启nginx：</p><pre><code class="python">systemctl restart nginx</code></pre><h4 id="4-2-配置uwsgi文件"><a href="#4-2-配置uwsgi文件" class="headerlink" title="4.2 配置uwsgi文件"></a>4.2 配置uwsgi文件</h4><p>在conf文件夹下除了包含自定义的axfnginx.conf文件，还有我们定义的uwsgi.ini文件</p><pre><code class="python">[uwsgi]projectname = axfbase = /home/src# 守护进程master = true# 进程个数processes = 4# 虚拟环境pythonhome = /home/env/axfenv# 项目地址chdir = %(base)/%(projectname)# 指定python版本pythonpath = /usr/local/python3/bin/python3# 指定uwsgi文件module = %(projectname).wsgi# 和nginx通信地址:端口socket = 127.0.0.1:8890# 日志文件地址logto = /home/logs/uwsgi.log</code></pre><p>​<br>运行项目:</p><pre><code class="python">/home/env/axfeng/bin/python3/uwsgi --ini uwsgi.ini</code></pre>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django项目部署 </tag>
            
            <tag> MariaDB安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>practice linkman</title>
      <link href="/2018/10/20/%E6%95%B0%E6%8D%AE%E5%BA%93/practice-linkman/"/>
      <url>/2018/10/20/%E6%95%B0%E6%8D%AE%E5%BA%93/practice-linkman/</url>
      
        <content type="html"><![CDATA[<h3 id="MY简单的联系人练习"><a href="#MY简单的联系人练习" class="headerlink" title="MY简单的联系人练习"></a>MY简单的联系人练习</h3><pre><code class="python">import pymysqldef add_con(con):    while True:        telname = input(&#39;联系人姓名：&#39;)        relation = input(&#39;与联系人关系：&#39;)        tel = input(&#39;联系人电话：&#39;)        with con.cursor() as cursor:            result = cursor.execute(                args=(telname, relation, tel),                query=&quot;insert into tb_cont values (default, %s, %s, %s)&quot;)            if result == 1:                print(&#39;添加成功!&#39;)                print(&#39;-&#39; * 30)                option = str(input(&#39;是否继续添加 yes / no  :&#39;))                if option == &#39;yes&#39;:                    continue                else:                    break            else:                print(&#39;添加失败，请重新添加&#39;)                continuedef function(cursor):    print(&#39;编号    \t姓名    \t   关系    \t电话    &#39;)    print(&#39;=&#39; * 50)    for row in cursor.fetchall():        print(str(row[&#39;id&#39;]).ljust(8), end=&#39;&#39;)        print((row[&#39;telname&#39;].ljust(8) if len(row[&#39;telname&#39;]) == 3 else row[&#39;telname&#39;].ljust(9)), end=&#39;&#39;)        print(str(row[&#39;relation&#39;]).ljust(9), end=&#39;&#39;)        print(str(row[&#39;tel&#39;]).ljust(15))    print(&#39;=&#39; * 50)def check_all_con(con):    figure = 0    while True:        print(&#39;=&#39; * 50)        with con.cursor() as cursor:            cursor.execute(                args=(figure,),                query=&quot;select id, telname, relation, tel from tb_cont order by id limit %s, 5&quot;)            function(cursor)        print(&#39;1.删除联系人&#39;)        print(&#39;2.查看下一页&#39;)        print(&#39;3.查看上一页&#39;)        print(&#39;4.修改联系人信息&#39;)        print(&#39;5.返回上一级&#39;)        print(&#39;-&#39; * 30)        elect = input(&#39;请选择：&#39;)        if elect == &#39;1&#39;:            del_con(con)        elif elect == &#39;2&#39;:            figure += 5            continue        elif elect == &#39;3&#39;:            if figure &gt;= 5:                figure -= 5            else:                print(&#39;没有上一页，请重新选择&#39;)            continue        elif elect == &#39;4&#39;:            updeat_con(con)        else:            breakdef fuzzy1(con):    figure = 0    while True:        content = str(input(&#39;请输入搜索内容：&#39;))        with con.cursor() as cursor:            cursor.execute(                args=(&quot;%&quot; + content + &quot;%&quot;, figure),                query=&quot; select id, telname, relation, tel from tb_cont where telname like %s &quot;                      &quot; order by id limit %s, 5&quot;)            function(cursor)        print(&#39;1.删除联系人&#39;)        print(&#39;2.查看下一页&#39;)        print(&#39;3.查看上一页&#39;)        print(&#39;4.退出搜索&#39;)        elect = input(&#39;请选择：&#39;)        if elect == &#39;1&#39;:            cho = int(input(&#39;请输入要删除联系人的编号：&#39;))            with con.cursor() as cursor:                result = cursor.execute(                    args=(cho,),                    query=&quot;delete from tb_cont where id=%s&quot;)                if result == 1:                    print(&#39;删除成功！&#39;)                    print(&#39;-&#39; * 30)                    option = str(input(&#39;是否继续删除 yes / no  :&#39;))                    if option == &#39;yes&#39;:                        del_con(con)                    else:                        break                else:                    print(&#39;删除失败，请重新删除&#39;)                    continue        elif elect == &#39;2&#39;:            figure += 5            continue        else:            breakdef fuzzy2(con):    figure = 0    while True:        content = str(input(&#39;请输入搜索电话：&#39;))        with con.cursor() as cursor:            cursor.execute(                args=(&quot;%&quot; + content + &quot;%&quot;, figure),                query=&quot; select id, telname, relation, tel from tb_cont where tel like %s &quot;                      &quot; order by id limit %s, 5 &quot;)            function(cursor)        print(&#39;1.删除联系人&#39;)        print(&#39;2.查看下一页&#39;)        print(&#39;3.查看上一页&#39;)        print(&#39;4.退出搜索&#39;)        elect = input(&#39;请选择：&#39;)        if elect == &#39;1&#39;:            cho = int(input(&#39;请输入要删除联系人的编号：&#39;))            with con.cursor() as cursor:                result = cursor.execute(                    args=(cho,),                    query=&quot;delete from tb_cont where id=%s&quot;)                if result == 1:                    print(&#39;删除成功！&#39;)                    print(&#39;-&#39; * 30)                    option = str(input(&#39;是否继续删除 yes / no  :&#39;))                    if option == &#39;yes&#39;:                        del_con(con)                    else:                        break                else:                    print(&#39;删除失败，请重新删除&#39;)                    continue        elif elect == &#39;2&#39;:            figure += 5            continue        elif elect == &#39;3&#39;:            if figure &gt;= 5:                figure -= 5            else:                print(&#39;没有上一页，请重新选择&#39;)            continue        else:            breakdef updeat_con(con):    while True:        id = int(input(&#39;请输入要修改的联系人编号：&#39;))        telname = input(&#39;联系人姓名：&#39;)        relation = input(&#39;与联系人关系：&#39;)        tel = input(&#39;联系人电话：&#39;)        with con.cursor() as cursor:            result = cursor.execute(                args=(telname, relation, tel, id),                query=&quot;update tb_cont set telname=%s, relation=%s, tel=%s where id=%s&quot;)            if result == 1:                print(&#39;修改成功！&#39;)                print(&#39;-&#39; * 30)                option = str(input(&#39;是否继续修改 yes / no  :&#39;))                if option == &#39;yes&#39;:                    continue                else:                    break            else:                print(&#39;修改失败，请重新修改&#39;)                continuedef del_con(con):    while True:        cho = int(input(&#39;请输入要删除联系人的编号：&#39;))        with con.cursor() as cursor:            result = cursor.execute(                args=(cho,),                query=&quot;delete from tb_cont where id=%s&quot;)            if result == 1:                print(&#39;删除成功！&#39;)                print(&#39;-&#39; * 30)                option = str(input(&#39;是否继续删除 yes / no  :&#39;))                if option == &#39;yes&#39;:                    continue                else:                    break            else:                print(&#39;删除失败！&#39;)                print(&#39;-&#39; * 30)                option = str(input(&#39;是否继续删除 yes / no  :&#39;))                if option == &#39;yes&#39;:                    continue                else:                    breakdef check_con(con):    while True:        print(&#39;-&#39; * 30)        print(&#39;1.查看全部联系人&#39;)        print(&#39;2.搜索联系人&#39;)        print(&#39;3.返回上一级&#39;)        print(&#39;-&#39; * 30)        sel = input(&#39;请选择查看方式：&#39;)        if sel == &#39;1&#39;:            check_all_con(con)        elif sel == &#39;2&#39;:            while True:                print(&#39;-&#39; * 30)                print(&#39;1.按姓名搜索&#39;)                print(&#39;2.按电话搜索&#39;)                print(&#39;3.退出搜索&#39;)                print(&#39;-&#39; * 30)                choose = input(&#39;请选择搜索方式：&#39;)                if choose == &#39;1&#39;:                    fuzzy1(con)                elif choose == &#39;2&#39;:                    fuzzy2(con)                else:                    break        elif sel == &#39;3&#39;:            break        else:            print(&#39;输入错误，请重新选择&#39;)            continuedef clo(con):    print(&#39;欢迎再次使用！&#39;)    con.close()def main():    while True:        print(&#39;1.添加联系人&#39;)        print(&#39;2.查看联系人&#39;)        print(&#39;3.退出系统&#39;)        print(&#39;-&#39; * 30)        con = pymysql.connect(            host=&#39;localhost&#39;, port=3306, user=&#39;root&#39;, db=&#39;contact&#39;, charset=&#39;utf8&#39;, password=&#39;123456&#39;,            autocommit=True, cursorclass=pymysql.cursors.DictCursor)        num = input(&#39;请选择：&#39;)        if num == &#39;1&#39;:            add_con(con)        elif num == &#39;2&#39;:            check_con(con)        elif num == &#39;3&#39;:            clo(con)            break        else:            print(&#39;输入错误，请重新选择&#39;)            continueif __name__ == &#39;__main__&#39;:    main()</code></pre>]]></content>
      
      
      <categories>
          
          <category> databases </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linkman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>practice</title>
      <link href="/2018/10/16/%E6%95%B0%E6%8D%AE%E5%BA%93/practice/"/>
      <url>/2018/10/16/%E6%95%B0%E6%8D%AE%E5%BA%93/practice/</url>
      
        <content type="html"><![CDATA[<h3 id="practice1"><a href="#practice1" class="headerlink" title="practice1"></a>practice1</h3><h5 id="创建列表过程"><a href="#创建列表过程" class="headerlink" title="创建列表过程"></a>创建列表过程</h5><ul><li><p>创建SRS数据库</p><pre><code class="mysql">drop database if exists SRS;create database SRS default charset utf8 collate utf8_bin;</code></pre></li><li><p>切换到SRS数据库</p><pre><code class="mysql">use SRS;</code></pre></li><li><p>创建学院表</p><pre><code class="mysql">create table tb_college(collid int not null auto_increment comment &#39;学院编号&#39;,collname varchar(50) not null comment &#39;学院名称&#39;,collmaster varchar(20) not null comment &#39;院长姓名&#39;,collweb varchar(511) default &#39;&#39; comment &#39;学院网站&#39;,primary key (collid));</code></pre></li><li><p>添加唯一约束</p><pre><code class="mysql">alter table tb_college add constraint uni_college_collname unique (collname);</code></pre></li><li><p>创建学生表</p><pre><code class="mysql">create table tb_student(stuid int not null comment &#39;学号&#39;,sname varchar(20) not null comment &#39;学生姓名&#39;,gender bit default 1 comment &#39;性别&#39;,birth date not null comment &#39;出生日期&#39;,addr varchar(255) default &#39;&#39; comment &#39;籍贯&#39;,collid int not null comment &#39;所属学院编号&#39;,primary key (stuid));</code></pre></li><li><p>添加外键约束</p><pre><code class="mysql">- alter table tb_student add constraint fk_student_collid foreign key (collid) references tb_college (collid);</code></pre></li><li><p>创建教师表</p><pre><code class="mysql">create table tb_teacher(teaid int not null comment &#39;教师工号&#39;,tname varchar(20) not null comment &#39;教师姓名&#39;,title varchar(10) default &#39;&#39; comment &#39;职称&#39;,collid int not null comment &#39;所属学院编号&#39;);</code></pre></li><li><p>添加主键约束</p><pre><code class="mysql">alter table tb_teacher add constraint pk_teacher primary key (teaid);</code></pre></li><li><p>添加外键约束</p><pre><code class="mysql">alter table tb_teacher add constraint fk_teacher_collid foreign key (collid) references tb_college (collid);</code></pre></li><li><p>创建课程表</p><pre><code class="mysql">create table tb_course(couid int not null comment &#39;课程编号&#39;,cname varchar(50) not null comment &#39;课程名称&#39;,credit tinyint not null comment &#39;学分&#39;,teaid int not null comment &#39;教师工号&#39;,primary key (couid));</code></pre></li><li><p>添加外键约束</p><pre><code class="mysql">alter table tb_course add constraint fk_course_tid foreign key (teaid) references tb_teacher (teaid);</code></pre></li><li><p>创建学生选课表</p><pre><code class="mysql">create table tb_score(scid int not null auto_increment comment &#39;选课编号&#39;,sid int not null comment &#39;学号&#39;,cid int not null comment &#39;课程编号&#39;,seldate date comment &#39;选课时间日期&#39;,mark decimal(4,1) comment &#39;考试成绩&#39;,primary key (scid));</code></pre></li><li><p>添加外键约束</p><pre><code class="mysql">alter table tb_score add constraint fk_score_sid foreign key (sid) references tb_student (stuid);alter table tb_score add constraint fk_score_cid foreign key (cid) references tb_course (couid);-- 添加唯一约束alter table tb_score add constraint uni_score_sid_cid unique (sid, cid);</code></pre></li><li><p>插入学院数据</p><pre><code class="mysql">insert into tb_college (collname, collmaster, collweb) values (&#39;计算机学院&#39;, &#39;左冷禅&#39;, &#39;http://www.abc.com&#39;),(&#39;外国语学院&#39;, &#39;岳不群&#39;, &#39;http://www.xyz.com&#39;),(&#39;经济管理学院&#39;, &#39;风清扬&#39;, &#39;http://www.foo.com&#39;);</code></pre></li><li><p>插入学生数据</p><pre><code class="mysql">insert into tb_student (stuid, sname, gender, birth, addr, collid) values(1001, &#39;杨逍&#39;, 1, &#39;1990-3-4&#39;, &#39;四川成都&#39;, 1),(1002, &#39;任我行&#39;, 1, &#39;1992-2-2&#39;, &#39;湖南长沙&#39;, 1),(1033, &#39;王语嫣&#39;, 0, &#39;1989-12-3&#39;, &#39;四川成都&#39;, 1),(1572, &#39;岳不群&#39;, 1, &#39;1993-7-19&#39;, &#39;陕西咸阳&#39;, 1),(1378, &#39;纪嫣然&#39;, 0, &#39;1995-8-12&#39;, &#39;四川绵阳&#39;, 1),(1954, &#39;林平之&#39;, 1, &#39;1994-9-20&#39;, &#39;福建莆田&#39;, 1),(2035, &#39;东方不败&#39;, 1, &#39;1988-6-30&#39;, null, 2),(3011, &#39;林震南&#39;, 1, &#39;1985-12-12&#39;, &#39;福建莆田&#39;, 3),(3755, &#39;项少龙&#39;, 1, &#39;1993-1-25&#39;, null, 3),(3923, &#39;杨不悔&#39;, 0, &#39;1985-4-17&#39;, &#39;四川成都&#39;, 3);</code></pre></li><li><p>插入老师数据</p><pre><code class="mysql">insert into tb_teacher (teaid, tname, title, collid) values (1122, &#39;张三丰&#39;, &#39;教授&#39;, 1),(1133, &#39;宋远桥&#39;, &#39;副教授&#39;, 1),(1144, &#39;杨逍&#39;, &#39;副教授&#39;, 1),(2255, &#39;范遥&#39;, &#39;副教授&#39;, 2),(3366, &#39;韦一笑&#39;, &#39;讲师&#39;, 3);</code></pre></li><li><p>插入课程数据</p><pre><code class="mysql">insert into tb_course (couid, cname, credit, teaid) values (1111, &#39;Python程序设计&#39;, 3, 1122),(2222, &#39;Web前端开发&#39;, 2, 1122),(3333, &#39;操作系统&#39;, 4, 1122),(4444, &#39;计算机网络&#39;, 2, 1133),(5555, &#39;编译原理&#39;, 4, 1144),(6666, &#39;算法和数据结构&#39;, 3, 1144),(7777, &#39;经贸法语&#39;, 3, 2255),(8888, &#39;成本会计&#39;, 2, 3366),(9999, &#39;审计学&#39;, 3, 3366);</code></pre></li><li><p>插入选课数据</p><pre><code class="mysql">insert into tb_score (sid, cid, seldate, mark) values (1001, 1111, &#39;2017-09-01&#39;, 95),(1001, 2222, &#39;2017-09-01&#39;, 87.5),(1001, 3333, &#39;2017-09-01&#39;, 100),(1001, 4444, &#39;2018-09-03&#39;, null),(1001, 6666, &#39;2017-09-02&#39;, 100),(1002, 1111, &#39;2017-09-03&#39;, 65),(1002, 5555, &#39;2017-09-01&#39;, 42),(1033, 1111, &#39;2017-09-03&#39;, 92.5),(1033, 4444, &#39;2017-09-01&#39;, 78),(1033, 5555, &#39;2017-09-01&#39;, 82.5),(1572, 1111, &#39;2017-09-02&#39;, 78),(1378, 1111, &#39;2017-09-05&#39;, 82),(1378, 7777, &#39;2017-09-02&#39;, 65.5),(2035, 7777, &#39;2018-09-03&#39;, 88),(2035, 9999, date(now()), null),(3755, 1111, date(now()), null),(3755, 8888, date(now()), null),(3755, 9999, &#39;2017-09-01&#39;, 92);</code></pre></li></ul><h5 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h5><ul><li><p>查询所有学生信</p><pre><code class="mysql">select * from tb_student;</code></pre></li><li><p>查询所有课程名称及学分(投影和别名)</p><pre><code class="mysql">select cname as 课程名称,credit as 学分 from tb_course;</code></pre></li><li><p>查询所有女学生的姓名和出生日期(筛选)</p><pre><code class="mysql">select sname as 姓名,birth as 出生日期 from tb_student where gender=0;</code></pre></li><li><p>查询所有80后学生的姓名、性别和出生日期(筛选)</p><pre><code class="mysql">判断方法一(只适用于mysql数据库)：select sname,if(gender, &#39;男&#39;, &#39;女&#39;),birth from tb_student where birth between&#39;1980-1-1&#39; and &#39;1989-12-31&#39;;方法二(适用于所有数据库)：select sname,case gender when 1 then &#39;男&#39; else &#39;女&#39; end,birth from tb_student where birth between&#39;1980-1-1&#39; and &#39;1989-12-31&#39;;</code></pre></li><li><p>查询姓”杨“的学生姓名和性别(模糊)</p><pre><code class="mysql">select sname,gender from tb_student where sname like &#39;杨%&#39;;</code></pre></li><li><p>查询姓”杨“名字两个字的学生姓名和性别(模糊)</p><pre><code class="mysql">select sname,gender from tb_student where sname like &#39;杨_&#39;;</code></pre></li><li><p>查询姓”杨“名字三个字的学生姓名和性别(模糊)</p><pre><code class="mysql">select sname,gender from tb_student where sname like &#39;杨__&#39;;</code></pre></li><li><p>查询名字中有”不“字或“嫣”字的学生的姓名(模糊)</p><pre><code class="mysql">select sname from tb_student where sname like &#39;%不%&#39; or sname like &#39;%嫣%&#39;;</code></pre></li><li><p>查询没有录入家庭住址的学生姓名(空值)</p><pre><code class="mysql">select sname from tb_student where addr is null or addr=&#39;&#39;;</code></pre></li><li><p>查询录入了家庭住址的学生姓名(空值)</p><pre><code class="mysql">select sname from tb_student where addr is not null and addr&lt;&gt;&#39;&#39;;</code></pre></li><li><p>查询学生选课的所有日期(diatinct —– 去重)</p><pre><code class="mysql">select distinct seldate from tb_score;</code></pre></li><li><p>查询学生的家庭住址</p><pre><code class="mysql">select distinct addr from tb_student where addr is not null and addr&lt;&gt;&#39;&#39;;</code></pre></li><li><p>查询学生的姓名和生日按年龄从大到小排列(排序)</p><pre><code class="mysql">查询生日：select sname,birth from tb_student order by birth asc;查询年龄：select sname,year(now()) - year(birth) as 年龄 from tb_student order by birth asc;</code></pre></li><li><p>查询所有男学生的姓名和生日按年龄从大到小排列(排序)( order by ——- 排序)</p><pre><code class="mysql">select sname,birth from tb_student where gender=1 order by birth asc;</code></pre></li><li><p>查询年龄最大的学生的出生日期(聚合函数)</p><pre><code class="mysql">select min(birth) from tb_student;</code></pre></li><li><p>查询年龄最小的学生的出生日期(聚合函数)</p><pre><code class="mysql">select max(birth) from tb_student;</code></pre></li><li><p>查询男女学生的人数(分组和聚合函数)( 分组——— group by)</p><pre><code class="mysql">按人数排降序：select if(gender, &#39;男&#39;, &#39;女&#39;) as 性别, count(gender) as 人数 from tb_student group by gender order by 人数 desc;</code></pre></li><li><p>查询课程编号为1111的课程的平均成绩(筛选和聚合函数)</p><pre><code class="mysql">select avg(mark) as 平均分 from tb_score where cid=1111;</code></pre></li><li><p>查询学号为1001的学生所有课程的总成绩(筛选和聚合函数)</p><pre><code class="mysql">select sum(mark) as 平均分 from tb_score where cid=1001;</code></pre></li><li><p>查询每个学生的学号和平均成绩(分组和聚合函数)</p><pre><code class="mysql">select sid,avg(mark) from tb_score where mark is not null group by sid;</code></pre></li><li><p>查询平均成绩大于等于90分的学生的学号和平均成绩(先分组，再筛选 ——— 分组后跟having)</p><pre><code class="mysql">select sid,avgmark from tb_score group by sid having avg(mark)&gt;=90;</code></pre></li><li><p>查询年龄最大的学生的姓名(子查询)</p><ul><li><p>子查询 — 在一个查询中又使用到了另外一个查询的结果</p></li><li><p>查询年龄最大的学生的姓名（子查询）</p><pre><code class="mysql">select sname from tb_student where birth= (select min(birth) from tb_student);</code></pre></li></ul></li><li><p>查询年龄最大的学生的姓名和年龄</p><pre><code class="mysql">select sname as 姓名, year(now()) - year(birth) as 年龄from tb_student where birth= (select min(birth) from tb_student); </code></pre></li><li><p>查询选了两门以上的课程的学生姓名(子查询/分组条件/集合运算)</p><pre><code class="mysql">select sname from tb_student where stuid in (select sid from tb_score group by sid having count(sid)&gt;2);</code></pre></li><li><p>查询选课学生的姓名和平均成绩(子查询和连接查询)</p><pre><code class="mysql">select sname, avgmark from tb_student t1,(select sid, avg(mark) as avgmark from tb_score group by sid) t2where stuid=sid;select sname,cname,mark from tb_studentinner join tb_score on stuid=sidinner join tb_course on couid=cidwhere mark is not null;-- 注意：在连接查询时结果没有给出连接条件就会形成笛卡尔积-- 笛卡儿积-- A(a, b, c)*B(d, e)={ad, ae,bd, be, cd, ce}-- 查询学生姓名、所选课程名称和成绩(连接查询)-- 连接查询(连接查询/连结查询)select sname,cname,markfrom tb_score, tb_student, tb_coursewhere stuid=sid and couid=cid and mark is not null;-- 查询每个学生的姓名和选课数量（左外连接和子查询）-- 左外连接(left outer join) ----- 把左表（写在连接前面的表）不满足连接条件的记录也查询出来对应记录补null值-- 右外连接(right outer join) ----- 把右表（写在连接后面的表）不满足连接条件的记录也查询出来对应记录补null值-- 全外连接(full outer join) ------ 把满足和不满足条件的记录全部查出来，mysql数据库不支持此操作select sname as 姓名, conter as 选课数量 from tb_student left join,(select sid, count(sid) as conter from tb_score group by sid)t2on stuid(+)=sid;</code></pre></li></ul><h3 id="表的连接关系"><a href="#表的连接关系" class="headerlink" title="表的连接关系"></a>表的连接关系</h3><p><img src="/2018/10/16/数据库/practice/表连接1.png" alt="表连接1"></p><h4 id="内连接的方式"><a href="#内连接的方式" class="headerlink" title="内连接的方式"></a>内连接的方式</h4><p><img src="/2018/10/16/数据库/practice/表连接2.png" alt="表连接2"></p><h4 id="自连接的方式"><a href="#自连接的方式" class="headerlink" title="自连接的方式"></a>自连接的方式</h4><p><img src="/2018/10/16/数据库/practice/表连接3.png" alt="表连接3"></p><h4 id="外连接的方式"><a href="#外连接的方式" class="headerlink" title="外连接的方式"></a>外连接的方式</h4><p><img src="/2018/10/16/数据库/practice/表连接4.png" alt="表连接4"></p><h2 id="practice2"><a href="#practice2" class="headerlink" title="practice2"></a>practice2</h2><ul><li><p>创建人力资源管理系统数据库</p><pre><code class="mysql">drop database if exists HRS;create database HRS default charset utf8 collate utf8_bin;</code></pre></li><li><p>切换数据库上下文环境<br><code>use HRS;</code></p></li><li><p>删除表</p><pre><code class="mysql">drop table if exists TbEmp;drop table if exists TbDept;</code></pre></li><li><p>创建部门表</p><pre><code class="mysql">create table TbDept(dno tinyint not null comment &#39;部门编号&#39;,dname varchar(10) not null comment &#39;部门名称&#39;,dloc varchar(20) not null comment &#39;部门所在地&#39;,primary key (dno));</code></pre></li><li><p>添加部门记录</p><pre><code class="mysql">insert into TbDept values (10, &#39;会计部&#39;, &#39;北京&#39;);insert into TbDept values (20, &#39;研发部&#39;, &#39;成都&#39;);insert into TbDept values (30, &#39;销售部&#39;, &#39;重庆&#39;);insert into TbDept values (40, &#39;运维部&#39;, &#39;深圳&#39;);</code></pre></li><li><p>创建员工表</p><pre><code class="mysql">create table TbEmp(eno int not null comment &#39;员工编号&#39;,ename varchar(20) not null comment &#39;员工姓名&#39;,job varchar(20) not null comment &#39;员工职位&#39;,mgr int comment &#39;主管编号&#39;,sal int not null comment &#39;月薪&#39;,comm int comment &#39;月补贴&#39;,dno tinyint comment &#39;所在部门编号&#39;,primary key (eno));</code></pre></li><li><p>添加外键约束</p><pre><code class="mysql">alter table TbEmp add constraint fk_dno foreign key (dno) references TbDept(dno) on delete set null on update cascade;-- 更新，删除后赋值为null，所以前面创建的时候就不能添加（is not null)-- on delete set null on update cascade;</code></pre></li><li><p>添加员工记录</p><pre><code class="mysql">insert into TbEmp values (7800, &#39;张三丰&#39;, &#39;总裁&#39;, null, 9000, 1200, 20),(2056, &#39;乔峰&#39;, &#39;分析师&#39;, 7800, 5000, 1500, 20),(3088, &#39;李莫愁&#39;, &#39;设计师&#39;, 2056, 3500, 800, 20),(3211, &#39;张无忌&#39;, &#39;程序员&#39;, 2056, 3200, null, 20),(3233, &#39;丘处机&#39;, &#39;程序员&#39;, 2056, 3400, null, 20),(3251, &#39;张翠山&#39;, &#39;程序员&#39;, 2056, 4000, null, 20),(5566, &#39;宋远桥&#39;, &#39;会计师&#39;, 7800, 4000, 1000, 10),(5234, &#39;郭靖&#39;, &#39;出纳&#39;, 5566, 2000, null, 10),(3344, &#39;黄蓉&#39;, &#39;销售主管&#39;, 7800, 3000, 800, 30),(1359, &#39;胡一刀&#39;, &#39;销售员&#39;, 3344, 1800, 200, 30),(4466, &#39;苗人凤&#39;, &#39;销售员&#39;, 3344, 2500, null, 30),(3244, &#39;欧阳锋&#39;, &#39;程序员&#39;, 3088, 3200, null, 20),(3577, &#39;杨过&#39;, &#39;会计&#39;, 5566, 2200, null, 10),(3588, &#39;朱九真&#39;, &#39;会计&#39;, 5566, 2500, null, 10);</code></pre><h4 id="习题-1"><a href="#习题-1" class="headerlink" title="习题"></a>习题</h4></li><li><p>查询薪资最高的员工姓名和工资</p><pre><code class="mysql">-- select ename, sal+comm from TbEmp order by sal desc limit 0, 1;        ------- 排序出现的问题：可能前几个人的工资一样select ename as 总裁, sal as 工资 from tbempwhere sal=(select max(sal) from tbemp);</code></pre></li><li><p>查询员工的姓名和年薪((月薪+补贴)*12)</p><pre><code class="mysql">-- select ename as 姓名, sal12 + if(comm12,comm12,0) as 年薪 from TbEmp; orselect ename as 姓名, (sal + ifnull(comm,0))12 as 年薪 from TbEmp;</code></pre></li><li><p>查询年薪大于5万的员工的姓名和年薪</p><pre><code class="mysql">select ename as 姓名, (sal + ifnull(comm,0))12 as 年薪-- from TbEmp where 年薪&gt;50000;from TbEmp where (sal + ifnull(comm,0))12&gt;50000;</code></pre></li><li><p>查询有员工的部门的编号和人数<br><code>select dno,count(dno) as 人数 from TbEmp group by dno;</code>.</p></li><li><p>查询所有部门的名称和人数</p></li></ul><pre><code class="mysql">select dno as 部门编号,dname as 部门名称,counter as 人数 from tbdept as t1,(select dno as d,count(dno) as counter from tbemp group by dno)t2where t1.dno=t2.d;</code></pre><pre><code class="mysql">select dname as 部门名称, ifnull(total, 0) as 人数 from tbdept t1 left join(select dno, count(dno) as total from tbemp group by dno)t2on t1.dno=t2.dno;</code></pre><ul><li><p>查询薪资最高的员工(Boss除外)的姓名和工资</p><pre><code class="mysql">-- select ename as 姓名, sal+if(comm, comm, 0) as 工资 from TbEmp-- order by (sal+if(comm, comm, 0)) desc limit 1, 1;select ename as 员工, sal as 工资 from tbempwhere sal=(select max(sal) from tbemp where mgr is not null);</code></pre></li><li><p>查询薪水超过平均薪水的员工的姓名和工资</p><pre><code class="mysql">select ename as 姓名, sal as 工资 from tbempwhere (sal+if(comm, comm, 0))&gt;(select avg(sal+if(comm, comm, 0)) from tbemp);</code></pre><pre><code class="mysql">select ename as 姓名, sal as 工资 from TbEmpwhere sal&gt;(select avg(sal) from tbemp);</code></pre></li><li><p>查询薪水超过其所在部门平均薪水的员工的姓名、部门编号和工资</p><pre><code class="mysql">select ename, t1.dno, avgsal from tbemp t1,(select dno, avg(sal) as avgsal from tbemp group by dno)t2where t1.dno=t2.dno and sal&gt;avgsal;-- 多个连表条件之间用and连接</code></pre></li><li><p>查询薪水超过其所在部门平均薪水的员工的姓名、部门名称和工资</p><pre><code class="mysql">select ename, dname, sal from tbemp t1,(select dno, avg(sal) as avgsal from tbemp group by dno)t2,tbdept t3where t1.dno=t2.dno and sal&gt;avgsal and t2.dno=t3.dno;</code></pre></li><li><p>查询部门中薪水最高的人姓名、工资和所在部门名称</p><pre><code class="mysql">select ename, dname, sal from tbemp t1,(select dno, max(sal) as maxsal from tbemp group by dno)t2,tbdept t3where t1.dno=t2.dno and t2.dno=t3.dno and sal=maxsal;</code></pre></li><li><p>查询主管的姓名</p><pre><code class="mysql">- -- select ename from tbemp where job like&#39;%主管%&#39;;select ename, job from tbempwhere eno in (select distinct mgr from tbemp where mgr is not null);-- 说明：去重操作和集合运算效率是非常低的,可以使用以下方法select ename as 主管, job as 职位 from tbemp t1 where exists (select &#39;x&#39; from tbemp t2 where t1.eno=t2.mgr) order by eno desc;</code></pre></li><li><p>通常建议用exists或者not exists操作来代替去重和集合运算</p><pre><code class="mysql">select ename, job from tbemp t1where exists (select &#39;x&#39; from tbemp t2 where t1.eno=t2.mgr);</code></pre></li><li><p>视图是查询的快照</p><pre><code class="mysql">-- 创建视图create view vw_dept_emp_count asselect dno, count(dno) from tbemp group by dno;-- 查看视图select * from vw_dept_emp_count;-- 通过视图可以将用户对表的访问权限进一步加以限制-- 也就是说普通用户看到的就是限制的视图内容create view emp_no_sal asselect ename, dname, sal from tbemp t1,(select dno, avg(sal) as avgsal from tbemp group by dno)t2,tbdept t3where t1.dno=t2.dno and sal&gt;avgsal and t2.dno=t3.dno;-- 查看视图,限制条件select ename, dname from emp_no_sal;</code></pre></li><li><p>用硬件做的事情，用软件也可以做；反之亦可</p></li><li><p>索引(相当于一本书的目录）</p><ul><li><p>为表创建索引可以加速查询(用空间换时间)</p></li><li><p>索引不能滥用：</p><ul><li><p>一、索引会让增删改变得更慢，应为增删改的操作可能会导致更新索引</p></li><li><p>二、索引会占用额外的存储空间</p></li><li>索引应该建在经常被用于查询的筛选条件的列上面，主键上有默认的索引(唯一索引)</li></ul></li></ul></li><li><p>创建索引</p><pre><code class="mysql">-- 说明：使用模糊查询 ----- 如果查询条件不以%开头，索引有效;反之,无效create index idx_emp_ename on tbemp(ename);-- 唯一索引create unique index uni_emp_ename on tbemp(ename);</code></pre></li><li><p>删除索引<br><code>alter table tbemp drop index uni_emp_ename;</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> databases </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL</title>
      <link href="/2018/10/16/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/"/>
      <url>/2018/10/16/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/</url>
      
        <content type="html"><![CDATA[<p>MySQL是一种<a href="https://baike.baidu.com/item/%E5%BC%80%E6%94%BE%E6%BA%90%E4%BB%A3%E7%A0%81" target="_blank" rel="noopener">开放源代码</a>的关系型<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86" target="_blank" rel="noopener">数据库管理</a>系统（RDBMS），MySQL<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F" target="_blank" rel="noopener">数据库系统</a>使用最常用的数据库管理语言–<a href="https://baike.baidu.com/item/%E7%BB%93%E6%9E%84%E5%8C%96%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80" target="_blank" rel="noopener">结构化查询语言</a>（SQL）进行数据库管理。</p><p>端口是IP地址区分不同服务的</p><ul><li>Docker —- 屏蔽硬件和软件的差异</li><li>虚拟机（Virtual Machine）指通过软件模拟的具有完整硬件系统功能的、运行在一个完全隔离环境中的完整计算机系统</li></ul><p>图形化的MySQL客户端工具</p><ul><li>Navicat for MySQL</li><li>Tod for MySQL</li><li>SQLyog</li></ul><h3 id="ER-—–-实体关系图"><a href="#ER-—–-实体关系图" class="headerlink" title="ER —– 实体关系图"></a>ER —– 实体关系图</h3><p><img src="/2018/10/16/数据库/MySQL/表与表的关系.png" alt="image"></p><h3 id="MySQL中表与表的关系"><a href="#MySQL中表与表的关系" class="headerlink" title="MySQL中表与表的关系"></a>MySQL中表与表的关系</h3><p>一对一：一个实体只对应一个实体</p><p>一对多：一个实体可以对应多个实体</p><p>多对多：多个实体对应多个实体</p><h5 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h5><p>外键/外键约束 ——- 外来的主键 —- 参照完整性</p><p>数据的完整性</p><ul><li>实体完整性==：==<ul><li>每条记录都是独一无二的，没有冗余</li><li>主键/唯一索引（唯一的约束）</li></ul></li></ul><p><code>alter table tb_college add constraint uni_college_collname unique(collname)</code></p><ul><li>参照完整性：<ul><li>B表参照了A表，A表没有的记录在B表中决不能出现</li><li>外键(外键约束)<pre><code>alter table tb_student add column coll_stuid int;alter table tb_student add constraint fk_teacher_coll_stuidforeign key (coll_stuid) references tb_college (num);</code></pre></li></ul></li><li>域完整性：录入的数据都是有效的<ul><li>数据类型/非空约束/默认值约束/检查约束(MySQL中不生效)</li></ul></li></ul><p>数据的一致性</p><h4 id="聚合函数：在所有的数据库中都支持的函数"><a href="#聚合函数：在所有的数据库中都支持的函数" class="headerlink" title="聚合函数：在所有的数据库中都支持的函数"></a>聚合函数：在所有的数据库中都支持的函数</h4><ul><li>max()/ main()/ sum()/ avg()/ count()</li></ul>]]></content>
      
      
      <categories>
          
          <category> databases </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚拟机 </tag>
            
            <tag> 集合函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python</title>
      <link href="/2018/10/15/README/"/>
      <url>/2018/10/15/README/</url>
      
        <content type="html"><![CDATA[<p>学习是一件庄严而又神圣的事情，贵在坚持</p><p>不断地积累,才能体会到其中的乐趣</p><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><h3 id="第1天"><a href="#第1天" class="headerlink" title="第1天"></a>第1天</h3><ol><li>前端页面 = 标签(内容) + CSS(显示) + JavaScript(行为)</li><li>JavaScript = ECMAScript + BOM(window) + DOM(document)</li><li>window <ul><li>alert() / prompt() / confirm() / close()</li><li>setInterval() / setTimeout() / clearInterval() / clearTimeout()</li></ul></li><li>document<ul><li>getElementById() / getElementsByTagName() / getElementsByClassName()</li><li>querySelector() / querySelectorAll()</li></ul></li><li>HTMLElement<ul><li>textContent / innerHTML</li></ul></li><li>其他知识<ul><li>Date: getFullYear() / getMonth() / getDate() / getDay()</li><li>Math: Math.random()</li><li>parseInt() / parseFloat()</li></ul></li></ol><h3 id="第2天"><a href="#第2天" class="headerlink" title="第2天"></a>第2天</h3><ol><li>JavaScript中的事件处理<ul><li>在标签上使用onXXX属性来进行事件绑定</li><li>通过代码获取标签绑定onXXX属性</li><li>通过代码获取标签然后使用addEventListener()绑定事件<br>使用removeEventListener()反绑定事件<br>这里有浏览器兼容性问题 对于低版本IE要使用<br>attachEvent() / detachEvent()</li></ul></li><li>事件回调函数和事件对象<ul><li>绑定事件监听器的函数都需要传入事件的回调函数</li><li>程序员知道事件发生的时候需要做什么样的处理但是不知道事件什么时候发生</li><li>所以传入一个函数在将来发生事件的时候由系统进行调用 这种函数就称为回调函数</li><li>回调函数的第一个参数代表事件对象（封装了和事件相关的所有信息）对于低版本IE</li><li>可以通过window.event来获取事件对象</li><li>事件对象的属性和方法：<ul><li>target / srcElement - 事件源（引发事件的标签）</li><li>preventDefault() / returnValue=false - 阻止事件的默认行为</li><li>处理事件有两种顺序：事件冒泡（默认，从内向外）/ 事件捕获（从外向内）</li><li>如果要阻止事件的传播行为（例如阻止事件冒泡）可以使用<br>stopPropagation() / cancelBubble=true</li></ul></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL</title>
      <link href="/2018/10/15/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL%E9%A2%84%E4%B9%A0/"/>
      <url>/2018/10/15/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL%E9%A2%84%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>MySQL的海豚标志的名字叫“sakila”，它是由MySQL AB的创始人从用户在“海豚命名”的竞赛中建议的大量的名字表中选出的。获胜的名字是由来自非洲斯威士兰的开源软件开发者Ambrose Twebaze提供。</p><h1 id="MySQL预习"><a href="#MySQL预习" class="headerlink" title="MySQL预习"></a>MySQL预习</h1><h3 id="MySQL目录结构"><a href="#MySQL目录结构" class="headerlink" title="MySQL目录结构"></a>MySQL目录结构</h3><ul><li>bin目录，存储可执行文件</li><li>data目录，存储数据文件</li><li>docs，文档</li><li>include目录，存储包含的头文件</li><li>lib目录，存储库文件</li><li>share，错误消息和字符集文件</li></ul><h3 id="MySQL的配置选项"><a href="#MySQL的配置选项" class="headerlink" title="MySQL的配置选项"></a>MySQL的配置选项</h3><ul><li><p><strong>修改编码方式</strong></p><p><strong>[mysql]</strong></p><p><strong>default-character-set=utf8</strong></p><p><strong>[mysqld]</strong></p><p><strong>character-set-server=utf8</strong></p></li></ul><h3 id="MySQL服务的启动和关闭"><a href="#MySQL服务的启动和关闭" class="headerlink" title="MySQL服务的启动和关闭"></a>MySQL服务的启动和关闭</h3><ul><li><p><strong>启动MySQL服务</strong></p><p><strong>net start mysql</strong></p></li><li><p><strong>关闭MySQL服务</strong></p><p><strong>net stop mysql</strong></p></li></ul><h3 id="MySQL的使用"><a href="#MySQL的使用" class="headerlink" title="MySQL的使用"></a>MySQL的使用</h3><ol><li><p><strong>MySQL登录</strong></p><ul><li><p>mysql  参数</p><p><img src="/2018/10/15/数据库/MySQL预习/MySQL1.jpg" alt="MySQL1"></p></li></ul></li><li><p><strong>MySQL退出</strong></p><ul><li><strong>mysql &gt; exit;</strong></li><li><strong>mysql &gt; quit;</strong></li><li><strong>mysql &gt; \q;</strong></li></ul></li></ol><h3 id="修改MySQL提示符"><a href="#修改MySQL提示符" class="headerlink" title="修改MySQL提示符"></a>修改MySQL提示符</h3><ul><li><p><strong>连接客户端时通过参数指定</strong></p><p><code>shell&gt;mysql -uroot -proot -prompt 提示符</code>    </p></li><li><p><strong>连接上客户端后，通过prompt的命令来实现</strong></p><ul><li><code>mysql&gt;prompt 提示符</code>    <ul><li><strong>\D ———– 完整的日期</strong></li><li><strong>\d ———– 当前数据库</strong></li><li><strong>\h ———– 服务器的名称</strong></li><li><strong>\u ———– 当前用户</strong></li></ul></li></ul></li></ul><h3 id="MySQL常用命令"><a href="#MySQL常用命令" class="headerlink" title="MySQL常用命令"></a>MySQL常用命令</h3><ul><li><p><strong>显示当前服务器版本</strong></p><p><strong>SELECT  VERSION();</strong></p></li><li><p><strong>显示当前日期时间</strong></p><p><strong>SELECT  NOW();</strong></p></li><li><p><strong>显示当前用户</strong></p><p><strong>SELECT  USER();</strong></p></li></ul><h3 id="MySQL语句的规范"><a href="#MySQL语句的规范" class="headerlink" title="MySQL语句的规范"></a>MySQL语句的规范</h3><ul><li><strong>关键字与函数名称全部大写</strong></li><li><strong>数据库名称、表名称、字段名称全部小写</strong></li><li><strong>SQL语句必须以分号结尾</strong></li></ul><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><ul><li><p><strong>CREATE {DATABASE | SCHEMA} [IF NOT EXISTS] DB_name</strong></p><p><strong>[DEFAULT] CHARACTER SET [=] charset_name</strong></p></li></ul><h3 id="查看当前服务器下的数据表列表"><a href="#查看当前服务器下的数据表列表" class="headerlink" title="查看当前服务器下的数据表列表"></a>查看当前服务器下的数据表列表</h3><ul><li><p><strong>SHOW {DATABASES | SCHEMAS}</strong></p><p><strong>[LIKE ‘pattern‘ | WHERE expr]</strong></p></li></ul><h3 id="修改数据库"><a href="#修改数据库" class="headerlink" title="修改数据库"></a>修改数据库</h3><ul><li><p><strong>ALTER {DATABASE | SCHEMA} [db_name]</strong></p><p><strong>[DEFAULT] CHARACTER SET [=] charset_name</strong></p></li></ul><h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><ul><li><strong>DROP {DATABASE | SCHEMA} [IF EXISTS] bd_name</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> databases </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux操作命令</title>
      <link href="/2018/09/18/Linux/%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/09/18/Linux/%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="查看自己使用的Shall"><a href="#查看自己使用的Shall" class="headerlink" title="查看自己使用的Shall"></a>查看自己使用的Shall</h3><ul><li>Shall -ps 查看自己使用的Shell</li><li>Shell ——– 人机对话的交互式环境</li><li>bash ——– bourne again shell</li></ul><h3 id="用命令"><a href="#用命令" class="headerlink" title="用命令"></a>用命令</h3><ul><li>clear —— 清屏</li><li>ps —— processes  查看正在运行的进程</li><li>ps -ef —————– 查看运行的进程</li><li>kill PID —— 杀掉进程</li><li>kill -9 ———— 强制杀死进程</li><li>adduser 用户名 ——- 添加用户</li><li>passwd ———- 设置密码</li><li>userdel ———– 删除用户</li><li>su 用户名 ——— 切换用户（switch user）</li><li>sudo ———- 以超级管理员身份操作（super user do）</li><li>chown 拥有者 文件名 ————– 改变文件的拥有者</li><li>‘#’——- 超级管理员</li><li>$ ——– 普通用户</li><li>~ ———- 主目录<h6 id="两个不同的用户"><a href="#两个不同的用户" class="headerlink" title="两个不同的用户"></a>两个不同的用户</h6></li><li>write 用户名 ————— 连接相同的系统的不同用户之间发送消息</li><li>Ctrl d ————— 消息内容结束符</li><li>mesg n / y —————- 不接收消息/接收消息</li><li>wall ————- 给所有用户发消息</li></ul><h4 id="查看命令、帮助文档"><a href="#查看命令、帮助文档" class="headerlink" title="查看命令、帮助文档"></a>查看命令、帮助文档</h4><ul><li>Tab ——– 补全命令，查看命令</li><li>q  ——  结束查看</li><li>man 命令 ——— 查看手册</li><li>命令 –help ———– 查看命令用法</li><li>cd ———– 改变所在目录</li><li>cd /目录名 ——- 去到某个目录</li><li>pwd ——– 查看目录</li><li>ls ——— 查看文件或者文件名（list directory contents）<ul><li>-l 长格式查看</li><li>-a 查看所有（包括以点开头的隐藏文件和文件夹）</li><li>-R 递归查看</li></ul></li><li>| ———- 管道（左边的输出作为右边的输入）</li><li>wget 网址 ——– 通过网络下载文件</li><li>cat ———- concatenate  连接多个文件并显示到标准输出</li><li>cat 文件名 ——— 查看文件</li><li>cat -n 网址 ——– 查看行号</li><li>history ———- 查看所有的历史命令</li><li>！ 历史命令编号 ———- 执行历史命令</li><li>history -c ———— 清除历史命令</li><li>Ctrl c ——— 强行终止命令</li><li>mkdir ——— 创建目录<ul><li>-r 递归删除</li><li>-f 强制删除</li></ul></li><li>rmdir ——— 删除空目录</li><li>cp ———– 复制文件和目录</li><li>cp -r /文件名————- 复制文件夹并修改文件名</li><li>mv —————— 剪切文件</li><li>rm ———- 删除文件和目录</li><li>touch —————- 创建空文件或者修改文件时间</li><li>echo ————— 回声（输入什么，就输出什么）</li><li><strong>&gt;</strong> 件 ———– 输出重定向（输出到指定的文件夹）</li><li>alias / unalies 重新取别名/取消别名</li><li><strong>&gt;&gt;</strong> ———— 追加输出重定向</li><li><strong>2&gt;</strong> ———— 错误输出重定向</li><li>&lt;输入重定向</li><li>grep 搜索字符串</li><li>date ————— 查看时间</li><li>cal —————- 查看日历（calendar）</li><li>head -数字 —————- 查看指定头行数</li><li>tail -数字 —————– 查看指定尾行数</li><li>less/more —————– 分屏查看文件</li><li>wc ——————- world count 统计</li><li>uniq 文件夹 ————- 去掉文件夹中相邻的重复项</li><li>sort 文件夹 ————– 排序</li><li>diff —————比较文件夹的区别</li></ul><h3 id="重启、关机"><a href="#重启、关机" class="headerlink" title="重启、关机"></a>重启、关机</h3><ul><li>重启和关机 - reboot / init 6 / shutdown / init 0</li><li>shutdown ——- 关机</li><li>shutdown -c（cancle） ————– 取消关机</li><li>init 0(关机)/6(重启)</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> order </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>总结-意外的操作</title>
      <link href="/2018/09/16/Linux/%E6%84%8F%E5%A4%96%E7%9A%84%E6%93%8D%E4%BD%9C/"/>
      <url>/2018/09/16/Linux/%E6%84%8F%E5%A4%96%E7%9A%84%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h3 id="hexo中，将图片上传到hexo中"><a href="#hexo中，将图片上传到hexo中" class="headerlink" title="hexo中，将图片上传到hexo中"></a>hexo中，将图片上传到hexo中</h3><h5 id="First"><a href="#First" class="headerlink" title="First"></a>First</h5><ul><li><ol><li>把主页配置文件_config.yml里的post_asset_folder:这个选项设置为true</li></ol></li><li><ol start="2"><li>在你的hexo目录下执行这样一句话npm install hexo-asset-image –save，这是下载安装一个可以上传本地图片的插件，来自dalao：dalao的git</li></ol></li><li><ol start="3"><li>等待一小段时间后，再运行hexo n “xxxx”来生成md博文时，<code>/source/_posts</code>文件夹内除了xxxx.md文件还有一个同名的文件夹</li></ol></li></ul><h5 id="Second"><a href="#Second" class="headerlink" title="Second"></a>Second</h5><ul><li><ol start="4"><li>最后在xxxx.md中想引入图片时，先把图片复制到xxxx这个文件夹中，然后只需要在xxxx.md中按照markdown的格式引入图片：<br><code>![你想输入的替代文字](xxxx/图片名.jpg)</code></li></ol></li></ul><p>注意： xxxx是这个md文件的名字，也是同名文件夹的名字。只需要有文件夹名字即可，不需要有什么绝对路径。你想引入的图片就只需要放入xxxx这个文件夹内就好了，很像引用相对路径。</p><ul><li><ol start="5"><li>最后检查一下，hexo g 生成页面后，进入public\2017\02\26\index.html文件中查看相关字段，可以发现，html标签内的语句是<code>&lt;img src=&quot;2017/02/26/xxxx/图片名.jpg&quot;&gt;</code>，而不是<code>&lt;img src=&quot;xxxx/图片名.jpg&gt;</code>这很重要，关乎你的网页是否可以真正加载你想插入的图片。</li></ol></li></ul><h3 id="GitHub中上传的图片"><a href="#GitHub中上传的图片" class="headerlink" title="GitHub中上传的图片"></a>GitHub中上传的图片</h3><ul><li>1.在git的文件夹中创建一个img的文件夹，用来存储图片</li><li>2.然后上传到github中，每一张图片都有自己对应的url路由</li><li>3.在写MarkDown的时候，需要插入图片，<strong><code>![你想输入的替代文字](url)</code></strong>保存后，在github上就可以看到了</li></ul><h3 id="Gitee中的图片"><a href="#Gitee中的图片" class="headerlink" title="Gitee中的图片"></a>Gitee中的图片</h3><ul><li>1.gitee上有一个在线编辑的工具，进入你的MarkDown文件中，在右上角有一个编辑的按钮</li><li>2.进入编辑，就有插入图片的标识，然后可以选择插入图片的地址（网上图片直接插入，点击那个地址框前面的图片标识，进入本地文件，然后选择本地图片）</li><li>3.插入完成后，在末尾有一个保存更新，就成功插入图片了</li></ul><h4 id="在git中，将本地的文件上传到GitHub库中"><a href="#在git中，将本地的文件上传到GitHub库中" class="headerlink" title="在git中，将本地的文件上传到GitHub库中"></a>在git中，将本地的文件上传到GitHub库中</h4><ul><li>先添加一个本地文件 <code>git add 文件名</code></li><li>再上传到库中 <code>git commit -m &quot;上传说明&quot;</code></li><li>最后同步GitHub上 <code>git push</code></li></ul><h3 id="博客连接GItHub的二级域名的方法："><a href="#博客连接GItHub的二级域名的方法：" class="headerlink" title="博客连接GItHub的二级域名的方法："></a>博客连接GItHub的二级域名的方法：</h3><p><a href="https://blog.csdn.net/lmj623565791/article/details/51319147" target="_blank" rel="noopener">https://blog.csdn.net/lmj623565791/article/details/51319147</a></p><h3 id="修改服务器的登录提示语"><a href="#修改服务器的登录提示语" class="headerlink" title="修改服务器的登录提示语"></a>修改服务器的登录提示语</h3><p>修改文件夹      / etc / profile</p><h3 id="从Linux上传文件到阿里云服务器"><a href="#从Linux上传文件到阿里云服务器" class="headerlink" title="从Linux上传文件到阿里云服务器"></a>从Linux上传文件到阿里云服务器</h3><h6 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h6><p><strong>Nginx</strong>:是一款轻量级的Web 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器</p><p>1.安装Nginx：<br><code>yum -y install nginx</code> </p><p>2.启动Nginx：<br><code>systemctl start nginx / service nginx start(centos6)</code></p><p>（可以通过IP访问，打开防火墙）<br>IP地址可以确定网络上的一台主机，端口号可以用来区分不同的服务（http - 80）</p><ul><li>/usr/share/nginx/html ———- 服务器内容的存放位置，上传文件(put),下载文件(get)，首页文件index.html,在index.html文件中添加a标签的超链接</li><li>/etc/nginx/nginx.conf ———- 服务器配置内容文件</li></ul><p>sftp root@Ip</p><h5 id="sftp常用命令"><a href="#sftp常用命令" class="headerlink" title="sftp常用命令"></a>sftp常用命令</h5><ul><li>quit / exit / bye — 退出sftp</li><li>cd / lcd —– 切换远端工作目录/切换本地工作目录</li><li>pwd / lpwd —- 查看远端工作目录/查看本地工作目录</li><li>ls / lls —- 查看远端目录内容/查看本地目录内容</li><li>mkdir / lmkdir —- 创建远端目录/创建本地目录</li></ul><p><strong>苹果系统</strong></p><ul><li>进到相应的文件夹</li></ul><p><img src="/2018/09/16/Linux/意外的操作/put.jpg" alt="put"></p><ul><li>上传文件</li></ul><p><img src="/2018/09/16/Linux/意外的操作/1.jpg" alt="1"></p><p><strong>window系统</strong></p><p>通过Xftp软件，上传文件</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo上传图片 </tag>
            
            <tag> github上传图片 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pymysql</title>
      <link href="/2018/08/22/%E6%95%B0%E6%8D%AE%E5%BA%93/pymysql/"/>
      <url>/2018/08/22/%E6%95%B0%E6%8D%AE%E5%BA%93/pymysql/</url>
      
        <content type="html"><![CDATA[<h3 id="learn"><a href="#learn" class="headerlink" title="learn"></a>learn</h3><p>insert/update/delete</p><pre><code class="python">import pymysqldef main():    no = int(input(&#39;部门编号：&#39;))    name = input(&#39;部门名称：&#39;)    loc = input(&#39;部门所在地：&#39;)    # 创建连接(主机、端口、用户、密码、数据库名)    con = pymysql.connect(host=&#39;localhost&#39;, port=3306,                          user=&#39;root&#39;, password=&#39;123456&#39;,                          database=&#39;hrs&#39;, charset=&#39;utf8&#39;, autocommit=True)    try:        # 通过连接对象的cursor方法获取游标        &#39;&#39;&#39;        # 添加操作        with con.cursor() as cursor:            # 通过游标对象的execute方法向数据库服务器发出SQL            # executemany方法可以一次性执行多个SQL操作，相当于是以批处理的方式执行SQL，效率高            result = cursor.execute(                &#39;insert into tbdept values (%s, %s, %s)&#39;,                (no, name, loc)            )            # 处理服务器返回的信息            if result == 1:                print(&#39;添加成功&#39;)                # con.commit()        # 更新操作        with con.cursor() as cursor:            result1 = cursor.execute(                &#39;update tbdept set dname=%s,dloc=%s where dno=%s&#39;,                (name, loc, no)            )            if result1 == 1:                print(&#39;更新成功&#39;)        &#39;&#39;&#39;        # 删除操作        with con.cursor() as cursor:            result1 = cursor.execute(                &#39;delete from tbdept where dno=%s&#39;,                (no,)            )            if result1 == 1:                print(&#39;删除成功&#39;)    except pymysql.MySQLError as e:        print(e)        # con.rollback()    finally:        # 关闭连接，释放资源        con.close()if __name__ == &#39;__main__&#39;:    main()</code></pre><p>select</p><pre><code class="python">import pymysqlclass Dept(object):    def __init__(self, no, name, loc):        self.no = no        self.name = name        self.loc = loc    def __str__(self):        return f&#39;{self.no}\t{self.name}\t{self.loc}&#39;def main():    con = pymysql.connect(host=&#39;localhost&#39;,                          port=3306,                          user=&#39;root&#39;,                          password=&#39;123456&#39;,                          database=&#39;hrs&#39;,                          charset=&#39;utf8&#39;,                          cursorclass=pymysql.cursors.DictCursor)    try:        with con.cursor() as cursor:            # cursor.execute(&#39;select * from tbdept&#39;)            # depts = cursor.fetchall()            # for dept in depts:            #     print(f&#39;{dept[0]} | {dept[1]} | {dept[2]}&#39;)            #     print(&#39;-&#39; * 18)            cursor.execute(&#39;select dno no, dname name, dloc loc from tbdept&#39;)            depts = cursor.fetchall()            for dept_dict in depts:                # print(dept[&#39;no&#39;], dept[&#39;name&#39;], dept[&#39;loc&#39;])                dept = Dept(**dept_dict)                print(dept)    except pymysql.MySQLError as e:        print(e)    finally:        con.close()if __name__ == &#39;__main__&#39;:    main()</code></pre>]]></content>
      
      
      <categories>
          
          <category> databases </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>redis_order</title>
      <link href="/2018/08/18/%E6%95%B0%E6%8D%AE%E5%BA%93/redis-order/"/>
      <url>/2018/08/18/%E6%95%B0%E6%8D%AE%E5%BA%93/redis-order/</url>
      
        <content type="html"><![CDATA[<h2 id="redis-命令"><a href="#redis-命令" class="headerlink" title="redis 命令"></a>redis 命令</h2><ul><li>Redis：REmote Dictionary Server</li><li>Server(Redis)远程字典服务器，为网站提供高速缓存服务</li></ul><h4 id="网站优化两大定律"><a href="#网站优化两大定律" class="headerlink" title="网站优化两大定律"></a>网站优化两大定律</h4><p>1.缓存 —– 用空间换时间（redis/Memcached）</p><p>2.削峰 —— 能推迟的事情都不要马上做(RabbitMQ/ RocketMQ)</p><h4 id="信息隐藏"><a href="#信息隐藏" class="headerlink" title="信息隐藏:"></a>信息隐藏:</h4><p>&emsp;&emsp;信息隐藏是指在设计和确定模块时，使得一个模块内包含的特定信息（过程或数据），对于不需要这些信息的其他模块来说，是不可访问的</p><h5 id="启动Redis服务器步骤-谨慎"><a href="#启动Redis服务器步骤-谨慎" class="headerlink" title="启动Redis服务器步骤(谨慎):"></a>启动Redis服务器步骤(谨慎):</h5><pre><code class="mysql">1.修改Redis配置文件redis.conf(安装文件目录下)    cp redis-4.0.11/redis.conf redis.conf    # redis-server --post -- requirepass   ----- 也可以修改配置    vim redis.conf    bind 内网地址    requirepass 密码    appendonly yes2.启动服务器    redis-server redis.conf(配置文件) &gt; redis.log &amp;3.启动客户端    redis-cli -h ip地址(私用ip地址)4.验证身份    auth 密码5.停止服务器   1.kill 进程号   2.把进程放到前台，Ctrl c   3.客户端&gt;shutdown6.测试连接输入ping 回应PONG表示连接成功</code></pre><h5 id="操作命令-——-http-redisdoc-com"><a href="#操作命令-——-http-redisdoc-com" class="headerlink" title="操作命令  ——- http://redisdoc.com/"></a>操作命令  ——- <a href="http://redisdoc.com/" target="_blank" rel="noopener">http://redisdoc.com/</a></h5><pre><code class="mysql">操作:    keys *  查看所有键    select 1切换到1号数据库    select 15切换到15号数据库    flushall 删掉所有数据库的所有数据    flushdb 删掉当前一个数据库的数据删掉    save 保存数据    bgsave 后台保存    set key value ex 存活时间 ：设置键值对并设置存活时间    ttl key:查看数据的存活时间（ttl time to live),如果看到-1说明这个数据永不超时，如果-2说明没这个数据    expire key 时间: 设置已有键的存活时间    ince key:增加值    decr key:减少值基准测试：    redis-benchmark -h ip -a 密码    测试redis性能    LBS：Location-Base Service字符串:    setnx:如果不存在才赋值    setex:在设置键值对的时候同时设置存活时间    mset:一次放很多键值对    mget:一次获取多个键值对哈希表(hash)    hset:设置hash类型    hget:获取值 hget key filed    hgetall:获取对应key的所有值（hgetall key）    hmget:一次性获取多个值    hmset:一次性赋值多个        hmset stu1 id 101 name baiyuan age 12 gender male    hdel:删除哈希数据        hdel stu1 age    hexists:判断对应键是否存在某字典        hexists stu1 mile    hlen:统计键有多少字段    hkey:取出对应键的所有字段    hvals:取出对应键的所有值    hscan:遍历键值对列表:(List)    lpush:向列表放原始(从左边开始放)        lpush list1 1 2 3 4 5    lpop:从左边开始取    rpop:从右边开始取    rpush:(从右边开始放)    lrange:指定范围取元素()        lrange list1 start end        lrange list1 0 -1    lset:修改列表指定下标的值        lset list 1 1000    blpop:如果列表没东西，且时间未超时就阻塞，有东西拿走，超时就结束（从左边取）        blpop list1 20    brpop：如果列表没东西，且时间未超时就阻塞，有东西拿走，超时就结束（从右边取）    brpoplpush:从右边取一个元素，并把这个元素放到另一个列表的左边（阻塞式）集合(Set):    sadd:向集合添加元素        sadd set1 10 20 10 20 30    smebers:查看集合中的元素            smerbers set1    sinter:交集        sinter 集合1 集合2    sunion:并集        sunion 集合1 集合2    sdiff:差集        sdiff 集合1 集合2    sismenber:判断元素在不在集合中        sismenber 集合 元素    spop:从集合中取出一个元素    srandmenber:从集合中随机返回一个元素（实际没有拿走）    srem:移除集合中的一个或者多个元素，如果不存在就忽略浮点数表示法的问题    有序集合（SortedSet）    zadd:添加有序集合        zadd 集合名 值 元素    zrange:查看元素        zrange zs1 0 -1        zrange zs1 0 -1 withscores 显示元素的时候把分数值也显示出来    zrangebyscore:指定搜索范围来搜索数据        zrangebyscore zs1 10 20    zrank:查看元素的排名        zrank zs1 apple    zreverange:从大到小排序查询        zreverange zs1type(值)：查看对应值的类型事务:mult开始事务exec:执行discard：放弃执行服务器:bgsave：后台保存dbsize: 查看数据库有多少键slaveof:把redis设置成那个的奴隶（主从复制，读写分离）shutdown：关闭服务器info:查看服务器相关信息redis-check-aof -fix appendonly.aof    修复aof的文件</code></pre><ul><li>type —– 查看键的类型</li><li>setnx —– 设置已存在键的值</li><li>sentex —- 设置键值对的同时设置时间</li></ul><h4 id="Hash-——-保存对象"><a href="#Hash-——-保存对象" class="headerlink" title="Hash ——- 保存对象"></a>Hash ——- 保存对象</h4><ul><li>hset —– 创建key</li><li>hget —– 取出key</li><li>hgetall —- 取出key的全部属性</li><li>hmset ——- 创建key并设置多个属性</li><li>hmget ——- 取出key的多个属性</li><li>hdel —– 删除key的一个或多个属性</li><li>hexists —– 查看key是否存在</li><li>hlen —– 统计key对应多少个字段</li><li>hkeys ——- 返回key中的所有的域</li><li>hscan ——- 遍历key及域（遍历字典的键和值）</li></ul><h4 id="List"><a href="#List" class="headerlink" title="List"></a>List</h4><p><strong><code>lset list1 0 name</code></strong></p><ul><li>lset —— 给列表1中的下标为0的元素赋值为name</li><li>lpop —— 取出列表的头元素（左边第一个）元素</li><li>rpop —— 取出列表的尾元素（右边第一个）元素</li><li>lpush —— 在表头插入一个或多个值</li><li>rpush —— 在表尾插入一个或多个值</li><li>lrange —— 取出指定的元素</li><li>lset —— 修改原有列表的特定元素值</li><li>blpop —— 阻塞式从左边取出元素（有元素，不阻塞，没有元素，等待输入元素，然后取出）</li><li>blpop —— 阻塞式从右边取出元素（有元素，不阻塞，没有元素，等待输入元素，然后取出）</li><li>rpoplpush A B —— 从A中取出，从B中左边存入</li></ul><h4 id="Set（集合）"><a href="#Set（集合）" class="headerlink" title="Set（集合）"></a>Set（集合）</h4><ul><li>sadd —– 添加一个或多个元素</li><li>srem —– 删除一个或多个指定的元素</li><li>scard —— 查看集合中有多少个元素</li><li>smembers —– 查看集合的元素</li><li>sinter —— 查看两个集合的交集</li><li>sunion —– 查看两个集合的并集</li><li>sdiff —— 查看两个集合的差集</li><li>sismember —— 查看一个集合中是否存在一个给定的元素</li><li>spop —– 取出一个随机元素（不同）</li><li>srandmember —— 取出一个随机元素（可能相同）</li></ul><h4 id="Sortedset（有序集合）"><a href="#Sortedset（有序集合）" class="headerlink" title="Sortedset（有序集合）"></a>Sortedset（有序集合）</h4><ul><li>zadd —– 添加元素</li><li>zrange —– 查看元素（排好序的）</li><li>zrangebyscore —- 指定范围查看</li><li>zrank —– 排名（从0开始排的）</li><li>zrem —– 删除</li><li>zrevrange —— 倒序排列</li></ul><h3 id="复制："><a href="#复制：" class="headerlink" title="复制："></a>复制：</h3><h5 id="主从复制（读写分离）修改内容："><a href="#主从复制（读写分离）修改内容：" class="headerlink" title="主从复制（读写分离）修改内容："></a>主从复制（读写分离）修改内容：</h5><ul><li>master不用修改配置</li><li>slave修改两条配置<ul><li>slaveof master的IP地址 master的端口</li><li>masterrauth master的口令</li></ul></li><li>info replication ——- 查看是否有奴隶</li><li>info ——- 查看服务器信息 </li><li>ps -ef | grep deris | grep -v grep | awk ‘{print $2}’ | xargs kill ——- 杀掉所有的奴隶</li><li>slaveof no one ——— 拒绝当奴隶</li></ul><h6 id="故障处理"><a href="#故障处理" class="headerlink" title="故障处理"></a>故障处理</h6><p>配置哨兵（sentinel.conf）</p><ul><li>修改sentinel.conf配置文件<ul><li>修改69行的监视窗口 跟上票数</li><li>98行master的死亡时间设置<ul><li>在规定的时间回来了，还是master，没回来就重选</li></ul></li><li>131行的意思：master在3分钟内回来，也只能当奴隶，没回来，就直接杀死</li></ul></li><li>redis-server sentinel.conf –sentinel ——– 启动哨兵文件</li></ul><h3 id="MySQL-MongoDB"><a href="#MySQL-MongoDB" class="headerlink" title="MySQL / MongoDB"></a>MySQL / MongoDB</h3><ul><li><p>热（点）数据 —- 经常被访问的数据</p></li><li><p>redis放的应该是体量不大的热点数据</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> databases </category>
          
      </categories>
      
      
        <tags>
            
            <tag> order </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库</title>
      <link href="/2018/08/15/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2018/08/15/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>​        数据库（Database）是按照数据结构来组织、存储和管理数据的仓库，</p><p>每个数据库都有一个或多个不同的API用于创建，访问，管理，搜索和复制所保存的数据。</p><p>—– 从删库，到跑路额！</p><ul><li>数据库 —– database - 数据的仓库（集散地）<ul><li>通过数据库可以实现数据的持久化</li><li>数据持久化：文件操作（读写文件）-文本文件 / Excel</li><li>使用数据库的原因：当我们做数据持久化操作时不仅仅是希望能够把数据长久的保存下来，更为重要的是我们很方便的管理数据，在需要数据的时候能够很方便的把需要的数据取出来</li></ul></li><li>1907s IBM - 关系型数据库<ul><li>理论基础：关系代数和集合论</li><li>具体表象：用二维表（行，列）来组织数据<ul><li>行：记录（1212 电脑城 男） - 实体的具体记录</li><li>列：字段（学号，姓名，性别） - 实体的属性</li></ul></li><li>关系型数据库自己的编程语言 - SQL（结构化查询语言）</li><li>DDL（数据定义语言）：create / drop / alter(修改）</li><li>DML（数据操作语言）: insert / delete /update / select</li><li>DCL（数据控制语言）: grant(授权）/ revoke(撤销）</li><li>关系型数据库产品：<ul><li>Oracle - Oracle 12c</li><li>MySQL -Oracle</li><li>SQLServer</li><li>PostgreSQl</li><li>DB2<h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4></li></ul></li></ul></li><li>SQL （Structred Query Language)</li><li>DDL（数据定义语言）：create / drop / alter(修改）</li><li>DML（数据操作语言）: insert / delete /update / select</li><li>DCL（数据控制语言）: grant(授权）/ revoke(撤销)</li><li>DDL(Data Default Language)</li></ul><h2 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h2><h3 id="创建数据库-1"><a href="#创建数据库-1" class="headerlink" title="创建数据库"></a>创建数据库</h3><p><code>create database school default charset utf8;</code></p><h4 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h4><p><code>drop database if exists school;</code></p><h4 id="切换到数据库school"><a href="#切换到数据库school" class="headerlink" title="切换到数据库school"></a>切换到数据库school</h4><p><code>use school;</code></p><h4 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h4><p><code>drop table if exists tb_student;</code></p><h4 id="创建二维表保存数据"><a href="#创建二维表保存数据" class="headerlink" title="创建二维表保存数据"></a>创建二维表保存数据</h4><ul><li>列名 数据类型 约束条件</li><li>非空约束 —- not null</li><li>默认值约束 —– default</li><li>主键 ——- 表中能够唯一标识一条记录的列</li><li>主键约束 —— primary key<pre><code class="mysql">create table tb_student(stuid int not null,stuname varchar(4) not null,gender bit default 1,brith date,addr varchar(50),primary key (stuid));</code></pre></li><li>修改表<pre><code class="mysql">alter table tb_student add column tel char(11) not null;alter table tb_student drop column brith;alter table tb_student add score int not null;</code></pre></li><li>插入数据<br>– DMl (Data Manipulation Language)<pre><code class="mysql">insert into tb_student values (1001, &#39;天明&#39;, 0, &#39;四川&#39;, &#39;17640141329&#39;, 90);insert into tb_student values (1002, &#39;王大锤&#39;, 1, &#39;四川&#39;, &#39;17640141329&#39;,80);insert into tb_student (stuid, tel, stuname, score, addr) values(1003, &#39;17640141329&#39;, &#39;盖聂&#39;, 100, &#39;四川成都&#39;);insert into tb_student (stuid, tel, stuname, score) values(1004, &#39;17640141329&#39;, &#39;张三&#39;, 60),(1005, &#39;17640141329&#39;, &#39;豆丁&#39;, 85),(1006, &#39;17640141329&#39;, &#39;小明&#39;, 55);</code></pre></li><li>删除数据<pre><code class="mysql">delete from tb_student where stuid=1006;delete from tb_student where stuname=&#39;天明&#39;;delete from tb_student where stuid in (1004, 1006, 2000);</code></pre></li><li>截断数据（删除全表）<br><code>truncate table tb_student;</code></li><li>更新数据<pre><code class="mysql">update tb_student set addr=&#39;四川绵阳&#39;, gender=0 where stuid in (1003, 1004);</code></pre></li><li>查询数据<pre><code class="mysql">select * from tb_student;-- 投影select stuname, gender from tb_student;-- 别名（alias --- as）select stuname as 姓名,gender 性别 from tb_student;select stuname as 姓名,if(gender, &#39;男&#39;, &#39;女&#39;) as 性别 from tb_student;select stuname as 姓名,case gender when 1 then &#39;男&#39; else &#39;女&#39; end as 性别 from tb_student;</code></pre></li><li>对列做运算<br>select concat(stuname, ‘: ‘, tel) as 信息 from tb_student;</li><li>筛选<br>select * from tb_student where stuid=1001;</li><li>不等号用&lt;&gt;表示<br><code>`</code>mysql<br>select <em> from tb_student where stuid&lt;&gt;1001;<br>select </em> from tb_student where stuid in (1001, 1003, 1005);<br>select stuid, stuname, gender from tb_student where stuid&gt;1002;<br>select stuid, stuname, gender from tb_student where stuid&lt;=1002;<br>select stuid, stuname, gender from tb_student where gender=0;<br>select <em> from tb_student where stuid between 1002 and 1004;<br>select </em> from tb_student where stuid&gt;1004 and gender=0;<br>select * from tb_student where stuid&gt;1004 or gender=0;</li><li>注意：判断一个字段是否为null不能用=和&lt;&gt;<br>select <em> from tb_student where addr is null;<br>select </em> from tb_student where addr is not null;<br><code>`</code></li><li>%是一个通配符表示零个或任意多个字符<pre><code class="mysql">select * from tb_student where stuname like &#39;张%&#39;;select * from tb_student where stuname like &#39;%三%&#39;;</code></pre></li><li>_也是一个通配符，它表示一个字符<pre><code class="mysql">select * from tb_student where stuname like &#39;张_&#39;;select * from tb_student where stuname like &#39;张__&#39;;</code></pre></li><li>排序——order by </li><li>默认升序（ascending）可以不写，降序descending必须写<pre><code class="mysql">select * from tb_student order by stuid desc;select * from tb_student order by tel asc;select * from tb_student order by gender asc, stuid desc;select * from tb_student where gender=0 order by stuid desc;</code></pre></li><li>分页（限制）<pre><code class="mysql">select * from tb_student limit 3;select * from tb_student limit 3 offset 3;</code></pre></li><li><p>跳过6条信息，查3条信息<br><code>select * from tb_student limit 3 offset 6;</code></p></li><li><p>跳过2条信息，查4条信息</p><pre><code class="mysql">select * from tb_student limit 2,4;select * from tb_student where gender=1 order by stuid desc limit 0, 3;</code></pre></li></ul><h2 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h2><ul><li><p>创建hellokitty用户并设置口令</p><pre><code class="mysql">create user &#39;hellokitty&#39;@&#39;%&#39;identified by &#39;123123&#39;;</code></pre></li><li><p>给hellokitty授权</p><pre><code class="mysql">grant select on srs.* to &#39;hellokitty&#39;@&#39;%&#39;;grant insert, delete, update on srs.* to &#39;hellokitty&#39;@&#39;%&#39;;grant create, drop, alter on srs.* to &#39;hellokitty&#39;@&#39;%&#39;;</code></pre></li><li><p>获得srs的所有权限，但不能授权给别人</p><pre><code class="mysql">grant all privileges on srs.* to &#39;hellokitty&#39;@&#39;%&#39;;grant all privileges on *.* to &#39;hellokitty&#39;@&#39;%&#39;;</code></pre></li><li><p>将hellokitty自己得到的权限再授权给别人</p><pre><code class="mysql">grant all privileges on srs.* to &#39;hellokitty&#39;@&#39;%&#39; with grant option;</code></pre></li><li><p>召回权限</p><pre><code class="mysql">revoke all privileges on srs.* from &#39;hellokitty&#39;@&#39;%&#39;;</code></pre></li></ul><h5 id="事务控制"><a href="#事务控制" class="headerlink" title="事务控制"></a>事务控制</h5><ul><li><p>创建hellokitty用户并设置口令</p><pre><code class="mysql">create user &#39;hellokitty&#39;@&#39;%&#39;identified by &#39;123123&#39;;</code></pre></li><li><p>给hellokitty授权</p><pre><code class="mysql">grant select on srs.* to &#39;hellokitty&#39;@&#39;%&#39;;grant insert, delete, update on srs.* to &#39;hellokitty&#39;@&#39;%&#39;;grant create, drop, alter on srs.* to &#39;hellokitty&#39;@&#39;%&#39;;</code></pre></li><li><p>获得srs的所有权限，但不能授权给别人</p><pre><code class="mysql">grant all privileges on srs.* to &#39;hellokitty&#39;@&#39;%&#39;;grant all privileges on *.* to &#39;hellokitty&#39;@&#39;%&#39;;</code></pre></li><li><p>将hellokitty自己得到的权限再授权给别人</p><pre><code class="mysql">grant all privileges on srs.* to &#39;hellokitty&#39;@&#39;%&#39; with grant option;</code></pre></li><li><p>召回权限</p><pre><code class="mysql">revoke all privileges on srs.* from &#39;hellokitty&#39;@&#39;%&#39;;</code></pre></li></ul><h6 id="事务控制-1"><a href="#事务控制-1" class="headerlink" title="事务控制"></a>事务控制</h6><ul><li><p>开启事务环境</p><pre><code class="mysql">begin-- start transactionupdate tb_score set mark=mark-2 where sid=1001 and mark is not null;update tb_score set mark=mark+2 where sid=1002 and mark is not null;</code></pre></li><li><p>事务提交<br><code>commit；</code></p></li><li>事务回滚<br><code>rollback；</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> databases </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> 表格 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim</title>
      <link href="/2018/06/15/Linux/vim/"/>
      <url>/2018/06/15/Linux/vim/</url>
      
        <content type="html"><![CDATA[<h3 id="vimrc-——————-保存格式的文件"><a href="#vimrc-——————-保存格式的文件" class="headerlink" title="vimrc ——————- 保存格式的文件"></a>vimrc ——————- 保存格式的文件</h3><h2 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h2><ul><li>文件意外中断，r恢复，b删除</li><li>vim 文件1 文件2 ———– 同时打开多个文件</li><li>vim -d 文件1 文件2 ———— 比较文件1和文件2<h5 id="如果vim打开了多个文件，可以在末行模式中"><a href="#如果vim打开了多个文件，可以在末行模式中" class="headerlink" title="如果vim打开了多个文件，可以在末行模式中"></a>如果vim打开了多个文件，可以在末行模式中</h5></li><li>：ls ——— 查看多个文件的编号</li><li>：b 编号 ——— 跳转文件</li><li>：vs —————- 垂直拆分成两个窗口</li><li>：sp —————- 水平拆分成两个窗口</li><li>Ctrl + w Ctrl + w ————— 将光标移到另一个窗口</li><li>：qa —————– 关闭全部窗口</li></ul><h4 id="vim-文件名-————-进入Linux编辑框"><a href="#vim-文件名-————-进入Linux编辑框" class="headerlink" title="vim 文件名 ———— 进入Linux编辑框"></a>vim 文件名 ———— 进入Linux编辑框</h4><h5 id="刚进入是在命令模式下"><a href="#刚进入是在命令模式下" class="headerlink" title="刚进入是在命令模式下"></a>刚进入是在命令模式下</h5><ul><li>i / a ———- 进入编辑模式或者插入模式</li><li><p>（Esc ——— 退出编辑模式）</p></li><li><p>：/ ?/ /————– 进入末行编辑格式</p><ul><li>set nu / nonu ———— 打开/关闭行号</li><li>set autoindent ———— 保存缩进</li><li>syntax on / off ———- 打开/关闭高量语法</li><li>shift + zz ————– 保存</li><li>wq ————— 保存退出</li><li>q! —————- 强制退出，不保存</li><li>w! —————- 强制保存</li><li>map ———— 映射 快捷键</li><li>imap ————– 在插入模式下映射快捷键</li><li>inoremap ————– 在插入模式下不要递归的映射快捷键</li></ul></li></ul><h5 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h5><ul><li>/正则表达式</li><li>n ——— 正向搜索</li><li>N ——— 反向搜索</li><li>？正则表达式 ——– 反向搜索</li><li>：1,100s/查找内容（正则表达式）/替换内容<br>替换范围substitute/正则表达式/替换内容</li><li>：1,$s/查找内容（正则表达式）/替换内容/gice<ul><li>-g:全局模式</li><li>-i:忽略大小写</li><li>-c:确认模式</li><li>-e:忽略错误</li></ul></li></ul><h5 id="检查工具"><a href="#检查工具" class="headerlink" title="检查工具"></a>检查工具</h5><ul><li>pip3 install pycodestyle —– 初步的代码格式检查工具</li><li>pip3 install pylint ——- 高级代码格式检查</li></ul><h5 id="修改操作权限"><a href="#修改操作权限" class="headerlink" title="修改操作权限"></a>修改操作权限</h5><ul><li>ll ——– 查看模式</li><li>chmod ———— 修改读写模式 </li><li>chmod 数字 ———– 修改模式</li><li>chmod a+x ———— 所有用户都添加操作权限</li><li>chmod u+x g+x o+x ———- 添加执行操作</li><li>Ctrl x &amp; Ctrl o ———– 代码提示并补全</li></ul><h5 id="编辑器操作："><a href="#编辑器操作：" class="headerlink" title="编辑器操作："></a>编辑器操作：</h5><ul><li>在命令模式下：都可以配合数字使用<ul><li>光标移动<ul><li>H ———— 左</li><li>J ————- 下</li><li>K ————- 上</li><li>L ————- 右</li><li>HML ————第一行的第一列/页面中间行的第一列/页面最后一行的第一列</li><li>w ————– 移动一个单词</li><li>gg/1G ——— 到第一行</li><li>G ————- 到最后一行</li><li>$ ———– 行末</li><li>0 ———– 行首</li><li>dd ———– 删掉一行代码</li><li>dw ———- 删一个单词</li><li>Ctrl + e ————- 往下翻一行</li><li>Ctrl + y ————- 往上翻一行</li><li>Ctrl + f ————- 往上翻一页</li><li>Ctrl + b ————- 往下翻一页</li><li>数字 + yy ———- 复制多少行</li><li>p ———- 粘贴</li><li>u ————– 撤销</li><li>Ctrl + r ————- 反撤销</li></ul></li></ul></li></ul><h2 id="vim模式下的Python"><a href="#vim模式下的Python" class="headerlink" title="vim模式下的Python"></a>vim模式下的Python</h2><h4 id="三元运算："><a href="#三元运算：" class="headerlink" title="三元运算："></a>三元运算：</h4><ul><li>if成立取前面，不成立取后面</li></ul><p><code>y = year if month &gt;= 3 else year - 1</code></p><h4 id="占位"><a href="#占位" class="headerlink" title="占位"></a>占位</h4><ul><li>{} ————— 占位符，与%d的作用一样</li></ul><p><code>print(f&#39;{month_names[month]} {year}&#39;.center(20))</code></p><h4 id="字符居中"><a href="#字符居中" class="headerlink" title="字符居中"></a>字符居中</h4><p><code>print（f&#39;{}&#39;.center(num))</code></p><h4 id="取命令行参数："><a href="#取命令行参数：" class="headerlink" title="取命令行参数："></a>取命令行参数：</h4><p>从标准输入读取数据</p><pre><code>调用函数 import sys if len(sys.argv) == 3:     year = int(sys.argv[2])     month = int(sys.argv[1])</code></pre><h4 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h4><p>&emsp;&emsp;在某个时候必须给一个确定的结果，递归函数必须要有一个出口；然后必须要有一个递归公式，在函数中调用函数的部分</p><h4 id="动态规划：牺牲空间，减少时间"><a href="#动态规划：牺牲空间，减少时间" class="headerlink" title="动态规划：牺牲空间，减少时间"></a>动态规划：牺牲空间，减少时间</h4><p>优化重复计算的过程，用一个字典保存要重复计算的值，当需要时直接查找字典</p><pre><code>if num &lt;= 0:     return 1 if num == 0 else 0  try:     return temp[num]  except KeyError:     temp[num] = walk(num - 1) + walk(num - 2) + walk(num - 3)     return temp[num]</code></pre><h4 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h4><p>终极原则：高内聚 低耦合(一个函数或者一个类只做一个事情，一个函数或者一个类只表示自己，不与其他关联)【high cohesion low coupling】</p><h6 id="在Python中函数是一等公民"><a href="#在Python中函数是一等公民" class="headerlink" title="在Python中函数是一等公民"></a>在Python中函数是一等公民</h6><h6 id="函数可以赋值给变量，可以作为方法的参数和返回值"><a href="#函数可以赋值给变量，可以作为方法的参数和返回值" class="headerlink" title="函数可以赋值给变量，可以作为方法的参数和返回值"></a>函数可以赋值给变量，可以作为方法的参数和返回值</h6><pre><code>def calc(items, fn=lambda x, y: x - y):     result = items[0]    for index in range(1, len(items)):        result = fn(result,items[index])    return resultitems = [1, 2, 3, 4, 5]    print(calc(items, lambda x, y: x + y))    print(calc(items, lambda x, y: x * y))</code></pre><h4 id="类"><a href="#类" class="headerlink" title="类"></a>类</h4><p>面向对象的程序设计基本上就是三步走：</p><ol><li>定义类<br>-数据抽象：找属性（名词）<br>-行为抽象：找方法（动词）</li><li>创建对象</li><li>给对象发消息</li></ol><h4 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h4><pre><code>def foo(*args, **kwargs)*args ------- 可变参数（不知道有多少个参数，可以通过*号表示）**kwargs --------- 关键字参数（给了参数名的参数，会被打包成一个字典传入函数）默认参数 ----------- 不传入参数def foo1(a, *, b, c)*前面的参数是位置参数在传参的时候可以不用指定参数名*后面的参数是命名关键字参数在传参的时候必须指定参数名否则报错解包items = [1, 2, 3, 4, 5]start， *_ ， end = items（取列表的第一个数和最后一个数）</code></pre><h4 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h4><ul><li>a.装饰器函数：用一个函数装饰另一个函数，给它增加额外的功能</li><li>b.装饰器函数的参数是被装饰的函数，返回的是起装饰作用的函数</li><li>c.当调用被装饰的函数时，其实是执行装饰器中返回的那个函数</li><li>d.凡是需要这个额外功能的函数，只需要加上装饰器即可，而不需要书写重复的代码</li><li>e.给函数添加装饰器的语法就是在函数前写上  @装饰器函数</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VIM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux_vim</title>
      <link href="/2018/06/03/Linux/Linux-vim/"/>
      <url>/2018/06/03/Linux/Linux-vim/</url>
      
        <content type="html"><![CDATA[<h3 id="分鱼"><a href="#分鱼" class="headerlink" title="分鱼"></a>分鱼</h3><pre><code class="python">#!/usr/bin/python3&quot;&quot;&quot;穷举法:穷尽所有可能直到找到正确答案&quot;&quot;&quot;def main():   &quot;&quot;&quot;分鱼&quot;&quot;&quot;   fish = 1   while True:         enough = True         total = fish         for _ in range(5):             if (total - 1) % 5 == 0:                 total = (total - 1) // 5 *4             else:                 enough = False                 break         if enough:             print(fish)             break         fish += 1 if __name__ == &quot;__main__&quot;:     main()</code></pre><h3 id="穷举法"><a href="#穷举法" class="headerlink" title="穷举法"></a>穷举法</h3><pre><code class="python">#!/usr/bin/python3&quot;&quot;&quot;穷举法&quot;&quot;&quot;def main():   &quot;&quot;&quot;主函数&quot;&quot;&quot;   for cock in range(0, 21):       for hen in range(0, 34):           chick = 100 - cock - hen           if chick % 3 == 0 and cock * 5 + hen * 3 + chick // 3 == 100:                 print(f&quot;公鸡: {cock}只, 母鸡: {hen}只, 小鸡: {chick}只&quot;)if __name__ == &quot;__main__&quot;:    main()</code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim-practice </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>展示数据</title>
      <link href="/2018/05/27/spider/spider_databases/"/>
      <url>/2018/05/27/spider/spider_databases/</url>
      
        <content type="html"><![CDATA[<h3 id="创建一个有个youyaoqi项目"><a href="#创建一个有个youyaoqi项目" class="headerlink" title="创建一个有个youyaoqi项目"></a>创建一个有个youyaoqi项目</h3><ul><li>项目自带文件<ul><li>scrapy.cfg</li><li>youyaoqi<ul><li><strong> init</strong>.py</li><li>items.py</li><li>middlewares.py</li><li>pipelines.py</li><li>settings.py</li><li>spiders<ul><li><code>__ init __.py</code></li><li>cartoon.py</li></ul></li></ul></li></ul></li></ul><p><strong>items</strong></p><pre><code class="python"># -*- coding: utf-8 -*-# Define here the models for your scraped items## See documentation in:# https://doc.scrapy.org/en/latest/topics/items.htmlimport scrapyclass YouyaoqiItem(scrapy.Item):    # define the fields for your item here like:    comic_id = scrapy.Field()    name = scrapy.Field()    cover = scrapy.Field()    update_type = scrapy.Field()    line1 = scrapy.Field()    line2 = scrapy.Field()class U17DetailItem(scrapy.Item):    name = scrapy.Field()    # u_id = scrapy.Field()</code></pre><p><strong>pipelines.py</strong></p><pre><code class="python"># -*- coding: utf-8 -*-# Define your item pipelines here## Don&#39;t forget to add your pipeline to the ITEM_PIPELINES setting# See: https://doc.scrapy.org/en/latest/topics/item-pipeline.htmlimport pymysqlfrom scrapy import Requestfrom scrapy.exceptions import DropItemfrom scrapy.pipelines.images import ImagesPipelineclass ImagePipeline(ImagesPipeline):    def file_path(self, request, response=None, info=None):        url = request.url        file_name = url.split(&#39;/&#39;)[-1]        return file_name    def item_completed(self, results, item, info):        image_paths = [x[&#39;path&#39;] for ok, x in results if ok]        if not image_paths:            raise DropItem(&#39;Image Downloaded Failed&#39;)        return item    def get_media_requests(self, item, info):        yield Request(item[&#39;cover&#39;])class YouyaoqiMysqlPipeline(object):    def __init__(self, host, port, database, username, password):        self.host = host        self.port = port        self.database = database        self.username = username        self.password = password    @classmethod    def from_crawler(cls, crawler):        return cls(            host=crawler.settings.get(&#39;MYSQL_HOST&#39;),            port=crawler.settings.get(&#39;MYSQL_PORT&#39;),            database=crawler.settings.get(&#39;MYSQL_DATABASE&#39;),            username=crawler.settings.get(&#39;MYSQL_USERNAME&#39;),            password=crawler.settings.get(&#39;MYSQL_PASSWORD&#39;),        )    def open_spider(self, spider):        # 获取数据库连接        self.db = pymysql.connect(self.host, self.username, self.password, self.database, charset=&#39;utf8&#39;,                                  port=self.port)        self.cursor = self.db.cursor()    def close_spider(self, spider):        # 释放数据库连接        self.db.close()    def process_item(self, item, spider):        # 插入item数据        sql = &#39;insert into company (comic_id, name, cover, update_type, line1, line2) values (%s, %s, %s, %s, %s, %s)&#39;        self.cursor.execute(sql, (item[&#39;comic_id&#39;], item[&#39;name&#39;], item[&#39;cover&#39;], item[&#39;update_type&#39;], item[&#39;line1&#39;], item[&#39;line2&#39;]))        self.db.commit()        return item</code></pre><p><strong>settings.py</strong></p><pre><code class="python"># -*- coding: utf-8 -*-# Scrapy settings for youyaoqi project## For simplicity, this file contains only settings considered important or# commonly used. You can find more settings consulting the documentation:##     https://doc.scrapy.org/en/latest/topics/settings.html#     https://doc.scrapy.org/en/latest/topics/downloader-middleware.html#     https://doc.scrapy.org/en/latest/topics/spider-middleware.htmlBOT_NAME = &#39;youyaoqi&#39;SPIDER_MODULES = [&#39;youyaoqi.spiders&#39;]NEWSPIDER_MODULE = &#39;youyaoqi.spiders&#39;# Crawl responsibly by identifying yourself (and your website) on the user-agent#USER_AGENT = &#39;youyaoqi (+http://www.yourdomain.com)&#39;# Obey robots.txt rulesROBOTSTXT_OBEY = False# Configure maximum concurrent requests performed by Scrapy (default: 16)#CONCURRENT_REQUESTS = 32# Configure a delay for requests for the same website (default: 0)# See https://doc.scrapy.org/en/latest/topics/settings.html#download-delay# See also autothrottle settings and docs#DOWNLOAD_DELAY = 3# The download delay setting will honor only one of:#CONCURRENT_REQUESTS_PER_DOMAIN = 16#CONCURRENT_REQUESTS_PER_IP = 16# Disable cookies (enabled by default)#COOKIES_ENABLED = False# Disable Telnet Console (enabled by default)#TELNETCONSOLE_ENABLED = False# Override the default request headers:#DEFAULT_REQUEST_HEADERS = {#   &#39;Accept&#39;: &#39;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&#39;,#   &#39;Accept-Language&#39;: &#39;en&#39;,#}# Enable or disable spider middlewares# See https://doc.scrapy.org/en/latest/topics/spider-middleware.html#SPIDER_MIDDLEWARES = {#    &#39;youyaoqi.middlewares.YouyaoqiSpiderMiddleware&#39;: 543,#}# Enable or disable downloader middlewares# See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html#DOWNLOADER_MIDDLEWARES = {#    &#39;youyaoqi.middlewares.YouyaoqiDownloaderMiddleware&#39;: 543,#}# Enable or disable extensions# See https://doc.scrapy.org/en/latest/topics/extensions.html#EXTENSIONS = {#    &#39;scrapy.extensions.telnet.TelnetConsole&#39;: None,#}# Configure item pipelines# See https://doc.scrapy.org/en/latest/topics/item-pipeline.htmlITEM_PIPELINES = {   # &#39;youyaoqi.pipelines.YouyaoqiMysqlPipeline&#39;: 300,   # &#39;youyaoqi.pipelines.ImagePipeline&#39;: 300,}# Enable and configure the AutoThrottle extension (disabled by default)# See https://doc.scrapy.org/en/latest/topics/autothrottle.html#AUTOTHROTTLE_ENABLED = True# The initial download delay#AUTOTHROTTLE_START_DELAY = 5# The maximum download delay to be set in case of high latencies#AUTOTHROTTLE_MAX_DELAY = 60# The average number of requests Scrapy should be sending in parallel to# each remote server#AUTOTHROTTLE_TARGET_CONCURRENCY = 1.0# Enable showing throttling stats for every response received:#AUTOTHROTTLE_DEBUG = False# Enable and configure HTTP caching (disabled by default)# See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html#httpcache-middleware-settings#HTTPCACHE_ENABLED = True#HTTPCACHE_EXPIRATION_SECS = 0#HTTPCACHE_DIR = &#39;httpcache&#39;#HTTPCACHE_IGNORE_HTTP_CODES = []#HTTPCACHE_STORAGE = &#39;scrapy.extensions.httpcache.FilesystemCacheStorage&#39;FEED_EXPORT_ENCODING = &#39;utf-8&#39;MAX_PAGE = 500# IMAGES_STORE = &#39;./images&#39;# mysql settingsMYSQL_HOST = &#39;127.0.0.1&#39;MYSQL_PORT = 3306MYSQL_USERNAME = &#39;root&#39;MYSQL_PASSWORD = &#39;123456&#39;MYSQL_DATABASE = &#39;u17&#39;</code></pre><p><strong>cartoon.py</strong></p><pre><code class="python"># -*- coding: utf-8 -*-import jsonimport scrapyfrom youyaoqi.items import YouyaoqiItem, U17DetailItemclass CartoonSpider(scrapy.Spider):    name = &#39;cartoon&#39;    allowed_domains = [&#39;www.u17.com&#39;]    start_urls = [&#39;http://www.u17.com/&#39;]    def start_requests(self):        data = {&#39;data[group_id]&#39;: &#39;no&#39;, &#39;data[theme_id]&#39;: &#39;no&#39;, &#39;data[is_vip]&#39;: &#39;no&#39;, &#39;data[accredit]&#39;: &#39;no&#39;, &#39;data[color]&#39;: &#39;no&#39;, &#39;data[comic_type]&#39;: &#39;no&#39;, &#39;data[series_status]&#39;: &#39;no&#39;, &#39;data[order]&#39;: &#39;2&#39;, &#39;data[page_num]&#39;: &#39;1&#39;, &#39;data[read_mode]&#39;: &#39;no&#39; }        headers = {            &#39;Referer&#39;: &#39;http://www.u17.com/comic_list/th99_gr99_ca99_ss99_ob0_ac0_as0_wm0_co99_ct99_p1.html?order=2&#39;,            &#39;User-Agent&#39;: &#39;Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko&#39;,            &#39;Host&#39;: &#39;www.u17.com&#39;,            &#39;Accept&#39;: &#39;application/json, text/plain, */*&#39;,            &#39;Accept-Encoding&#39;: &#39;gzip, deflate, sdch&#39;,            &#39;Accept-Language&#39;: &#39;zh-CN,zh;q=0.8,en;q=0.6,ja;q=0.4,zh-TW;q=0.2,mt;q=0.2&#39;,            &#39;Connection&#39;: &#39;keep-alive&#39;,            &#39;X-Requested-With&#39;: &#39;XMLHttpRequest&#39;,        }        max_page = self.settings.get(&#39;MAX_PAGE&#39;)        base_url = &#39;http://www.u17.com/comic/ajax.php?mod=comic_list&amp;act=comic_list_new_fun&amp;a=get_comic_list&#39;        for page in range(2, max_page):            data[&#39;data[page_num]&#39;] = str(page)            yield scrapy.FormRequest(url=base_url, headers=headers, method=&#39;POST&#39;, formdata=data, callback=self.parse)    def get_headers(self):        headers = {            &#39;User-Agent&#39;: &#39;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; 360SE)&#39;,            &#39;Host&#39;: &#39;www.u17.com&#39;,            &#39;Accept&#39;: &#39;application/json, text/plain, */*&#39;,            &#39;Accept-Encoding&#39;: &#39;gzip, deflate, sdch&#39;,            &#39;Accept-Language&#39;: &#39;zh-CN,zh;q=0.8,en;q=0.6,ja;q=0.4,zh-TW;q=0.2,mt;q=0.2&#39;,            &#39;Connection&#39;: &#39;keep-alive&#39;,            &#39;X-Requested-With&#39;: &#39;XMLHttpRequest&#39;,            &#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded; charset=UTF-8&#39;,        }        return headers    def parse(self, response):        result_json = json.loads(response.text)        data_list = result_json[&#39;comic_list&#39;]        for data in data_list:            item = YouyaoqiItem()            item[&#39;comic_id&#39;] = data[&#39;comic_id&#39;]            item[&#39;name&#39;] = data[&#39;name&#39;]            item[&#39;cover&#39;] = data[&#39;cover&#39;]            item[&#39;update_type&#39;] = data[&#39;update_type&#39;]            item[&#39;line1&#39;] = data[&#39;line1&#39;]            item[&#39;line2&#39;] = data[&#39;line2&#39;]            yield item            detail_url = &#39;http://www.u17.com/comic/%s.html&#39; % item[&#39;comic_id&#39;]            yield scrapy.Request(url=detail_url, headers=self.get_headers(), callback=self.parse_detail)    def parse_detail(self, response):        results = response.css(&#39;#chapter li&#39;)        for item in results:            detail_item = U17DetailItem()            name_list = item.xpath(&#39;./a/text()&#39;).extract()            for name in name_list:                detail_item[&#39;name&#39;] = name.replace(&#39;&quot;&#39;, &#39;&#39;).strip()            # detail_item[&#39;u_id&#39;] = title.replace            # detail_item[&#39;name&#39;] = item.replace(&#39;&quot;&#39;, &#39;&#39;).strip()                yield detail_item            # a_url_list = item.css(&#39;./a::attr(href)&#39;).extract()            # for a_url in a_url_list:            #     detail_item[&#39;url&#39;] = a_url            #     yield detail_item</code></pre>]]></content>
      
      
      <categories>
          
          <category> spider </category>
          
      </categories>
      
      
        <tags>
            
            <tag> databases </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BeautifulSoup相关</title>
      <link href="/2018/05/24/spider/BeautifulSoup/"/>
      <url>/2018/05/24/spider/BeautifulSoup/</url>
      
        <content type="html"><![CDATA[<pre><code class="python">#获取直接子节点：contents、children#获取父节点：parent#获取兄弟节点：next_siblings、next_sibling、previous_siblings、previous_sibling&#39;&#39;&#39;&lt;html&gt;    &lt;head&gt;        &lt;title&gt;The Dormouse&#39;s story&lt;/title&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;p class=&quot;story&quot;&gt;            Once upon a time there were three little sisters; and their names were            &lt;a href=&quot;http://example.com/elsie&quot; class=&quot;sister&quot; id=&quot;link1&quot;&gt;                &lt;span&gt;Elsie&lt;/span&gt;            &lt;/a&gt;            &lt;a href=&quot;http://example.com/lacie&quot; class=&quot;sister&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;            and            &lt;a href=&quot;http://example.com/tillie&quot; class=&quot;sister&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;            and they lived at the bottom of a well.        &lt;/p&gt;        &lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;                                                                           &#39;&#39;&#39;from bs4 import BeautifulSoupsoup=BeautifulSoup(html,&#39;html.parser&#39;)# contents:获取直接子节点，返回list类型print(soup.p.contents)# children,返回的是可以迭代的，直接打印输出Nonefor i in soup.p.children:    print(i)print(soup.p.childrensoup)#获取 父节点print(soup.a.parent)# 获取兄弟节点for i in soup.a.next_siblings:#获取a标签后面的所有兄弟节点    print(i)</code></pre><pre><code class="python">html = &#39;&#39;&#39;&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse&#39;s story&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;p class=&quot;title&quot;&gt;&lt;b&gt;The Dormouse&#39;s story&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;story&quot;&gt;Once upon a time there were three little sisters; and their names were&lt;a href=&quot;http://example.com/elsie&quot; class=&quot;sister&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;,&lt;a href=&quot;http://example.com/lacie&quot; class=&quot;sister&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt; and&lt;a href=&quot;http://example.com/tillie&quot; class=&quot;sister&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;;and they lived at the bottom of a well.&lt;/p&gt;&lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;&#39;&#39;&#39;import lxmlfrom bs4 import BeautifulSoup#创建bs对象 bs是使用的python默认的解析器，lxml也是解析器soup = BeautifulSoup(html,&#39;lxml&#39;)#prettify实现格式化的输出print(soup.prettify())#通过soup标签名，获取这个标签的内容。注意：通过这种方式获取标签，如果文档中有多个这样的标签，返回的结果是第一个标签内容print(soup.a)print(soup.p)#获取名称nameprint(soup.title.name)print(soup.p.name)#获取属性print(soup.a[&#39;href&#39;])#获取文本内容-string、textprint(soup.a.string)print(soup.a.text)print(soup.title.string)print(soup.title.text)#嵌套选择,直接通过嵌套的方式获取print(soup.p.b.string)print(soup.head.title.text)</code></pre><h3 id="lxml解析器标准选择器、find-all的使用"><a href="#lxml解析器标准选择器、find-all的使用" class="headerlink" title="lxml解析器标准选择器、find_all的使用"></a>lxml解析器标准选择器、find_all的使用</h3><p>搜索文档树：</p><p>(1)find_all():可以根据标签名、属性、内容查找文档</p><p>(2)find():返回匹配结果的第一个元素</p><p>(3)find_parents() find_parent()</p><p>(4)find_next_siblings() find_next_sibling()</p><p>(5)find_previous_siblings() find_previous_sibling()</p><p>(6)find_all_next() find_next()</p><p>(7)find_all_previous() 和 find_previous()</p><pre><code class="python">&lt;div class=&quot;panel&quot;&gt;    &lt;div class=&quot;panel-heading&quot;&gt;        &lt;h4&gt;Hello&lt;/h4&gt;    &lt;/div&gt;    &lt;div class=&quot;panel-body&quot;&gt;        &lt;ul class=&quot;list&quot; id=&quot;list-1&quot;&gt;            &lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;            &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;            &lt;li class=&quot;element&quot;&gt;Jay&lt;/li&gt;        &lt;/ul&gt;        &lt;ul class=&quot;list list-small&quot; id=&quot;list-2&quot;&gt;            &lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;            &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;        &lt;/ul&gt;    &lt;/div&gt;&lt;/div&gt;from bs4 import BeautifulSoupsoup = BeautifulSoup(html, &#39;lxml&#39;)print(soup.find_all(&#39;ul&#39;))print(type(soup.find_all(&#39;ul&#39;)[0]))</code></pre><pre><code class="python">&lt;div class=&quot;panel&quot;&gt;    &lt;div class=&quot;panel-heading&quot;&gt;        &lt;h4&gt;Hello&lt;/h4&gt;    &lt;/div&gt;    &lt;div class=&quot;panel-body&quot;&gt;        &lt;ul class=&quot;list&quot; id=&quot;list-1&quot;&gt;            &lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;            &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;            &lt;li class=&quot;element&quot;&gt;Jay&lt;/li&gt;        &lt;/ul&gt;        &lt;ul class=&quot;panel-body&quot; id=&quot;list-2&quot;&gt;            &lt;li class=&quot;element&quot;&gt;年后中好说歹说开发，什么才能伤风胶囊&lt;/li&gt;            &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;        &lt;/ul&gt;         &lt;a href=&quot;link1.html&quot;&gt;first item&lt;/a&gt;         &lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;         &lt;li class=&quot;item-inactive&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;     &lt;/ul&gt;    &lt;/div&gt;&lt;/div&gt;from bs4 import BeautifulSoupsoup=BeautifulSoup(html,&quot;lxml&quot;)import re # 1、name参数# 查找所有名字为name的tag,搜索 name 参数的值可以使任一类型的 过滤器 ,字符窜,正则表达式,列表,方法或是 True print(soup.find_all(&#39;li&#39;))# 使用列表print(soup.find_all([&#39;li&#39;,&#39;a&#39;]))print(soup.find_all(True))print(soup.find_all(re.compile(&#39;h4&#39;)))# 2、keyword关键字参数# 关键字是指tag的属性：id、title、href等,注意：使用class时要加上&#39;_&#39;print(soup.find_all(&#39;a&#39;,href=&quot;link1.html&quot;))print(soup.find_all(id=&quot;list-1&quot;))print(soup.find_all(&#39;ul&#39;,class_=&quot;list&quot;))# 使用正则print(soup.find_all(href=re.compile(&#39;3.html&#39;)))# 3、text# 一般与name一起使用，通过 text 参数可以搜搜文档中的字符串内容.与 name 参数的可选值一样, text 参数接受 字符串 , 正则表达式 , 列表, True print(soup.find_all(text=re.compile(&#39;好&#39;)))print(soup.find_all(&#39;li&#39;,text=re.compile(&#39;好&#39;)))# 使用多个属性print(soup.find_all(class_=&quot;panel-body&quot;,id=&quot;list-2&quot;))# 3、string# 一般与name一起使用，通过 string 参数可以搜搜文档中的字符串内容.与 name 参数的可选值一样, string 参数接受 字符串 , 正则表达式 , 列表, True;print(soup.find_all(&quot;a&quot;, string=&quot;first item&quot;))print(soup.find_all(string=&quot;first item&quot;))# 4、limit参数# 这个参数其实就是控制我们获取数据的数量，效果和SQL语句中的limit一样；print(soup.find_all(&quot;a&quot;,limit=2))# 5、recursive参数# 调用tag的 find_all() 方法时,Beautiful Soup会检索当前tag的所有子孙节点,如果只想搜索tag的直接子节点,可以使用参数 recursive=False; </code></pre><h3 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h3><pre><code class="python"># select()直接传入CSS选择器完成选择# .表示class ，#表示id# 标签1，标签2# 标签1 标签2# [attr]可以通过这种方式找到具有某个属性值的所有标签# [attr=value]例子：[target=blank]&lt;div class=&quot;panel&quot;&gt;    &lt;div class=&quot;panel-heading&quot;&gt;        &lt;h4&gt;Hello&lt;/h4&gt;    &lt;/div&gt;    &lt;div class=&quot;panel-body&quot;&gt;        &lt;ul class=&quot;list&quot; id=&quot;list-1&quot;&gt;            &lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;            &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;            &lt;li class=&quot;element&quot;&gt;Jay&lt;/li&gt;        &lt;/ul&gt;        &lt;ul class=&quot;list list-small&quot; id=&quot;list-2&quot;&gt;            &lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;            &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;        &lt;/ul&gt;    &lt;/div&gt;&lt;/div&gt;from bs4 import BeautifulSoupsoup=BeautifulSoup(html,&quot;lxml&quot;)# 找到class属性是panel的标签内的class属性是panel-heading的标签内容print(soup.select(&quot;.panel .panel-heading&quot;))# 找id属性为list-1和id属性为list-2的所有标签print(soup.select(&#39;#list-1,#list-2&#39;))# 找到ul标签下的li标签print(soup.select(&#39;ul li&#39;))# 找到id属性值为list-2内部class属性是element的所有标签print(soup.select(&#39;#list-2 .element&#39;))# get_text()：拿到标签文本值# 所有li标签下的文本值for i in soup.select(&#39;li&#39;):    print(i.get_text())# 获取属性值for i in soup.select(&#39;ul&#39;):    print(i[&quot;id&quot;])</code></pre>]]></content>
      
      
      <categories>
          
          <category> spider </category>
          
      </categories>
      
      
        <tags>
            
            <tag> beautifulSoup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>超级鹰</title>
      <link href="/2018/05/24/spider/auth_code/"/>
      <url>/2018/05/24/spider/auth_code/</url>
      
        <content type="html"><![CDATA[<h2 id="使用验证平台-超级鹰-https-www-chaojiying-com"><a href="#使用验证平台-超级鹰-https-www-chaojiying-com" class="headerlink" title="使用验证平台   超级鹰(https://www.chaojiying.com/)"></a>使用验证平台   超级鹰(<a href="https://www.chaojiying.com/" target="_blank" rel="noopener">https://www.chaojiying.com/</a>)</h2><h3 id="字母数字验证码"><a href="#字母数字验证码" class="headerlink" title="字母数字验证码"></a>字母数字验证码</h3><p>code</p><pre><code class="python">import timefrom io import BytesIOfrom PIL import Imagefrom selenium import webdriverfrom selenium.common.exceptions import TimeoutExceptionfrom selenium.webdriver.common.by import Byfrom selenium.webdriver.support.ui import WebDriverWaitfrom selenium.webdriver.support import expected_conditions as ECfrom chaojiying import main1chrome_options = webdriver.ChromeOptions()# chrome_options.add_argument(&#39;--headless&#39;)browser = webdriver.Chrome(chrome_options=chrome_options)# browser = webdriver.Chrome()browser.set_window_size(1200, 700)# 显式等待 针对某个节点的等待wait = WebDriverWait(browser, 10)def get_big_image():    browser.execute_script(&#39;window.scrollTo(0, 300)&#39;)    screenshot = browser.get_screenshot_as_png()    screenshot = Image.open(BytesIO(screenshot))    return screenshotdef get_captcha_position():    captcha = wait.until(EC.presence_of_element_located                         ((By.CSS_SELECTOR, &#39;#captchaImg&#39;)))    location = captcha.location    size = captcha.size    x1 = location[&#39;x&#39;]    y1 = location[&#39;y&#39;] - 130    width = size[&#39;width&#39;]    height = size[&#39;height&#39;]    x2 = x1 + width    y2 = y1 + height    print(x1, y1, x2, y2)    return (x1, y1, x2, y2)def get_page():    url = &#39;https://login.10086.cn/html/login/login.html?channelID=12002&amp;backUrl=https%3A%2F%2Fshop.10086.cn%2Fmall_280_280.html%3Fforcelogin%3D1&#39;    browser.get(url)    button = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, &#39;#mail_login_2&#39;)))    button.click()    username = &#39;1484815087@qq.com&#39;    password = &#39;518420..&#39;    input_username = wait.until(EC.presence_of_element_located                                ((By.CSS_SELECTOR, &#39;#e_name&#39;)))    input_password = wait.until(EC.presence_of_element_located                                ((By.CSS_SELECTOR, &#39;#e_pwd&#39;)))    input_username.clear()    input_username.send_keys(username)    input_password.clear()    input_password.send_keys(password)    time.sleep(3)    full_screen_img = get_big_image()    full_screen_img.save(&#39;mobile_login.png&#39;)    # 获取验证码左上角和右下角的坐标    x1, y1, x2, y2 = get_captcha_position()    captcha_img = full_screen_img.crop((x1, y1, x2, y2))    captcha_img.save(&#39;mobile_captcha.png&#39;)    captcha_str = main1(&#39;mobile_captcha.png&#39;)    print(captcha_str)    input_code = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, &#39;#inputCode&#39;)))    input_code.clear()    input_code.send_keys(captcha_str)    button = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, &#39;#submit_bt&#39;)))    button.click()    # return htmldef main():    html = get_page()    # parse_html(html)if __name__ == &#39;__main__&#39;:    main()</code></pre><p>验证方式的平台</p><pre><code class="python">import requestsfrom hashlib import md5class Chaojiying_Client(object):    def __init__(self, username, password, soft_id):        self.username = username        password =  password.encode(&#39;utf8&#39;)        self.password = md5(password).hexdigest()        self.soft_id = soft_id        self.base_params = {            &#39;user&#39;: self.username,            &#39;pass2&#39;: self.password,            &#39;softid&#39;: self.soft_id,        }        self.headers = {            &#39;Connection&#39;: &#39;Keep-Alive&#39;,            &#39;User-Agent&#39;: &#39;Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0)&#39;,        }    def PostPic(self, im, codetype):        &quot;&quot;&quot;        im: 图片字节        codetype: 题目类型 参考 http://www.chaojiying.com/price.html        &quot;&quot;&quot;        params = {            &#39;codetype&#39;: codetype,        }        params.update(self.base_params)        files = {&#39;userfile&#39;: (&#39;ccc.jpg&#39;, im)}        r = requests.post(&#39;http://upload.chaojiying.net/Upload/Processing.php&#39;, data=params, files=files, headers=self.headers)        return r.json()    def ReportError(self, im_id):        &quot;&quot;&quot;        im_id:报错题目的图片ID        &quot;&quot;&quot;        params = {            &#39;id&#39;: im_id,        }        params.update(self.base_params)        r = requests.post(&#39;http://upload.chaojiying.net/Upload/ReportError.php&#39;, data=params, headers=self.headers)        return r.json()def main1(urlstr):    chaojiying = Chaojiying_Client(&#39;carmack&#39;, &#39;Vff635241&#39;, &#39;96001&#39;)     im = open(urlstr, &#39;rb&#39;).read()                                                     return chaojiying.PostPic(im, 1902)[&#39;pic_str&#39;]                                           if __name__ == &#39;__main__&#39;:    chaojiying = Chaojiying_Client(&#39;carmack&#39;, &#39;Vff635241&#39;, &#39;96001&#39;)        im = open(&#39;CaptchaImg.png&#39;, &#39;rb&#39;).read()                                                        print(chaojiying.PostPic(im, 1902))                                                </code></pre><h3 id="滑动图片验证码"><a href="#滑动图片验证码" class="headerlink" title="滑动图片验证码"></a>滑动图片验证码</h3><p>step1. 模拟点击验证按钮</p><p>step2. 识别滑动缺⼝位置<br>遍历没有缺⼝和有缺⼝的两张图⽚，找出相同位置像素差距超过指定值的像素点，即缺⼝位置<br>（⽬前极验已经改进了算法）</p><p>step3. 模拟拖动滑块</p><pre><code class="python">import timefrom io import BytesIOfrom PIL import Imagefrom selenium import webdriverfrom selenium.webdriver import ActionChainsfrom selenium.webdriver.common.by import Byfrom selenium.webdriver.support.ui import WebDriverWaitfrom selenium.webdriver.support import expected_conditions as ECEMAIL = &#39;1963298993@qq.com&#39;PASSWORD = &#39;yicijiuhao0&#39;BORDER = 6INIT_LEFT = 60class CrackBilibili():    def __init__(self):        self.url = &#39;https://passport.bilibili.com/login&#39;        self.browser = webdriver.Chrome()        self.wait = WebDriverWait(self.browser, 10)        self.email = EMAIL        self.password = PASSWORD    def __del__(self):        self.browser.close()    def get_geetest_button(self):        &quot;&quot;&quot;        获取初始验证按钮        :return:        &quot;&quot;&quot;        button = self.wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, &#39;.gt_slider_knob.gt_show&#39;)))        return button    def get_position(self):        &quot;&quot;&quot;        获取验证码位置        :return: 验证码位置元组        &quot;&quot;&quot;        img = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, &#39;.gt_cut_fullbg.gt_show&#39;)))        time.sleep(2)        location = img.location        size = img.size        top, bottom, left, right = location[&#39;y&#39;], location[&#39;y&#39;] + size[&#39;height&#39;], location[&#39;x&#39;], location[&#39;x&#39;] + size[            &#39;width&#39;]        return (top, bottom, left, right)    def get_screenshot(self):        &quot;&quot;&quot;        获取网页截图        :return: 截图对象        &quot;&quot;&quot;        screenshot = self.browser.get_screenshot_as_png()        screenshot = Image.open(BytesIO(screenshot))        return screenshot    def get_slider(self):        &quot;&quot;&quot;        获取滑块        :return: 滑块对象        &quot;&quot;&quot;        slider = self.wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, &#39;.gt_slider_knob.gt_show&#39;)))        return slider    def get_geetest_image(self, name=&#39;captcha.png&#39;):        &quot;&quot;&quot;        获取验证码图片        :return: 图片对象        &quot;&quot;&quot;        top, bottom, left, right = self.get_position()        print(&#39;验证码位置&#39;, top, bottom, left, right)        screenshot = self.get_screenshot()        captcha = screenshot.crop((left, top, right, bottom))        captcha.save(name)        return captcha    def open(self):        &quot;&quot;&quot;        打开网页输入用户名密码        :return: None        &quot;&quot;&quot;        self.browser.get(self.url)        email = self.wait.until(EC.presence_of_element_located((By.ID, &#39;login-username&#39;)))        password = self.wait.until(EC.presence_of_element_located((By.ID, &#39;login-passwd&#39;)))        email.clear()        password.clear()        email.send_keys(self.email)        password.send_keys(self.password)    def get_gap(self, image1, image2):        &quot;&quot;&quot;        获取缺口偏移量        :param image1: 不带缺口图片        :param image2: 带缺口图片        :return:        &quot;&quot;&quot;        left = 60        print(&#39;******大小*****&#39;)        print(image1.size)        for i in range(left, image1.size[0]):            for j in range(image1.size[1]):                if not self.is_pixel_equal(image1, image2, i, j):                    left = i                    return left        return left    def is_pixel_equal(self, image1, image2, x, y):        &quot;&quot;&quot;        判断两个像素是否相同        :param image1: 图片1        :param image2: 图片2        :param x: 位置x        :param y: 位置y        :return: 像素是否相同        &quot;&quot;&quot;        # 取两个图片的像素点        pixel1 = image1.load()[x, y]        pixel2 = image2.load()[x, y]        threshold = 60        if abs(pixel1[0] - pixel2[0]) &lt; threshold and abs(pixel1[1] - pixel2[1]) &lt; threshold and abs(                pixel1[2] - pixel2[2]) &lt; threshold:            return True        else:            return False    def get_track(self, distance):        &quot;&quot;&quot;        根据偏移量获取移动轨迹        :param distance: 偏移量        :return: 移动轨迹        &quot;&quot;&quot;        # 移动轨迹        track = []        # 当前位移        current = 0        # 减速阈值        mid = distance * 3 / 5        # 计算间隔        t = 0.5        # 初速度        v = 0        while current &lt; distance:            if current &lt; mid:                # 加速度为正2                a = 2            else:                # 加速度为负3                a = -3            # 初速度v0            v0 = v            # 当前速度v = v0 + at            v = v0 + a * t            # 移动距离x = v0t + 1/2 * a * t^2            move = v0 * t + 1 / 2 * a * t * t            # 当前位移            current += move            # 加入轨迹            track.append(round(move))        return track    def move_to_gap(self, slider, track):        &quot;&quot;&quot;        拖动滑块到缺口处        :param slider: 滑块        :param track: 轨迹        :return:        &quot;&quot;&quot;        ActionChains(self.browser).click_and_hold(slider).perform()        for x in track:            ActionChains(self.browser).move_by_offset(xoffset=x, yoffset=0).perform()        time.sleep(0.5)        ActionChains(self.browser).release().perform()    def login(self):        &quot;&quot;&quot;        登录        :return: None        &quot;&quot;&quot;        submit = self.wait.until(EC.element_to_be_clickable((By.CLASS_NAME, &#39;login-btn&#39;)))        submit.click()        time.sleep(10)        print(&#39;登录成功&#39;)    def crack(self):        # 输入用户名密码        self.open()        # 点击验证按钮        button = self.get_geetest_button()        print(button)        time.sleep(2)        ActionChains(self.browser).move_to_element(button).perform()        time.sleep(2)        # # 获取验证码图片(没有缺口的图)        image1 = self.get_geetest_image(&#39;captcha1.png&#39;)        # 点按呼出缺口        slider = self.get_slider()        slider.click()        time.sleep(2)        # 获取带缺口的验证码图片        image2 = self.get_geetest_image(&#39;captcha2.png&#39;)        # 获取缺口位置        gap = self.get_gap(image1, image2)        print(&#39;缺口位置&#39;, gap)        # 减去缺口位移        gap -= BORDER        # 获取移动轨迹        track = self.get_track(gap)        print(&#39;滑动轨迹&#39;, track)        # 拖动滑块        self.move_to_gap(slider, track)        # 验证结点里面是否包含此文字        success = self.wait.until(            EC.text_to_be_present_in_element((By.CLASS_NAME, &#39;gt_info_type&#39;), &#39;验证通过&#39;))        print(success)        time.sleep(5)        # 失败后重试        if not success:            self.crack()        # else:        #     self.login()if __name__ == &#39;__main__&#39;:    crack = CrackBilibili()    crack.crack()</code></pre>]]></content>
      
      
      <categories>
          
          <category> spider </category>
          
      </categories>
      
      
        <tags>
            
            <tag> code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>selenium</title>
      <link href="/2018/05/22/spider/selenium/"/>
      <url>/2018/05/22/spider/selenium/</url>
      
        <content type="html"><![CDATA[<pre><code class="python">from selenium import webdriverfrom selenium.common.exceptions import TimeoutExceptionfrom selenium.webdriver.common.by import Byfrom selenium.webdriver.support.ui import WebDriverWaitfrom selenium.webdriver.support import expected_conditions as ECfrom selenium.webdriver import ActionChainsdef f1(browser):    # 访问页面    browser.get(&#39;https://www.mkv99.com/vod-detail-id-9462.html&#39;)    # # 获取渲染后的页面内容    # print(browser.page_source)    # # 获取当前网址    # print(browser.current_url)    # # 获取浏览器cookie    # print(browser.get_cookies())    # # 根据id获取单个节点    input1 = browser.find_element_by_id(&#39;1thUrlid第01集&#39;)    print(input1)    # # # 获取节点属性    # print(input1.get_attribute(&#39;href&#39;))    # # 用css选择器获取单个节点    # input_list = browser.find_elements_by_css_selector(&#39;.dwon2&#39;)    # for item in input_list:    #     print(item.get_attribute(&#39;href&#39;))    # print(input2.get_attribute(&#39;href&#39;))    # # # 获取节点的坐标    print(input1.location)    # # # 获取节点的宽高    print(input1.size)    # # 用xpath方法获取单个节点    # input3 = browser.find_element_by_xpath(&#39;//*[@class=&quot;dwon2&quot;]&#39;)    # print(input3.get_attribute(&#39;id&#39;))    # # 根据name获取单个节点    # input4 = browser.find_element_by_name(&#39;CopyAddr1&#39;)    # print(input4.tag_name)    # # 根据链接文字获取单个节点    # input5 = browser.find_element_by_link_text(&#39;今日更新&#39;)    # input6 = browser.find_element_by_partial_link_text(&#39;教程&#39;)    # # 获取节点文本值    # print(input5.text)    # print(input6.text)def f2(browser):    browser.get(&#39;http://www.runoob.com/try/try.php?filename=jqueryui-api-droppable&#39;)    # 切换爬虫到指定iframe（里面是嵌套的一个新网页）    browser.switch_to.frame(&#39;iframeResult&#39;)        source = browser.find_element_by_css_selector(&#39;#draggable&#39;)    target = browser.find_element_by_css_selector(&#39;#droppable&#39;)    # 动作链    actions = ActionChains(browser)    # 将选定的源移动到目标的位置    actions.drag_and_drop(source, target)    actions.perform()def main():    # 使用chrome浏览器    browser = webdriver.Chrome()    # 使用Firefox浏览器    # browser = webdriver.Firefox()    # 使用Edge浏览器    # browser = webdriver.Edge()    # 使用Phantom浏览器    # PhatomJS无头浏览器    # browser = webdriver.PhatomJS()    # 使用Safari浏览器    # browser = webdriver.Safari()    try:        f1(browser)    finally:        # 关闭浏览器        browser.close()if __name__ == &#39;__main__&#39;:    main()</code></pre>]]></content>
      
      
      <categories>
          
          <category> spider </category>
          
      </categories>
      
      
        <tags>
            
            <tag> selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>youyaoqi</title>
      <link href="/2018/05/21/spider/u17/"/>
      <url>/2018/05/21/spider/u17/</url>
      
        <content type="html"><![CDATA[<h3 id="创建一个有个youyaoqi项目"><a href="#创建一个有个youyaoqi项目" class="headerlink" title="创建一个有个youyaoqi项目"></a>创建一个有个youyaoqi项目</h3><ul><li>项目自带文件<ul><li>scrapy.cfg</li><li>youyaoqi<ul><li><strong> init</strong>.py</li><li>items.py</li><li>middlewares.py</li><li>pipelines.py</li><li>settings.py</li><li>spiders<ul><li><code>__ init __.py</code></li><li>cartoon.py</li></ul></li></ul></li></ul></li></ul><p><strong>items</strong></p><pre><code class="python"># -*- coding: utf-8 -*-# Define here the models for your scraped items## See documentation in:# https://doc.scrapy.org/en/latest/topics/items.htmlimport scrapyclass YouyaoqiItem(scrapy.Item):    # define the fields for your item here like:    comic_id = scrapy.Field()    name = scrapy.Field()    cover = scrapy.Field()    update_type = scrapy.Field()    line1 = scrapy.Field()    line2 = scrapy.Field()class U17DetailItem(scrapy.Item):    name = scrapy.Field()    # u_id = scrapy.Field()</code></pre><p><strong>pipelines.py</strong></p><pre><code class="python"># -*- coding: utf-8 -*-# Define your item pipelines here## Don&#39;t forget to add your pipeline to the ITEM_PIPELINES setting# See: https://doc.scrapy.org/en/latest/topics/item-pipeline.htmlimport pymysqlfrom scrapy import Requestfrom scrapy.exceptions import DropItemfrom scrapy.pipelines.images import ImagesPipelineclass ImagePipeline(ImagesPipeline):    def file_path(self, request, response=None, info=None):        url = request.url        file_name = url.split(&#39;/&#39;)[-1]        return file_name    def item_completed(self, results, item, info):        image_paths = [x[&#39;path&#39;] for ok, x in results if ok]        if not image_paths:            raise DropItem(&#39;Image Downloaded Failed&#39;)        return item    def get_media_requests(self, item, info):        yield Request(item[&#39;cover&#39;])class YouyaoqiMysqlPipeline(object):    def __init__(self, host, port, database, username, password):        self.host = host        self.port = port        self.database = database        self.username = username        self.password = password    @classmethod    def from_crawler(cls, crawler):        return cls(            host=crawler.settings.get(&#39;MYSQL_HOST&#39;),            port=crawler.settings.get(&#39;MYSQL_PORT&#39;),            database=crawler.settings.get(&#39;MYSQL_DATABASE&#39;),            username=crawler.settings.get(&#39;MYSQL_USERNAME&#39;),            password=crawler.settings.get(&#39;MYSQL_PASSWORD&#39;),        )    def open_spider(self, spider):        # 获取数据库连接        self.db = pymysql.connect(self.host, self.username, self.password, self.database, charset=&#39;utf8&#39;,                                  port=self.port)        self.cursor = self.db.cursor()    def close_spider(self, spider):        # 释放数据库连接        self.db.close()    def process_item(self, item, spider):        # 插入item数据        sql = &#39;insert into company (comic_id, name, cover, update_type, line1, line2) values (%s, %s, %s, %s, %s, %s)&#39;        self.cursor.execute(sql, (item[&#39;comic_id&#39;], item[&#39;name&#39;], item[&#39;cover&#39;], item[&#39;update_type&#39;], item[&#39;line1&#39;], item[&#39;line2&#39;]))        self.db.commit()        return item</code></pre><p><strong>settings.py</strong></p><pre><code class="python"># -*- coding: utf-8 -*-# Scrapy settings for youyaoqi project## For simplicity, this file contains only settings considered important or# commonly used. You can find more settings consulting the documentation:##     https://doc.scrapy.org/en/latest/topics/settings.html#     https://doc.scrapy.org/en/latest/topics/downloader-middleware.html#     https://doc.scrapy.org/en/latest/topics/spider-middleware.htmlBOT_NAME = &#39;youyaoqi&#39;SPIDER_MODULES = [&#39;youyaoqi.spiders&#39;]NEWSPIDER_MODULE = &#39;youyaoqi.spiders&#39;# Crawl responsibly by identifying yourself (and your website) on the user-agent#USER_AGENT = &#39;youyaoqi (+http://www.yourdomain.com)&#39;# Obey robots.txt rulesROBOTSTXT_OBEY = False# Configure maximum concurrent requests performed by Scrapy (default: 16)#CONCURRENT_REQUESTS = 32# Configure a delay for requests for the same website (default: 0)# See https://doc.scrapy.org/en/latest/topics/settings.html#download-delay# See also autothrottle settings and docs#DOWNLOAD_DELAY = 3# The download delay setting will honor only one of:#CONCURRENT_REQUESTS_PER_DOMAIN = 16#CONCURRENT_REQUESTS_PER_IP = 16# Disable cookies (enabled by default)#COOKIES_ENABLED = False# Disable Telnet Console (enabled by default)#TELNETCONSOLE_ENABLED = False# Override the default request headers:#DEFAULT_REQUEST_HEADERS = {#   &#39;Accept&#39;: &#39;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&#39;,#   &#39;Accept-Language&#39;: &#39;en&#39;,#}# Enable or disable spider middlewares# See https://doc.scrapy.org/en/latest/topics/spider-middleware.html#SPIDER_MIDDLEWARES = {#    &#39;youyaoqi.middlewares.YouyaoqiSpiderMiddleware&#39;: 543,#}# Enable or disable downloader middlewares# See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html#DOWNLOADER_MIDDLEWARES = {#    &#39;youyaoqi.middlewares.YouyaoqiDownloaderMiddleware&#39;: 543,#}# Enable or disable extensions# See https://doc.scrapy.org/en/latest/topics/extensions.html#EXTENSIONS = {#    &#39;scrapy.extensions.telnet.TelnetConsole&#39;: None,#}# Configure item pipelines# See https://doc.scrapy.org/en/latest/topics/item-pipeline.htmlITEM_PIPELINES = {   # &#39;youyaoqi.pipelines.YouyaoqiMysqlPipeline&#39;: 300,   # &#39;youyaoqi.pipelines.ImagePipeline&#39;: 300,}# Enable and configure the AutoThrottle extension (disabled by default)# See https://doc.scrapy.org/en/latest/topics/autothrottle.html#AUTOTHROTTLE_ENABLED = True# The initial download delay#AUTOTHROTTLE_START_DELAY = 5# The maximum download delay to be set in case of high latencies#AUTOTHROTTLE_MAX_DELAY = 60# The average number of requests Scrapy should be sending in parallel to# each remote server#AUTOTHROTTLE_TARGET_CONCURRENCY = 1.0# Enable showing throttling stats for every response received:#AUTOTHROTTLE_DEBUG = False# Enable and configure HTTP caching (disabled by default)# See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html#httpcache-middleware-settings#HTTPCACHE_ENABLED = True#HTTPCACHE_EXPIRATION_SECS = 0#HTTPCACHE_DIR = &#39;httpcache&#39;#HTTPCACHE_IGNORE_HTTP_CODES = []#HTTPCACHE_STORAGE = &#39;scrapy.extensions.httpcache.FilesystemCacheStorage&#39;FEED_EXPORT_ENCODING = &#39;utf-8&#39;MAX_PAGE = 500# IMAGES_STORE = &#39;./images&#39;# mysql settingsMYSQL_HOST = &#39;127.0.0.1&#39;MYSQL_PORT = 3306MYSQL_USERNAME = &#39;root&#39;MYSQL_PASSWORD = &#39;123456&#39;MYSQL_DATABASE = &#39;u17&#39;</code></pre><p><strong>cartoon.py</strong></p><pre><code class="python"># -*- coding: utf-8 -*-import jsonimport scrapyfrom youyaoqi.items import YouyaoqiItem, U17DetailItemclass CartoonSpider(scrapy.Spider):    name = &#39;cartoon&#39;    allowed_domains = [&#39;www.u17.com&#39;]    start_urls = [&#39;http://www.u17.com/&#39;]    def start_requests(self):        data = {&#39;data[group_id]&#39;: &#39;no&#39;, &#39;data[theme_id]&#39;: &#39;no&#39;, &#39;data[is_vip]&#39;: &#39;no&#39;, &#39;data[accredit]&#39;: &#39;no&#39;, &#39;data[color]&#39;: &#39;no&#39;, &#39;data[comic_type]&#39;: &#39;no&#39;, &#39;data[series_status]&#39;: &#39;no&#39;, &#39;data[order]&#39;: &#39;2&#39;, &#39;data[page_num]&#39;: &#39;1&#39;, &#39;data[read_mode]&#39;: &#39;no&#39; }        headers = {            &#39;Referer&#39;: &#39;http://www.u17.com/comic_list/th99_gr99_ca99_ss99_ob0_ac0_as0_wm0_co99_ct99_p1.html?order=2&#39;,            &#39;User-Agent&#39;: &#39;Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko&#39;,            &#39;Host&#39;: &#39;www.u17.com&#39;,            &#39;Accept&#39;: &#39;application/json, text/plain, */*&#39;,            &#39;Accept-Encoding&#39;: &#39;gzip, deflate, sdch&#39;,            &#39;Accept-Language&#39;: &#39;zh-CN,zh;q=0.8,en;q=0.6,ja;q=0.4,zh-TW;q=0.2,mt;q=0.2&#39;,            &#39;Connection&#39;: &#39;keep-alive&#39;,            &#39;X-Requested-With&#39;: &#39;XMLHttpRequest&#39;,        }        max_page = self.settings.get(&#39;MAX_PAGE&#39;)        base_url = &#39;http://www.u17.com/comic/ajax.php?mod=comic_list&amp;act=comic_list_new_fun&amp;a=get_comic_list&#39;        for page in range(2, max_page):            data[&#39;data[page_num]&#39;] = str(page)            yield scrapy.FormRequest(url=base_url, headers=headers, method=&#39;POST&#39;, formdata=data, callback=self.parse)    def get_headers(self):        headers = {            &#39;User-Agent&#39;: &#39;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; 360SE)&#39;,            &#39;Host&#39;: &#39;www.u17.com&#39;,            &#39;Accept&#39;: &#39;application/json, text/plain, */*&#39;,            &#39;Accept-Encoding&#39;: &#39;gzip, deflate, sdch&#39;,            &#39;Accept-Language&#39;: &#39;zh-CN,zh;q=0.8,en;q=0.6,ja;q=0.4,zh-TW;q=0.2,mt;q=0.2&#39;,            &#39;Connection&#39;: &#39;keep-alive&#39;,            &#39;X-Requested-With&#39;: &#39;XMLHttpRequest&#39;,            &#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded; charset=UTF-8&#39;,        }        return headers    def parse(self, response):        result_json = json.loads(response.text)        data_list = result_json[&#39;comic_list&#39;]        for data in data_list:            item = YouyaoqiItem()            item[&#39;comic_id&#39;] = data[&#39;comic_id&#39;]            item[&#39;name&#39;] = data[&#39;name&#39;]            item[&#39;cover&#39;] = data[&#39;cover&#39;]            item[&#39;update_type&#39;] = data[&#39;update_type&#39;]            item[&#39;line1&#39;] = data[&#39;line1&#39;]            item[&#39;line2&#39;] = data[&#39;line2&#39;]            yield item            detail_url = &#39;http://www.u17.com/comic/%s.html&#39; % item[&#39;comic_id&#39;]            yield scrapy.Request(url=detail_url, headers=self.get_headers(), callback=self.parse_detail)    def parse_detail(self, response):        results = response.css(&#39;#chapter li&#39;)        for item in results:            detail_item = U17DetailItem()            name_list = item.xpath(&#39;./a/text()&#39;).extract()            for name in name_list:                detail_item[&#39;name&#39;] = name.replace(&#39;&quot;&#39;, &#39;&#39;).strip()            # detail_item[&#39;u_id&#39;] = title.replace            # detail_item[&#39;name&#39;] = item.replace(&#39;&quot;&#39;, &#39;&#39;).strip()                yield detail_item            # a_url_list = item.css(&#39;./a::attr(href)&#39;).extract()            # for a_url in a_url_list:            #     detail_item[&#39;url&#39;] = a_url            #     yield detail_item</code></pre>]]></content>
      
      
      <categories>
          
          <category> spider </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cartoon </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>summary</title>
      <link href="/2018/05/19/spider/%E7%B1%BB%E9%80%89%E6%8B%A9%E5%99%A8/"/>
      <url>/2018/05/19/spider/%E7%B1%BB%E9%80%89%E6%8B%A9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><ul><li>一个标签有多个类属性时，取到这个标签的时候，多个类属性之间用不用空格隔开，正常表示<pre><code class="python">result = soup.select(&#39;.-live-layout-row.layout_sports_350_650&#39;)</code></pre></li></ul><h3 id="清除数据库"><a href="#清除数据库" class="headerlink" title="清除数据库"></a>清除数据库</h3><pre><code class="python">清除自增字段，下次创建的时候，id为1truncate table 名</code></pre>]]></content>
      
      
      <categories>
          
          <category> spider </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随机总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kaisha密码</title>
      <link href="/2018/05/15/spider/kaisha%E8%A7%A3%E7%A0%81%E7%A8%8B%E5%BA%8F/"/>
      <url>/2018/05/15/spider/kaisha%E8%A7%A3%E7%A0%81%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>用来破解一些加密文件</p><pre><code class="python">import urllibfrom urllib import parsedef str2url(s):    #s = &#39;9hFaF2FF%_Et%m4F4%538t2i%795E%3pF.265E85.%fnF9742Em33e162_36pA.t6661983%x%6%%74%2i2%22735&#39;    num_loc = s.find(&#39;h&#39;)    rows = int(s[0:num_loc])    strlen = len(s) - num_loc    cols = int(strlen/rows)    right_rows = strlen % rows    new_s = list(s[num_loc:])    output = &#39;&#39;    for i in range(len(new_s)):        x = i % rows        y = i / rows        p = 0        if x &lt;= right_rows:            p = x * (cols + 1) + y        else:            p = right_rows * (cols + 1) + (x - right_rows) * cols + y        output += new_s[int(p)]    return parse.unquote(output).replace(&#39;^&#39;, &#39;0&#39;)def main():    s = &quot;6hAFxn752E5F215234uy495-3741E8t%mie15F2E185E%6at%72E%7ba%13t21at27261734458%h3%%-5a885d5pF2m%%11799662E13_D55%E992E48%%8i222%4%59358.Fk1EE5-8bc%7632..FF%5%24_%9_mae58%E513e51&quot;    result_str = str2url(s)    print(result_str)main()</code></pre>]]></content>
      
      
      <categories>
          
          <category> spider </category>
          
      </categories>
      
      
        <tags>
            
            <tag> urllib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-vim-practice</title>
      <link href="/2018/05/14/Linux/vim_practice/"/>
      <url>/2018/05/14/Linux/vim_practice/</url>
      
        <content type="html"><![CDATA[<h4 id="practice1-fish"><a href="#practice1-fish" class="headerlink" title="practice1_fish"></a>practice1_fish</h4><pre><code class="python">#!/usr/bin/python3&quot;&quot;&quot;穷举法:穷尽所有可能直到找到正确答案&quot;&quot;&quot;def main():   &quot;&quot;&quot;分鱼&quot;&quot;&quot;   fish = 1   while True:         enough = True         total = fish         for _ in range(5):             if (total - 1) % 5 == 0:                 total = (total - 1) // 5 *4             else:                 enough = False                 break         if enough:             print(fish)             break         fish += 1 if __name__ == &quot;__main__&quot;:     main()</code></pre><h4 id="practice2-joseph"><a href="#practice2-joseph" class="headerlink" title="practice2_joseph"></a>practice2_joseph</h4><pre><code class="python">#!/usr/bin/python3&quot;&quot;&quot;约瑟夫环&quot;&quot;&quot;def main():   &quot;&quot;&quot;主函数&quot;&quot;&quot;   persons = [True] * 30   # 设置变量，计数，下标，报数   counter, index, number = 0, 0, 0   #  循环选出15个人     while counter &lt; 15:         if persons[index]:             # 每次数数加一             number += 1             # 数到9的人，弄死             if number == 9:                 # 把它的值变为False                 persons[index] = False                 # 每选出一个人，counter数量加一                 counter += 1                 # 弄死的人，后面人又从0开始数数                 number = 0         # 移动下标         index += 1         # 保证有效的下标         index %= len(persons)     for person in persons:         print(&quot;基&quot; if person else &quot;非&quot;, end = &quot;&quot;)     print() if __name__ == &quot;__main__&quot;:     main()</code></pre><p>####practice3_salary</p><pre><code class="python">#!/usr/bin/python3from abc import ABCMeta, abstractmethod&quot;&quot;&quot;面向对象的程序设计基本步骤：1. 定义类   - 数据抽象: 找到对象的静态特征-属性(名词)   - 行为抽象: 找到对象的动态特征-方法(动词)2. 创建对象(隐藏实现细节，暴露简单的调用接口)3. 给对象发消息 面向对象的四大支柱：抽象、封装、继承、多态 抽象：定义类的过程就是提取共性的抽象过程 封装：将数据和操作数据方法从逻辑上组成一个整体-对象 继承：从已有的类创建新类的过程     - 提供继承信息的称为父类     - 得到继承信息的称为子类 多态：调用相同的方法做了不同的事情     - 同样的方法在运行时表现出不同行为     - 子类重写父类的方法，不同的子类给出不同的实现版本 &quot;&quot;&quot; class Employee(metaclass=ABCMeta):     # metaclass=ABCMeta 原类，让子类不能再创建这个抽象对象，给别人继承     def __init__(self, name):         self.name = name     # 装饰器     @abstractmethod     def salary(self):         pass class Manager(Employee):     &quot;&quot;&quot;经理&quot;&quot;&quot;     @property     def salary(self):         return 15000 class Programmer(Employee):     &quot;&quot;&quot;程序员&quot;&quot;&quot;     def __init__(self, name):         super().__init__(name)         # self.name = name         self.working_hour = 0     @property     def salary(self):         return 200 * self.working_hour class Salesman(Employee):     &quot;&quot;&quot;销售员&quot;&quot;&quot;     def __init__(self, name):         self.name = name         self.sales = 0     @property     def salary(self):         return 1800 + self.sales * 0.05 &quot;&quot;&quot;工资结算&quot;&quot;&quot; def main():     &quot;&quot;&quot;主函数&quot;&quot;&quot;     emps = [         Manager(&quot;刘备&quot;), Manager(&quot;曹操&quot;),         Programmer(&quot;诸葛亮&quot;), Programmer(&quot;荀彧&quot;),         Salesman(&quot;貂蝉&quot;)     ]     for emp in emps:         # isinstance函数可以进行运行时类型识别，判断函数类型         if isinstance(emp, Programmer):             emp.working_hour = int(input(f&#39;请输入{emp.name}本月工作时间: &#39;))         elif isinstance(emp, Salesman):             emp.sales = float(input(f&#39;请输入{emp.name}本月销售额: &#39;))        #print(&#39;%s: %.2f元&#39; % (emp.name, emp.salary))         print(f&quot;{emp.name}本月的工资为: {emp.salary}元&quot;) if __name__ == &quot;__main__&quot;:     main()</code></pre><h4 id="practice-poker"><a href="#practice-poker" class="headerlink" title="practice_poker"></a>practice_poker</h4><pre><code class="python">#!/usr/bin/python3from enum import Enum, uniqueimport random# 定义花色的常量(尽量用符号常量代替字面常量)# 枚举类型是定义符号常量的最佳选择# @unique 类的装饰器，类里面的变量不能重复，独一无二的 &quot;&quot;&quot;花色枚举类，用来定义黑桃、红心、梅花、方块常量&quot;&quot;&quot; @unique class Suite(Enum):     SPADE = 0     HEART = 1     CLUB = 2     DIAMOND = 3 &quot;&quot;&quot;定义扑克类&quot;&quot;&quot; class Card(object):     def __init__(self, suite, face):         self.suite = suite         self.face = face     def show(self):         suites = [&quot;黑&quot;, &quot;红&quot;, &quot;梅&quot;, &quot;方&quot;]         faces = [             &quot;&quot;, &quot;A&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;,             &quot;7&quot;, &quot;8&quot;, &quot;9&quot;, &quot;10&quot;, &quot;J&quot;, &quot;Q&quot;, &quot;K&quot;         ]         return f&quot;{suites[self.suite.value]}{faces[self.face]}&quot;     &quot;&quot;&quot;     # 比较大小     def __lt__(self, other):         if self.suite == other.suite:             return self.face &lt; other.face         return self.suite.value &lt; other.suite.value     &quot;&quot;&quot;     # 把对象变成字符串（魔术方法）     def __str__(self):         return self.show()     # 把对象变成字符串（魔术方法）     def __repr__(self):         return self.show() &quot;&quot;&quot;牌类&quot;&quot;&quot; class Poker(object):     def __init__(self):         self.index = 0         # 生成一副牌，生成式         self.cards = [Card(suite, face)                       for suite in Suite                       for face in range(1, 14)         ]     def shuffle(self):         &quot;&quot;&quot;洗牌，调用随机乱序的函数&quot;&quot;&quot;         random.shuffle(self.cards)     def deal(self):         &quot;&quot;&quot;发牌&quot;&quot;&quot;         card = self.cards[self.index]         self.index += 1         return card     @property     def has_more(self):         &quot;&quot;&quot;判断是否有牌发&quot;&quot;&quot;         return self.index &lt; len(self.cards) class Player(object):     &quot;&quot;&quot;玩家&quot;&quot;&quot;     def __init__(self, name):         self.name = name         self.cards = []     def get_one(self, card):         &quot;&quot;&quot;摸一张牌&quot;&quot;&quot;         self.cards.append(card)     # *后面的是命名关键字参数，必须写参数名key     def sort_cards(self, *, key=lambda card:                       (card.suite.value, card.face)):         &quot;&quot;&quot; 整理手上的牌&quot;&quot;&quot;         self.cards.sort(key=key) def main():     poker = Poker()     poker.shuffle()     players = [                Player(&quot;东邪&quot;), Player(&quot;西毒&quot;), Player(&quot;南帝&quot;),                Player(&quot;北丐&quot;)     ]     for _ in range(13):         for player in players:             player.get_one(poker.deal())     for player in players:         player.sort_cards(key=lambda card: card.face)         print(player.name, end=&quot;: &quot;)         print(player.cards) if __name__ == &quot;__main__&quot;:     main()</code></pre><h4 id="practice-mycal"><a href="#practice-mycal" class="headerlink" title="practice_mycal"></a>practice_mycal</h4><pre><code class="python">#!/usr/bin/python3&quot;&quot;&quot;万年历&quot;&quot;&quot;from datetime import datetimeimport sysdef is_leap(year):     &quot;&quot;&quot;判断指定年份是否是闰年&quot;&quot;&quot;     return year % 4 == 0 and year % 100 != 0 or year % 400 == 0def get_month_days(year, month):     &quot;&quot;&quot;获得指定的月份的天数&quot;&quot;&quot;     days = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]     # 修改2月份的天数     if month == 2 and is_leap(year):         days[2] = 29     return days[month]def main():     # 通过sys模块的argv可以获取命令行参数     if len(sys.argv) == 3:         year = int(sys.argv[2])         month = int(sys.argv[1])     else:         # 拿到现在系统的时间和日期         now = datetime.now()         year = now.year         month = now.month     # 拿到年，月小于2，算到上一年     y = year if month &gt; 2 else year - 1     # 拿到月，月小于2，算到13月或者14月     m = month if month &gt; 2 else month + 12     # 取到世纪，年份的前两位数     c = y // 100     # 取到年的后两位     y = y % 100     # 计算每个月1号是星期几     w = y + y // 4 + c // 4 - 2 * c + 26 * (m + 1) // 10     # 对7求余数，0对应星期日     w %= 7     months = [         &quot;&quot;, &quot;January&quot;, &quot; February&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;, &quot; June&quot;,         &quot; July&quot;, &quot; August&quot;, &quot;September&quot;, &quot;October&quot;, &quot; November&quot;, &quot; December&quot;     ]     print(f&quot;{months[month]} {year}&quot;.center(20))     print(&quot;Su Mo Tu We Th Fr Sa&quot;)     print (&quot; &quot; * 3 * w,end=&quot;&quot;)     days = get_month_days(year, month)  # 遍历月份的天数，进行排版     for day in range(1, days + 1):         print(f&quot;{day}&quot;.rjust(2), end=&quot; &quot;)         w += 1         if w % 7 == 0:             print()     print() if __name__ == &quot;__main__&quot;:     main()</code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux-practice </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>movie</title>
      <link href="/2018/05/12/spider/%E7%88%AC%E7%94%B5%E5%BD%B1/"/>
      <url>/2018/05/12/spider/%E7%88%AC%E7%94%B5%E5%BD%B1/</url>
      
        <content type="html"><![CDATA[<h3 id="爬电影"><a href="#爬电影" class="headerlink" title="爬电影"></a>爬电影</h3><p>获取的是电影的种子，将这个链接发给迅雷，可以直接下载</p><pre><code class="python">import jsonimport reimport requestsdef parse_page(html):    patters = re.compile(&#39;var downurls=&quot;福.*?mp4$(.*?)/#&quot;&#39;, re.S)    patter = re.findall(patters, html)    print(patter)# 取页面HTMLdef get_one_page(url):    headers =  {        &quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:2.0b13pre) Gecko/20110307 Firefox/4.0b13pre&quot;    }    response = requests.get(url, headers=headers)    if response.status_code == 200:        text = response.content.decode(&#39;utf-8&#39;)        return text    return Nonedef main():    url = &quot;https://www.mkv99.com/vod-detail-id-12479.html&quot;    html = get_one_page(url)    movie = parse_page(html)if __name__ == &#39;__main__&#39;:    main()</code></pre>]]></content>
      
      
      <categories>
          
          <category> spider </category>
          
      </categories>
      
      
        <tags>
            
            <tag> movie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>practice——jd</title>
      <link href="/2018/05/11/spider/jd/"/>
      <url>/2018/05/11/spider/jd/</url>
      
        <content type="html"><![CDATA[<p>数据库字段创建</p><pre><code class="python">create database jddb default character set=utf8;use jddb;create table jd (    id integer auto_increment primary key,    title varchar(128),    img_src varchar(1024),    price varchar(128),    shop varchar(128),    commit_num varchar(100));</code></pre><p>模型设置</p><pre><code class="python">from sqlalchemy.ext.declarative import declarative_basefrom sqlalchemy import Column, Integer, Stringfrom sqlalchemy import create_engineengine = create_engine(&quot;mysql+pymysql://root:123456@127.0.0.1:3306/jd_db?charset=utf8&quot;, max_overflow=5,encoding=&#39;utf-8&#39;)Base = declarative_base()class JdProduct(Base):    __tablename__ = &#39;jd&#39;    id = Column(Integer, primary_key=True, autoincrement=True)    #主键，自增    title = Column(String(128))    img_src = Column(String(1024))    price = Column(String(128))    shop = Column(String(128))    commit_num = Column(String(100))</code></pre><p>运行程序</p><pre><code class="python">import timefrom lxml import etreefrom selenium import webdriverfrom selenium.webdriver.common.by import Byfrom selenium.webdriver.support.ui import WebDriverWaitfrom selenium.webdriver.support import expected_conditions as ECfrom sqlalchemy import create_enginefrom sqlalchemy.orm import sessionmakerfrom jd_model import JdProductengine = create_engine(&quot;mysql+pymysql://root:123456@127.0.0.1/jddb?charset=utf8&quot;, max_overflow=5)session_maker = sessionmaker(bind=engine)session = session_maker()# 打开一个浏览器browser = webdriver.Chrome()wait = WebDriverWait(browser, 5)def get_page(page):    if page == 1:        url = &quot;http://www.jd.com&quot;        # 访问网址        browser.get(url)        # 注意下面的presence_of_element_located，容易出错        input = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, &#39;#key&#39;)))        input.clear()        input.send_keys(&#39;围巾女&#39;)        button = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, &#39;#search button.button&#39;)))        button.click()        time.sleep(3)    # 滑动到页面底部,滑动指定次数    # for i in range(16):    #     i = i + 1    #     str_js = &#39;var scrollHeight = document.body.scrollHeight / 16;window.scrollTo(0, scrollHeight * (%d));&#39; % i    #     browser.execute_script(str_js)    #     time.sleep(1)    str_js = &#39;var scrollHeight = document.body.scrollHeight;window.scrollTo(0, scrollHeight);&#39;    browser.execute_script(str_js)    # 反向滑动    for i in range(16, 0, -1):        str_js = &#39;var scrollHeight = document.body.scrollHeight / 16;window.scrollTo(0, scrollHeight * (%d));&#39; % i        browser.execute_script(str_js)        time.sleep(5)    # 保存当前页面的内容    page_source = browser.page_source    # 下一页    # 滚动到页码部分    input = browser.find_element_by_css_selector(&#39;#J_bottomPage input.input-txt&#39;)    str_js = &#39;var scrollHeight = document.body.scrollHeight;window.scrollTo(0, %d);&#39; % (input.location[&#39;y&#39;] - 50)    browser.execute_script(str_js)    time.sleep(3)    input = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, &#39;#J_bottomPage input.input-txt&#39;)))    input.clear()    input.send_keys(page + 1)    # 点击下一页    submit = wait.until(        EC.element_to_be_clickable((By.CSS_SELECTOR, &#39;#J_bottomPage .btn-default&#39;))    )    submit.click()    time.sleep(3)    return page_sourcedef parse_page(html):    ehtml = etree.HTML(html)    gl_items = ehtml.xpath(&#39;//div[@id=&quot;J_goodsList&quot;]//li[@class=&quot;gl-item&quot;]&#39;)    print(len(gl_items))    for gl_item in gl_items:        jd = JdProduct()        img_src = &#39;&#39;.join(gl_item.xpath(&#39;.//div[@class=&quot;p-img&quot;]/a/img/@src&#39;))        title =  &#39;&#39;.join(gl_item.xpath(&#39;.//div[@class=&quot;p-name p-name-type-2&quot;]//em//text()&#39;))        price = gl_item.xpath(&#39;.//div[@class=&quot;p-price&quot;]//strong/i/text()&#39;)        shop = gl_item.xpath(&#39;.//div[@class=&quot;p-shop&quot;]//span/a/text()&#39;)        commit_num = gl_item.xpath(&#39;.//div[@class=&quot;p-commit&quot;]//strong/a//text()&#39;)        jd.title = title        jd.img_src = img_src        jd.price = price        jd.shop = shop        jd.commit_num = commit_num        try:            session.add(jd)            session.commit()        except Exception as e:            passdef main():    for page in range(100):        page = page + 1        print(page)        html = get_page(page)        parse_page(html)if __name__ == &#39;__main__&#39;:    main()</code></pre>]]></content>
      
      
      <categories>
          
          <category> spider </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sqlalchemy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>novel</title>
      <link href="/2018/05/11/spider/%E7%88%AC%E7%9F%AD%E8%A7%86%E9%A2%91/"/>
      <url>/2018/05/11/spider/%E7%88%AC%E7%9F%AD%E8%A7%86%E9%A2%91/</url>
      
        <content type="html"><![CDATA[<h3 id="novel"><a href="#novel" class="headerlink" title="novel"></a>novel</h3><h5 id="爬取到小说的具体内容，要进行滤除处理，完整的代码"><a href="#爬取到小说的具体内容，要进行滤除处理，完整的代码" class="headerlink" title="爬取到小说的具体内容，要进行滤除处理，完整的代码"></a>爬取到小说的具体内容，要进行滤除处理，完整的代码</h5><pre><code class="python"># -*- coding:UTF-8 -*-    from bs4 import BeautifulSoup    import requests    if __name__ == &quot;__main__&quot;:        target = &#39;http://www.biqukan.com/1_1094/5403177.html&#39;        req = requests.get(url = target)        html = req.text        bf = BeautifulSoup(html)        texts = bf.find_all(&#39;div&#39;, class_ = &#39;showtxt&#39;)        print(texts[0].text.replace(&#39;\xa0&#39;*8,&#39;\n\n&#39;))</code></pre><p>正文</p><pre><code class="python">import jsonfrom bs4 import BeautifulSoupimport requestsdef strips(contents):    result_list =  []    list1 = []    matter = contents[::2][::2]    for item in matter:        result_list.append(item)    for i in result_list:        list1.append(i.strip())    return list1# 保存json数据def save_json(article, num):    fiction_json_str = json.dumps(article, ensure_ascii=False)    with open(str(num)+&#39;.json&#39;, &#39;w&#39;, encoding=&#39;utf-8&#39;) as f:        f.write(fiction_json_str)# 取页面HTMLdef get_one_page(url):    headers =  {        &quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:2.0b13pre) Gecko/20110307 Firefox/4.0b13pre&quot;    }    response = requests.get(url, headers=headers)    if response.status_code == 200:        text = response.content.decode(&#39;utf-8&#39;)        return text    return Nonedef parse_with_bs4(html):    all_list = []    all_dic = {}    soup = BeautifulSoup(html, &#39;lxml&#39;)    title = soup.select(&#39;.content_read .box_con .bookname h1&#39;)[0].string    contents = soup.select(&#39;.content_read .box_con #content&#39;)[0].contents    content = strips(contents)    all_dic[&#39;title&#39;] = title    all_dic[&#39;content&#39;] = content    all_list.append(all_dic)    return all_listdef next_url(html):    soup = BeautifulSoup(html, &#39;lxml&#39;)    # 下一章的后缀路由    next_url = soup.select(&#39;.content_read .box_con .bookname .bottem1 a&#39;)[3][&#39;href&#39;]    nexts_url = &#39;http://www.xbiquge.la&#39; + next_url    return nexts_urldef main():    num = 1    url = &quot;http://www.xbiquge.la/2/2823/1790661.html&quot;    while True:        html = get_one_page(url)        article = parse_with_bs4(html)        save_json(article, num)        url = next_url(html)        if url == &#39;http://www.xbiquge.la/2/2823/&#39;:            break        num += 1if __name__ == &#39;__main__&#39;:    main()</code></pre>]]></content>
      
      
      <categories>
          
          <category> spider </category>
          
      </categories>
      
      
        <tags>
            
            <tag> novel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shop_mo</title>
      <link href="/2018/05/09/spider/%E7%88%AC%E5%8F%96%E6%95%B0%E6%8D%AE/"/>
      <url>/2018/05/09/spider/%E7%88%AC%E5%8F%96%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="蘑菇街"><a href="#蘑菇街" class="headerlink" title="蘑菇街"></a>蘑菇街</h3><p>agent_list.py</p><pre><code class="python">import randomdef get_random_agent():    agent_list = [    &quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; AcooBrowser; .NET CLR 1.1.4322; .NET CLR 2.0.50727)&quot;,        &quot;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; Acoo Browser; SLCC1; .NET CLR 2.0.50727; Media Center PC 5.0; .NET CLR 3.0.04506)&quot;,        &quot;Mozilla/4.0 (compatible; MSIE 7.0; AOL 9.5; AOLBuild 4337.35; Windows NT 5.1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)&quot;,        &quot;Mozilla/5.0 (Windows; U; MSIE 9.0; Windows NT 9.0; en-US)&quot;,        &quot;Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 2.0.50727; Media Center PC 6.0)&quot;,        &quot;Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 1.0.3705; .NET CLR 1.1.4322)&quot;,        &quot;Mozilla/4.0 (compatible; MSIE 7.0b; Windows NT 5.2; .NET CLR 1.1.4322; .NET CLR 2.0.50727; InfoPath.2; .NET CLR 3.0.04506.30)&quot;,        &quot;Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN) AppleWebKit/523.15 (KHTML, like Gecko, Safari/419.3) Arora/0.3 (Change: 287 c9dfb30)&quot;,        &quot;Mozilla/5.0 (X11; U; Linux; en-US) AppleWebKit/527+ (KHTML, like Gecko, Safari/419.3) Arora/0.6&quot;,        &quot;Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.2pre) Gecko/20070215 K-Ninja/2.1.1&quot;,        &quot;Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9) Gecko/20080705 Firefox/3.0 Kapiko/3.0&quot;,        &quot;Mozilla/5.0 (X11; Linux i686; U;) Gecko/20070322 Kazehakase/0.4.5&quot;,        &quot;Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.8) Gecko Fedora/1.9.0.8-1.fc10 Kazehakase/0.5.6&quot;,        &quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11&quot;,        &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/535.20 (KHTML, like Gecko) Chrome/19.0.1036.7 Safari/535.20&quot;,        &quot;Opera/9.80 (Macintosh; Intel Mac OS X 10.6.8; U; fr) Presto/2.9.168 Version/11.52&quot;,    ]    agent = random.choice(agent_list)    return agentif __name__ == &#39;__main__&#39;:    agent = get_random_agent()    print(agent)</code></pre><p>数据库中创建的字段</p><pre><code class="python">from sqlalchemy.ext.declarative import declarative_basefrom sqlalchemy import Column, Integer, String, ForeignKey, UniqueConstraint, Indexfrom sqlalchemy.orm import sessionmaker, relationshipimport pymysqlfrom sqlalchemy import create_engineengine = create_engine(&quot;mysql+pymysql://root:123456@127.0.0.1:3306/maoyan_db?charset=utf8&quot;, max_overflow=5,encoding=&#39;utf-8&#39;)Base = declarative_base()class MoguProduct(Base):    __tablename__ = &#39;mogu&#39;    id = Column(Integer, primary_key=True, autoincrement=True)    #主键，自增    tradeitemid = Column(String(128))    img = Column(String(1024))    clienturl = Column(String(1024))    link = Column(String(1024))    title = Column(String(512))    orgprice = Column(String(128))    price = Column(String(128))    similarityurl = Column(String(1024))py</code></pre><p>运行的程序</p><pre><code class="python">import jsonimport requestsfrom sqlalchemy import create_enginefrom sqlalchemy.orm import sessionmakerfrom agent_helper import get_random_agentfrom models import MoguProductengine = create_engine(&quot;mysql+pymysql://root:123456@127.0.0.1/mogudb?charset=utf8&quot;, max_overflow=5)session_maker = sessionmaker(bind=engine)session = session_maker()# 取页面HTMLdef get_one_page(url, page):    agent = get_random_agent()    # referer = &quot;https://list.mogujie.com/s?page=&quot; + page + &quot;&amp;q=%E8%A1%A3%E6%9C%8D&amp;sort=pop&amp;ppath=&amp;ptp=1.5y18ub.0.0.d9fJkbZi&quot;    referer = &quot;https://list.mogujie.com/s?page=&quot; + str(page) + &quot;&amp;q=%E8%A1%A3%E6%9C%8D&amp;sort=pop&amp;ppath=&amp;ptp=1.5y18ub.0.0.wVFuR4dg&quot;    headers = {        &#39;Referer&#39;: referer,        &#39;User-Agent&#39;: agent,        &#39;Host&#39;: &#39;list.mogujie.com&#39;,        &#39;Accept&#39;: &#39;text/javascript, application/javascript, application/ecmascript, application/x-ecmascript, */*; q=0.01&#39;,        &#39;Accept-Encoding&#39;: &#39;gzip, deflate, br&#39;,        &#39;Accept-Language&#39;: &#39;en-US,en;q=0.9&#39;,        &#39;Connection&#39;: &#39;keep-alive&#39;,        &#39;X-Requested-With&#39;: &#39;XMLHttpRequest&#39;,    }    response = requests.get(url, headers=headers)    if response.status_code == 200:        text = response.content.decode(&#39;utf-8&#39;)        return text    return None# 解析JSON数据def parse_json(html):    # 匹配出现的第一个（    start = html.index(&#39;(&#39;) + 1    html = html[start:-2]    json_data = json.loads(html)    result_list = json_data[&#39;result&#39;][&#39;wall&#39;][&#39;docs&#39;]    for item in result_list:        mogu = MoguProduct()        mogu.tradeitemid = item[&#39;tradeItemId&#39;]        mogu.img = item[&#39;img&#39;]        mogu.clienturl = item[&#39;clientUrl&#39;]        mogu.link = item[&#39;link&#39;]        mogu.title = item[&#39;title&#39;]        mogu.orgprice = item[&#39;orgPrice&#39;]        mogu.price = item[&#39;price&#39;]        mogu.similarityurl = item[&#39;similarityUrl&#39;]        # todo 保存数据库        try:            session.add(mogu)            session.commit()        except Exception as e:            passdef main():    for i in range(69):        page = i        print(i)        url = &quot;https://list.mogujie.com/search?callback=jQuery211032322620930865265_1546578701309&amp;_version=8193&amp;ratio=3%3A4&amp;cKey=43&amp;sort=pop&amp;page=&quot; + str(i+1) + &quot;&amp;q=%25E8%25A1%25A3%25E6%259C%258D&amp;minPrice=&amp;maxPrice=&amp;ppath=&amp;cpc_offset=&amp;ptp=1.5y18ub.0.0.y3JjPAiS&amp;_=1546578701310&quot;        # url = &quot;https://list.mogujie.com/search?callback=jQuery211046561435892064384_1546568094492&amp;_version=8193&amp;ratio=3%3A4&amp;cKey=43&amp;sort=pop&amp;page=&quot; + str(i+1) + &quot;&amp;q=%25E8%25A3%25A4%2    5E5%25AD%2590&amp;minPrice=&amp;maxPrice=&amp;ppath=&amp;cpc_offset=&amp;ptp=1.5y18ub.0.0.k1OJRbUq&amp;_=1546568094493&quot;        html = get_one_page(url, page)        print(html)        parse_json(html)if __name__ == &quot;__main__&quot;:    main()</code></pre><p>数据库建模语句，SQL语句</p><pre><code class="python">create database mogudb default character set=utf8;use mogudb;create table mogu (    id integer auto_increment primary key,    tradeitemid varchar(128),    img varchar(1024),    clienturl varchar(1024),    link varchar(1024),    title varchar(512),    orgprice varchar(128),    price varchar(128),    similarityurl varchar(1024));create unique index ux_mogu_tradeitemid on mogu(tradeitemid);</code></pre>]]></content>
      
      
      <categories>
          
          <category> spider </category>
          
      </categories>
      
      
        <tags>
            
            <tag> agent </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>music_wy</title>
      <link href="/2018/05/07/spider/%E7%88%AC%E5%8F%96%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90/"/>
      <url>/2018/05/07/spider/%E7%88%AC%E5%8F%96%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90/</url>
      
        <content type="html"><![CDATA[<pre><code class="python"># coding=utf-8&#39;&#39;&#39;爬取wy音乐榜单&#39;&#39;&#39;# 导入需要使用的模块import osimport csvimport timeimport randomimport requestsimport threadingfrom lxml import etreefrom selenium import webdriveragents = [    &quot;Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; .NET4.0C; .NET4.0E; .NET CLR 2.0.50727; .NET CLR 3.0.30729; .NET CLR 3.5.30729; InfoPath.3; rv:11.0) like Gecko&quot;,    &quot;Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0&quot;,    &quot;Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0)&quot;,    &quot;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)&quot;,    &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:2.0.1) Gecko/20100101 Firefox/4.0.1&quot;,    &quot;Mozilla/5.0 (Windows NT 6.1; rv:2.0.1) Gecko/20100101 Firefox/4.0.1&quot;,    &quot;Opera/9.80 (Macintosh; Intel Mac OS X 10.6.8; U; en) Presto/2.8.131 Version/11.11&quot;,]class WangyiMusc(object):    # id表示你要获取排行榜    # mating是榜单名称    # url为排行榜页面    # music_url为歌曲下载页面    def __init__(self, mating, id):        self.browser = webdriver.Chrome()        self.id = id        self.url = &quot;https://music.163.com/#/discover/toplist?id={0}&quot;.format(self.id)        self.music_url = &quot;http://music.163.com/song/media/outer/url?id={0}.mp3&quot;        self.mat = mating    # 由于页面的歌曲信息都存放在页面的ifram里面，所以使用Selenium进入子页面获得代码然后返回    def get_html(self):        self.browser.get(self.url)        self.browser.switch_to_frame(&#39;contentFrame&#39;)        iframe = self.browser.page_source        time.sleep(5)        return iframe    # 使用xpath解析页面的信息进行返回    def parse_html(self):        iframe = self.get_html()        html = etree.HTML(iframe)        contents = html.xpath(&#39;//tbody/tr&#39;)        try:            for content in contents:                name = content.xpath(&#39;./td/div/div/div/span/a/b/@title&#39;)[0].replace(&#39; &#39;, &#39;&#39;)                music_id = content.xpath(&#39;./td/div/div/span/@data-res-id&#39;)[0].strip()                print(name)                print(music_id)                # 将歌曲的名称与id传给write_music方法进行下载                self.write_music(name, music_id)                # num = content.xpath(&#39;./td/div/span[@class=&quot;num&quot;]/text()&#39;)[0].strip()                # date = content.xpath(&#39;./td[@class=&quot; s-fc3&quot;]/span/text()&#39;)[0].strip()                # singer = content.xpath(&#39;./td/div[@class=&quot;text&quot;]/@title&#39;)[0].strip()                # # 将歌曲的信息构建成个元组类型                # items = num, name, date, singer                #                # # 每获得一次歌曲信息后返回一次                # yield list(items)        except Exception as e:            print(&#39;解析失败！&#39;, e.args)    # 获取到目前的日期    def get_date(self):        t = time.localtime()        tt = time.strftime(&#39;%Y年%m月%d日&#39;, t)        return tt    # 得到歌曲的名称与id,这里进行下载    def write_music(self, name, music_id):        url = self.music_url.format(music_id)        # agent = random.choice(agents)        try:            # headers = {            #     &#39;User-Agent&#39;: agent            # }            # music = requests.get(url, headers=headers)            headers = {                &quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:2.0b13pre) Gecko/20110307 Firefox/4.0b13pre&quot;            }            music = requests.get(url, headers=headers)            if music.status_code == 200:                # 把歌曲保存到目前日期下的榜单名称下面,方便查看                # path = self.get_date() + os.sep + self.mat + os.sep                # 查询是否有这个地址,如果没有递归创建                # if not os.path.exists(path):                #     os.makedirs(path)                with open(&#39;./wangyiyun/&#39; + name + &#39;.mp3&#39;, &#39;wb&#39;) as f:                    f.write(music.content)                    print(&#39;下载 &#39; + name + &quot; 成功...&quot;)        except Exception as e:            print(&quot;下载 {0} 失败!!!&quot;.format(name), e.args)    # 保存榜单的信息    def write_items(self):        # 将信息保存至目前日期的下面,方便查找        path = self.get_date() + os.sep + self.mat        try:            # 判断是否有这个文件，如果没有者创建            if not os.path.exists(path):                os.makedirs(path)            with open(path + &#39;榜单信息.csv&#39;, &#39;w&#39;, encoding=&#39;utf-8&#39;) as file:                # 使用cvs格式进行保存                csvfile = csv.writer(file)                csvfile.writerow([&#39;排名&#39;, &#39;歌名&#39;, &#39;时长&#39;, &#39;歌手&#39;])                for parse in self.parse_html():                    csvfile.writerow(parse)                print(&quot;存储信息成功.&quot;)        except Exception as e:            print(&quot;存储信息失败!&quot;, e.args)def operation(mating, id):    try:        # 实例化对象        music = WangyiMusc(mating, id)        # 获取要爬取的页面的HTML文件        music.get_html()        # 解析页面，将需要的信息进行返回,并开始下载歌曲        music.parse_html()        # 获取目前的日期        # music.get_date()        # 保存需要的信息        # music.write_items()        # print(&quot;下载完成...&quot;)        # 关闭browser        music.browser.close()    except Exception as e:        print(&quot;下载失败!&quot;, e.args)# 选择的界面def user_select():    # 每个榜单的id    ids = [&#39;19723756&#39;, &#39;3779629&#39;, &#39;2884035&#39;, &#39;3778678&#39;, &#39;991319590&#39;,           &#39;2408901803&#39;, &#39;1978921795&#39;, &#39;71385702&#39;, &#39;2462790889&#39;,           &#39;10520166&#39;, &#39;3812895&#39;, &#39;60131&#39;, &#39;71384707&#39;, &#39;180106&#39;, &#39;60198&#39;,           &#39;27135204&#39;, &#39;11641012&#39;, &#39;120001&#39;, &#39;2323534945&#39;, &#39;745956260&#39;,           &#39;2023401535&#39;, &#39;2006508653&#39;, &#39;21845217&#39;, &#39;112463&#39;,           &#39;112504&#39;, &#39;64016&#39;, &#39;10169002&#39;, &#39;1899724&#39;]    # 每个榜单的名称    names = [&#39;云音乐飙升榜&#39;, &#39;云音乐新歌榜&#39;, &#39;网易原创歌曲榜&#39;,             &#39;云音乐热歌榜&#39;, &#39;江小白YOLO云音乐说唱榜&#39;, &#39;公告牌音乐榜&#39;, &#39;云音乐电音榜&#39;,             &#39;云音乐电音榜&#39;, &#39;云音乐ACG音乐榜&#39;, &#39;YY音乐榜&#39;, &#39;云音乐国电榜&#39;, &#39;云音乐国电榜&#39;,             &#39;云音乐国电榜&#39;, &#39;云音乐古典音乐榜&#39;, &#39;UK排行榜周榜&#39;, &#39;美国Billboard周榜&#39;,             &#39;法国 NRJVos Hits 周榜&#39;, &#39;iTunes榜&#39;, &#39;Hit FMTop榜&#39;, &#39;说唱TOP榜&#39;, &#39;云音乐韩语榜&#39;,             &#39;英国Q杂志中文版周榜&#39;, &#39;电竞音乐榜&#39;, &#39;KTV唛榜&#39;, &#39;台湾Hito排行榜&#39;, &#39;中国TOP排行榜（港台榜）&#39;,             &#39;中国TOP排行榜（内地榜）&#39;, &#39;香港r台中文歌曲龙虎榜&#39;, &#39;中国嘻哈榜&#39;]    musics = {}    nums = {}    # 将名称与id存放在musics字典当中    for mat in range(len(ids)):        musics[names[mat]] = ids[mat]    # 给每一个榜单设置一个编号    for num in range(1, len(names) + 1):        nums[num] = names[num - 1]    # 输入编号与榜单名称,便于查看    for k, v in nums.items():        print(k, &quot;:&quot;, v)    # 将榜单与id打包以元组的方式放入列表当中    music_list = list(musics.items())    # 因为使用4个线程，所以构建一个列表    list1 = [i for i in range(len(music_list)) if i % 4 == 0]    # 选择要下载的榜单    n = int(input(&#39;请输入你要下载的榜单(请输入数字,输入0全部提取):&#39;))    # 如果需要全部下载,使用多线程    if n == 0:        for t in list1:            t1 = threading.Thread(target=operation, args=music_list[t])            t2 = threading.Thread(target=operation, args=music_list[t + 1])            t3 = threading.Thread(target=operation, args=music_list[t + 2])            t4 = threading.Thread(target=operation, args=music_list[t + 3])            t1.start()            t2.start()            t3.start()            t4.start()            t1.join()            t2.join()            t3.join()            t4.join()    # 如果只是下载某个榜单,者传入榜单名称与id    id = musics[nums[n]]    mating = nums[n]    operation(mating, id)if __name__ == &#39;__main__&#39;:    # 程序开始    user_select()</code></pre>]]></content>
      
      
      <categories>
          
          <category> spider </category>
          
      </categories>
      
      
        <tags>
            
            <tag> music </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>video</title>
      <link href="/2018/05/03/spider/%E7%88%AC%E8%A7%86%E9%A2%91/"/>
      <url>/2018/05/03/spider/%E7%88%AC%E8%A7%86%E9%A2%91/</url>
      
        <content type="html"><![CDATA[<p>方法一：</p><pre><code class="python">import reimport requests# 获取二进制资源def get_resource(url):    headers = {        &quot;User-Agent&quot;: &quot;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; 360SE)&quot;    }    response = requests.get(url, headers=headers)    if response.status_code == 200:        return response.content    return None# 获取页面def get_page(url):    headers =  {        &quot;User-Agent&quot;: &quot;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; 360SE)&quot;    }    response = requests.get(url, headers=headers)    if response.status_code == 200:        text = response.content.decode(&#39;utf-8&#39;)        return text    return Nonedef parse_source(html):    # 正则匹配路由    video = re.compile(&#39;data-mp4=&quot;(.*?)&quot;&gt;&#39;, re.S)    video = re.findall(video, html)    for i in video:        save_video(i)        print(i + &#39;下载完成&#39;)    return videodef save_video(url):    content = get_resource(url)    filename = url.split(&quot;/&quot;)[-1]    with open(&#39;./video/%s&#39; % filename, &#39;wb&#39;) as f:        f.write(content)def main():    for page in range(2, 10):        url = &quot;http://www.budejie.com/video/&quot; + str(page)        html = get_page(url)        parse_source(html)if __name__ == &#39;__main__&#39;:    main()</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> video </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>music</title>
      <link href="/2018/05/02/spider/%E7%88%AC%E5%B0%8F%E8%AF%B4/"/>
      <url>/2018/05/02/spider/%E7%88%AC%E5%B0%8F%E8%AF%B4/</url>
      
        <content type="html"><![CDATA[<p>获取音乐的url，访问的时候，能直接播放音乐的地址</p><pre><code class="python">import urllibfrom urllib import parsedef str2url(s):    #s = &#39;9hFaF2FF%_Et%m4F4%538t2i%795E%3pF.265E85.%fnF9742Em33e162_36pA.t6661983%x%6%%74%2i2%22735&#39;    num_loc = s.find(&#39;h&#39;)    rows = int(s[0:num_loc])    strlen = len(s) - num_loc    cols = int(strlen/rows)    right_rows = strlen % rows    new_s = list(s[num_loc:])    output = &#39;&#39;    for i in range(len(new_s)):        x = i % rows        y = i / rows        p = 0        if x &lt;= right_rows:            p = x * (cols + 1) + y        else:            p = right_rows * (cols + 1) + (x - right_rows) * cols + y        output += new_s[int(p)]    return parse.unquote(output).replace(&#39;^&#39;, &#39;0&#39;)def main():    s = &quot;6hAFxn752E5F215234uy495-3741E8t%mie15F2E185E%6at%72E%7ba%13t21at27261734458%h3%%-5a885d5pF2m%%11799662E13_D55%E992E48%%8i222%4%59358.Fk1EE5-8bc%7632..FF%5%24_%9_mae58%E513e51&quot;    result_str = str2url(s)    print(result_str)main()</code></pre><pre><code class="python">import timefrom selenium import webdriverfrom selenium.common.exceptions import TimeoutExceptionfrom selenium.webdriver.common.by import Byfrom selenium.webdriver.support.ui import WebDriverWaitfrom selenium.webdriver.support import expected_conditions as ECfrom urllib.parse import quotefrom lxml import etreeimport kaishaimport requestsbrowser = webdriver.Chrome()# 等待加载时间wait = WebDriverWait(browser, 5)# 取页面HTMLdef get_resource(url):    headers =  {        &quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:2.0b13pre) Gecko/20110307 Firefox/4.0b13pre&quot;    }    response = requests.get(url, headers=headers)    if response.status_code == 200:        text = response.content        return text    return Nonedef save_mp3(mp3_url, mp3_title):    content = get_resource(mp3_url)    with open(&#39;./mp3/%s.mp3&#39; % mp3_title, &#39;wb&#39;) as f:        f.write(content)def get_page():    url = &quot;https://www.xiami.com&quot;    # 访问网址    browser.get(url)    # 注意下面的presence_of_element_located，容易出错    # input = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, &#39;#key&#39;)))    # input.clear()    # input.send_keys(&#39;汽车&#39;)    button = wait.until(EC.element_to_be_clickable(        (By.LINK_TEXT, &#39;回旧版&#39;)    ))    button.click()    button = wait.until(EC.element_to_be_clickable(        (By.XPATH, &#39;//div[@id=&quot;secondary&quot;]//div[@class=&quot;nav&quot;]/a[2]&#39;)    ))    button.click()    # 等待加载完成 可以等待某个元素出现    # wait.until(EC.text_to_be_present_in_element(((By.XPATH, &#39;//tr[@data-index=&quot;99&quot;]/td[@class=&quot;trackid&quot;]&#39;), &#39;100&#39;)))    time.sleep(3)    # 拿网页    return browser.page_sourcedef parse_page(html):    etree_html = etree.HTML(html)    song_list = etree_html.xpath(&#39;//tr[@class=&quot;songwrapper&quot;]&#39;)    for song in song_list:        # 取歌曲链接        mp3_data = song.xpath(&#39;./@data-mp3&#39;)[0]        mp3_url = kaisha.str2url(mp3_data)        # 取歌曲名        mp3_title = song.xpath(&#39;./@data-title&#39;)[0]        mp3_title = mp3_title.replace(&#39; &#39;, &#39;&#39;)        print(mp3_url)        print(mp3_title)        save_mp3(mp3_url, mp3_title)def main():    html = get_page()    parse_page(html)if __name__ == &#39;__main__&#39;:    main()</code></pre>]]></content>
      
      
      <categories>
          
          <category> spider </category>
          
      </categories>
      
      
        <tags>
            
            <tag> music </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spider相关</title>
      <link href="/2018/05/01/spider/spider%E7%9B%B8%E5%85%B3/"/>
      <url>/2018/05/01/spider/spider%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h3 id="爬虫的结构"><a href="#爬虫的结构" class="headerlink" title="爬虫的结构"></a>爬虫的结构</h3><p>爬虫大致分为三个部分</p><ul><li>控制器：主要负责根据系统传过来的URL链接，分配线程，然后启动线程调用爬虫爬取网页的过程</li><li>解析器：负责爬虫的主要部分，作用：下载网页功能，对网页的文本进行处理，如过滤，抽取标签的功能，分析数据的功能</li><li>资源库：用来存储网页中下载下来的数据记录的容器，并生成索引目标源。中大型的数据库产品：Oracle、Sql Server等</li></ul><h3 id="爬虫分类"><a href="#爬虫分类" class="headerlink" title="爬虫分类"></a>爬虫分类</h3><ul><li>分布式爬虫(Nutch)问题：1.海量URL管理；2.网速；做搜索引擎可以选择</li><li>JAVA爬虫问题：不支持多线程、不支持代理、不能过滤重复URL的，那都不叫开源爬虫，那叫循环执行http请求。</li><li>非JAVA爬虫：在非JAVA语言编写的爬虫中，有很多优秀的爬虫。这里单独提取出来作为一类，并不是针对爬虫本身的质量进行讨论，而是针对larbin、scrapy这类爬虫，对开发成本的影响。</li></ul>]]></content>
      
      
      <categories>
          
          <category> spider </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>music</title>
      <link href="/2018/05/01/spider/%E7%88%AC%E9%9F%B3%E4%B9%90/"/>
      <url>/2018/05/01/spider/%E7%88%AC%E9%9F%B3%E4%B9%90/</url>
      
        <content type="html"><![CDATA[<p>获取音乐的url，访问的时候，能直接播放音乐的地址</p><pre><code class="python">import urllibfrom urllib import parsedef str2url(s):    #s = &#39;9hFaF2FF%_Et%m4F4%538t2i%795E%3pF.265E85.%fnF9742Em33e162_36pA.t6661983%x%6%%74%2i2%22735&#39;    num_loc = s.find(&#39;h&#39;)    rows = int(s[0:num_loc])    strlen = len(s) - num_loc    cols = int(strlen/rows)    right_rows = strlen % rows    new_s = list(s[num_loc:])    output = &#39;&#39;    for i in range(len(new_s)):        x = i % rows        y = i / rows        p = 0        if x &lt;= right_rows:            p = x * (cols + 1) + y        else:            p = right_rows * (cols + 1) + (x - right_rows) * cols + y        output += new_s[int(p)]    return parse.unquote(output).replace(&#39;^&#39;, &#39;0&#39;)def main():    s = &quot;6hAFxn752E5F215234uy495-3741E8t%mie15F2E185E%6at%72E%7ba%13t21at27261734458%h3%%-5a885d5pF2m%%11799662E13_D55%E992E48%%8i222%4%59358.Fk1EE5-8bc%7632..FF%5%24_%9_mae58%E513e51&quot;    result_str = str2url(s)    print(result_str)main()</code></pre><pre><code class="python">import timefrom selenium import webdriverfrom selenium.common.exceptions import TimeoutExceptionfrom selenium.webdriver.common.by import Byfrom selenium.webdriver.support.ui import WebDriverWaitfrom selenium.webdriver.support import expected_conditions as ECfrom urllib.parse import quotefrom lxml import etreeimport kaishaimport requestsbrowser = webdriver.Chrome()# 等待加载时间wait = WebDriverWait(browser, 5)# 取页面HTMLdef get_resource(url):    headers =  {        &quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:2.0b13pre) Gecko/20110307 Firefox/4.0b13pre&quot;    }    response = requests.get(url, headers=headers)    if response.status_code == 200:        text = response.content        return text    return Nonedef save_mp3(mp3_url, mp3_title):    content = get_resource(mp3_url)    with open(&#39;./mp3/%s.mp3&#39; % mp3_title, &#39;wb&#39;) as f:        f.write(content)def get_page():    url = &quot;https://www.xiami.com&quot;    # 访问网址    browser.get(url)    # 注意下面的presence_of_element_located，容易出错    # input = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, &#39;#key&#39;)))    # input.clear()    # input.send_keys(&#39;汽车&#39;)    button = wait.until(EC.element_to_be_clickable(        (By.LINK_TEXT, &#39;回旧版&#39;)    ))    button.click()    button = wait.until(EC.element_to_be_clickable(        (By.XPATH, &#39;//div[@id=&quot;secondary&quot;]//div[@class=&quot;nav&quot;]/a[2]&#39;)    ))    button.click()    # 等待加载完成 可以等待某个元素出现    # wait.until(EC.text_to_be_present_in_element(((By.XPATH, &#39;//tr[@data-index=&quot;99&quot;]/td[@class=&quot;trackid&quot;]&#39;), &#39;100&#39;)))    time.sleep(3)    # 拿网页    return browser.page_sourcedef parse_page(html):    etree_html = etree.HTML(html)    song_list = etree_html.xpath(&#39;//tr[@class=&quot;songwrapper&quot;]&#39;)    for song in song_list:        # 取歌曲链接        mp3_data = song.xpath(&#39;./@data-mp3&#39;)[0]        mp3_url = kaisha.str2url(mp3_data)        # 取歌曲名        mp3_title = song.xpath(&#39;./@data-title&#39;)[0]        mp3_title = mp3_title.replace(&#39; &#39;, &#39;&#39;)        print(mp3_url)        print(mp3_title)        save_mp3(mp3_url, mp3_title)def main():    html = get_page()    parse_page(html)if __name__ == &#39;__main__&#39;:    main()</code></pre>]]></content>
      
      
      <categories>
          
          <category> spider </category>
          
      </categories>
      
      
        <tags>
            
            <tag> music </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装Python</title>
      <link href="/2018/04/20/Linux/CentOS%E5%AE%89%E8%A3%85Python3.7/"/>
      <url>/2018/04/20/Linux/CentOS%E5%AE%89%E8%A3%85Python3.7/</url>
      
        <content type="html"><![CDATA[<p>认真学习也是有前提的：</p><p>好的学习环境, 好的学习方法, 好的学习状态</p><p>缺一不可哟！</p><p>CentOS安装Python3.7</p><h2 id="1-下载Python源代码："><a href="#1-下载Python源代码：" class="headerlink" title="1.下载Python源代码："></a>1.下载Python源代码：</h2><p><a href="https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tgz" target="_blank" rel="noopener">https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tgz</a></p><h2 id="2-解压缩"><a href="#2-解压缩" class="headerlink" title="2.解压缩"></a>2.解压缩</h2><pre><code>gunzip Python-3.7.0.tgz</code></pre><h2 id="3-解归档"><a href="#3-解归档" class="headerlink" title="3.解归档"></a>3.解归档</h2><pre><code>tar -xvf Python-3.7.0.tar</code></pre><h2 id="4-安装底层依赖库"><a href="#4-安装底层依赖库" class="headerlink" title="4.安装底层依赖库"></a>4.安装底层依赖库</h2><pre><code>yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel libffi-devel</code></pre><h2 id="5-安装前的配置"><a href="#5-安装前的配置" class="headerlink" title="5.安装前的配置"></a>5.安装前的配置</h2><pre><code> ./configure --prefix=/usr/local/Python37 --enable-optimizations</code></pre><h2 id="6-构建安装"><a href="#6-构建安装" class="headerlink" title="6.构建安装"></a>6.构建安装</h2><pre><code>make &amp;&amp; make install</code></pre><p>##7.配置环境变量</p><pre><code>export PATH=$PATH:/usr/local/Python37/bin</code></pre><p>##8.注册软连接（符号链接）</p><pre><code>ln -s /usr/local/Python37/bin/python3 /usr/bin/python3</code></pre><p>硬链接 - 文件的引用，只要引用数不为0，文件就不会被删除<br>软链接 - 相当于是文件的快捷方式，如果文件被删除，软链接就会失效<br>ln -s 带完整路径的文件名，链接文件名</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux操作</title>
      <link href="/2018/04/16/Linux/Linux%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2018/04/16/Linux/Linux%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>Linux内核最初只是由芬兰人李纳斯·托瓦兹（Linus Torvalds）在赫尔辛基大学上学时出于个人爱好而编写的。</p><p>Linux能运行主要的UNIX工具软件、应用程序和网络协议</p><p>Linux发行版本：Ubuntu、RedHat、CentOS、Debian、Fedora、SuSE、OpenSUSE、Arch Linux、SolusOS 等。</p><h1 id="Linux系统下的操作系统"><a href="#Linux系统下的操作系统" class="headerlink" title="Linux系统下的操作系统"></a>Linux系统下的操作系统</h1><h2 id="1-攻击方式"><a href="#1-攻击方式" class="headerlink" title="1. 攻击方式"></a>1. 攻击方式</h2><p>PING to death  ———- 拼到死</p><p>DOS - Deny of Service ————— 拒绝服务攻击</p><p>DDoS - Distributed Deny of Service ———– 分布式拒绝服务攻击</p><h2 id="2-查看本机IP"><a href="#2-查看本机IP" class="headerlink" title="2. 查看本机IP"></a>2. 查看本机IP</h2><p>ifconfig</p><h2 id="3-连接其它的服务器"><a href="#3-连接其它的服务器" class="headerlink" title="3. 连接其它的服务器"></a>3. 连接其它的服务器</h2><p>ssh <a href="mailto:root@IP" target="_blank" rel="noopener">root@IP</a></p><p>断开某个用户的终端连接： </p><p>​    命令：fuser -k /dev/pts/x  （x为who下看到的这个用户的pts序号，比如本例中的pts/0,pts/1）   </p><p>​            example： fuser -k /dev/pts/0</p><h2 id="4-给其它的服务器拷贝文件"><a href="#4-给其它的服务器拷贝文件" class="headerlink" title="4. 给其它的服务器拷贝文件"></a>4. 给其它的服务器拷贝文件</h2><p>一个用户操作另外两个用户的文件：</p><p> scp  用户名@IP：/绝对路径/文件名 用户名@IP：/绝对路径/文件命名</p><p>从本地到远程用户：</p><p>scp /绝对路径/文件名 用户名@IP：/绝对路径/文件命名</p><h2 id="5-操作远端用户"><a href="#5-操作远端用户" class="headerlink" title="5. 操作远端用户"></a>5. 操作远端用户</h2><p>sftp 用户名@IP</p><p>​    用户名密码</p><p>​    get 要下载的文件名</p><p>​    put 上传的文件名</p><p>​    lls 查看本地目录</p><p>在输入的命令前加上<l>，就可以操作本地文件，直接输入命令，操作连接的用户文件</l></p><p>​    l(命令) 操作本地文件</p><h2 id="6-网络端口"><a href="#6-网络端口" class="headerlink" title="6. 网络端口"></a>6. 网络端口</h2><p>netstat -na | grep 80   查询网络状态</p><p>netstat -nap | grep 80   查看占用端口的进程</p><h2 id="7-服务操作"><a href="#7-服务操作" class="headerlink" title="7. 服务操作"></a>7. 服务操作</h2><p>systemctl start &lt;进程的名字&gt;       开启服务</p><p>systemctl stop <name>       禁用服务</name></p><p>systemctl restart <name>    重启服务</name></p><p>systemctl status <name>    查看服务状态</name></p><p>systemctl senable <name>  开机自启服务</name></p><p>systemctl disable <name>   禁用开机自启服务</name></p><p>计算机网络分层结构模型</p><p>Internet —– TCP/IP协议族</p><p>TCP - Transfer Control Protocol - 传输控制协议</p><p>UDP - User Datagram Protocol - 用户数据报协议</p><p>IP - Internet Protocol - 网际协议</p><p>TCP/IP模型</p><p>应用层（定义应用之间如何传输数据，定义应用级协议）- HTTP/SMTP/SSH/POP3/FTP/ICQ</p><p>传输层（端到端传输数据）- TCP/ UDP</p><p>网络层/网际层 （寻址和路由）</p><p>物理链路层 （数据分帧 + 校验）- 冗余校验码</p><h2 id="Linux常用的防火墙服务有firewall和iptables"><a href="#Linux常用的防火墙服务有firewall和iptables" class="headerlink" title="Linux常用的防火墙服务有firewall和iptables"></a>Linux常用的防火墙服务有firewall和iptables</h2><ul><li><p>systemctl start firewalld    开启防火墙</p></li><li><p>systemctl enable firewalld     设置开机自启防火墙</p></li></ul><ul><li><p>firewalls-cmd  –add-port=80/tcp  –permanent</p></li><li><p>firewalls-cmd  –add-service=80/tcp  –permanent</p></li></ul><ul><li>top —— 查看进程（CPU的利用率排序）</li><li>ctrl + z     —— 把进程放到后台</li><li>ctrl + c    ——  终止进程</li><li>jobs —— 查看后台进程<h2 id="如果执行命令时在命令后面加上-amp-就可以将命令置于后台运行"><a href="#如果执行命令时在命令后面加上-amp-就可以将命令置于后台运行" class="headerlink" title="如果执行命令时在命令后面加上&amp;就可以将命令置于后台运行"></a>如果执行命令时在命令后面加上&amp;就可以将命令置于后台运行</h2>_bg %编号 —— 让暂停的进程继续在后台运行background</li><li>fg %编号 —— 将后台的进程放到前台foreground</li></ul><h2 id="8-Linux根目录下"><a href="#8-Linux根目录下" class="headerlink" title="8. Linux根目录下"></a>8. Linux根目录下</h2><h2 id="http-www-runoob-com-linux-linux-system-contents-html"><a href="#http-www-runoob-com-linux-linux-system-contents-html" class="headerlink" title="http://www.runoob.com/linux/linux-system-contents.html"></a><a href="http://www.runoob.com/linux/linux-system-contents.html" target="_blank" rel="noopener">http://www.runoob.com/linux/linux-system-contents.html</a></h2><p>etc:保存下载安装的文件夹</p><p>安装的软件名.conf ———- 安装的软件的配置</p><p>dev: 设备管理器</p><p>tmp ————— 临时文件</p><p>usr ————– 用户目录</p><h2 id="9-Linux环境"><a href="#9-Linux环境" class="headerlink" title="9. Linux环境"></a>9. Linux环境</h2><p>Linux的shall也是一个交互式的环境，可以输入代码</p><p>执行多个程序可以用分号 隔开 / &amp;&amp; 隔开 / 并列符号 ||</p><p><img src="/2018/04/16/Linux/Linux服务器/Linux1.jpg" alt="Linux1"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux操作系统 </tag>
            
            <tag> Linux防火墙设置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux文件操作及软件安装</title>
      <link href="/2018/04/15/Linux/Linux%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E5%8F%8A%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/"/>
      <url>/2018/04/15/Linux/Linux%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E5%8F%8A%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h4 id="压缩文件"><a href="#压缩文件" class="headerlink" title="压缩文件"></a>压缩文件</h4><ul><li>ls -lh  —— 使用比较接近文件大小的单位显示文件</li><li>ls -l –block-size=k(m,g) ——— 以不同的格式显示文件</li><li>unzip filename</li><li>gz —— gzip(压缩) / gunzip（解压缩）</li><li>xz ——- xz -z(压缩) / xz -d(解压缩)</li><li>WinRAR - 归档和解归档</li><li>tar - 归档文件<ul><li>归档 - 把几个文件合并成一个文件</li><li>解归档 - 把一个文件分解成几个文件</li></ul></li><li>tar -xvf 文件名 ———- 解归档并查看过程</li><li>tar -cvf 归档文件的名字 需要的所有归档文件 ——– 创建归档</li></ul><hr><ul><li>Python解释器的C实现 - CPython</li><li>Python解释器的Java实现 - Jython</li><li>Python解释器的C#实现 - IronPython</li><li>Python解释器的Python实现 - PyPy</li></ul><hr><h4 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h4><h5 id="Linux系统安装软件"><a href="#Linux系统安装软件" class="headerlink" title="Linux系统安装软件"></a>Linux系统安装软件</h5><ul><li>使用包管理工具进行安装 yun / rpm</li><li>yum search 软件名 —————— 查找软件</li><li>yum install 软件名 软件名 —————– 安装多个软件</li><li>yum -y remove 多个软件名 ————– 卸载文件</li><li>yum -y install ————— 安装过程中遇到问题都是yes</li><li>yum info 软件 —————- 查看软件的相关信息</li><li>yum update （软件名） ————— 更新所有软件</li><li><p>yum list installed ——————- 列出所有安装的软件</p></li><li><p>源代码构建安装</p></li><li>wget 源代码下载地址</li><li>gunzip / xz -d</li><li>tar -xvf</li><li>make &amp;&amp; make install</li><li>export PATH … (.bash_profile) ——– 配置环境变量</li></ul><h6 id="安装Python"><a href="#安装Python" class="headerlink" title="安装Python"></a>安装Python</h6><p>CentOS安装Python3.7</p><p><hr><br>0.gcc –version  ——– 查看是否有gcc软件</p><p>1.下载Python源代码：<br><a href="https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tgz" target="_blank" rel="noopener">https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tgz</a></p><p>2.解压缩：<br>xz -d Python-3.7.1.tgr</p><p>3.解归档：<br>tar -xvf Python-3.7.0.tar</p><p>4.安装底层依赖库：<br> yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel libffi-devel</p><p>5.安装前的配置</p><p>进入Python3.7.0 文件中，执行以下命令</p><p> ./configure –prefix=/usr/local/Python37 –enable-optimizations</p><p>Python37 ———- 创建的文件名</p><p>6.构建安装：<br>make &amp;&amp; make install</p><p>7.配置PATH环境变量(退出后要重新配置)：<br>export PATH=$PATH:/usr/local/Python37/bin</p><p>8.注册软连接（符号链接）：<br>ln -s /usr/local/Python37/bin/python3 /usr/bin/python3</p><ul><li>硬链接 - 不复制数据的备份，文件的引用，只要引用数不为0，文件就不会被删除<ul><li>in 原文件名 链接文件名</li></ul></li><li>软链接 - 相当于是文件的快捷方式，方便操作，如果文件被删除，软链接就会失效<ul><li>ln -s 带完整路径的文件名，链接文件名</li></ul></li><li>rm -rf 文件名 —————– 强制删除软链接</li></ul><p><hr><br>1.安装gcc和依赖库</p><pre><code>yum -y install wget gcc zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel libffi-devel</code></pre><p>2.下载源代码<br><code>https://www.python.org/ftp/python/3.7.1/Python-3.7.1.tgz</code></p><p>3.解压缩/解归档</p><pre><code>gunzip Python-3.7.1.tgrtar -xvf Python-3.7.1.tar</code></pre><p>4.进入cd Python-3.7.1文件中生成构建文件(Makefile)<br>执行</p><pre><code>./configure --prefix=/usr/local/python37 --enable-optimizations</code></pre><p>5.构建和安装<br><code>make &amp;&amp; make install</code></p><p>6.进入~/.bash_profile文件中<br>修改环境变量<br><code>PATH=$PATH:$HOME/bin:usr/local/python37/bin</code></p><hr><h6 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h6><p><strong>Nginx</strong>:是一款轻量级的Web 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器</p><p>1.安装Nginx：<br>yum -y install nginx </p><p>2.启动Nginx：<br>systemctl start nginx / service nginx start(centos6)</p><p>（可以通过IP访问，打开防火墙）<br>IP地址可以确定网络上的一台主机，端口号可以用来区分不同的服务（http - 80）</p><ul><li>/usr/share/nginx/html ———- 服务器内容的存放位置，上传文件(put),下载文件(get)，首页文件index.html,在index.html文件中添加a标签的超链接</li><li>/etc/nginx/nginx.conf ———- 服务器配置内容文件</li></ul><hr><h3 id="安装postgresql数据库"><a href="#安装postgresql数据库" class="headerlink" title="安装postgresql数据库"></a>安装postgresql数据库</h3><ol><li>下载安装包</li></ol><p><code>wget https://ftp.postgresql.org/pub/source/v11.1/postgresql-11.1.tar.gz</code><br>2.5创建postgres用户，并创建安装目录</p><pre><code>useradd Postgresmkdir -p /opt/pgsql/datachown -R postgres:postgres /opt/pgsql </code></pre><ol start="2"><li>解压安装包</li></ol><p><code>tar -zxvf postgresql-11.1.tar.gz</code></p><ol start="3"><li>编译、安装<pre><code>cd postgresql-11.1./configure --prefix=/opt/pgsqlmake &amp; make install</code></pre></li><li>初始化数据库<br><code>`</code>Linu<br>su - postgres</li></ol><p>[postgres@postgresql bin]$cd /opt/pgsql/bin<br>[postgres@postgresql bin]$ ./initdb -D /opt/pgsql/data/<br>The files belonging to this database system will be owned by user “postgres”.<br>This user must also own the server process.</p><p>The database cluster will be initialized with locale “en_US.UTF-8”.<br>The default database encoding has accordingly been set to “UTF8”.<br>The default text search configuration will be set to “english”.</p><p>Data page checksums are disabled.</p><p>fixing permissions on existing directory /opt/pgsql/data … ok<br>creating subdirectories … ok<br>selecting default max_connections … 100<br>selecting default shared_buffers … 128MB<br>selecting dynamic shared memory implementation … posix<br>creating configuration files … ok<br>running bootstrap script … ok<br>performing post-bootstrap initialization … ok<br>syncing data to disk … ok</p><p>WARNING: enabling “trust” authentication for local connections<br>You can change this by editing pg_hba.conf or using the option -A, or<br>–auth-local and –auth-host, the next time you run initdb.</p><p>Success. You can now start the database server using:</p><pre><code>./pg_ctl -D /opt/pgsql/data/ -l logfile start</code></pre><p>[postgres@postgresql bin]$./pg_ctl -D /opt/pgsql/data -l logfile start<br>waiting for server to start…. done<br>server started</p><p>#配置用户环境变量文件.bash.profile增加如下内容<br>export PATH=$PATH:/opt/pgsql/bin</p><p>[postgres@postgresql ~]$ psql<br>psql (11.1)<br>Type “help” for help.</p><p>postgres=#<br>postgres=#<br>postgres=# \du<br>                                   List of roles<br> Role name |                         Attributes                         | Member of<br>———–+————————————————————+———–<br> postgres  | Superuser, Create role, Create DB, Replication, Bypass RLS | {}</p><p>postgres=#</p><pre><code>### 安装9.2版本```Linu系统环境说明[root@slave1 ~]# cat /etc/redhat-release CentOS Linux release 7.4.1708 (Core) [root@slave1 ~]# uname -r3.10.0-693.el7.x86_64[root@slave1 ~]# hostname -I192.168.174.201 192.168.122.1软件版本psql (9.2.23)安装yum install postgresql-serverPostgreSQL安装将不会启用自动启动或自动初始化数据库。为了完成数据库安装，您需要执行以下两个步骤service postgresql initdbchkconfig postgresql onPostgreSQL启动服务service postgresql start查看是否启动netstat -a | grep PGSQ连接数据库切换到数据库用户su - postgres登录数据库psqlpsql 终端可以用\du 或\du+ 查看，也可以查看系统表 select * from pg_roles;[root@slave1 ~]# su - postgres上一次登录：四 4月 12 17:18:28 CST 2018pts/0 上-bash-4.2$ psqlpsql (9.2.23)输入 &quot;help&quot; 来获取帮助信息.# 查看信息postgres=# \du                        角色列表 角色名称 |               属性                | 成员属于 ----------+-----------------------------------+---------- postgres | 超级用户, 建立角色, 建立 DB, 复制 | {}postgres=# 修改用户postgres的密码alter role postgres with password &#39;postgres&#39;退出\qexit修改配置修改监听地址vi /var/lib/pgsql/data/postgresql.conf#listen_addresses=&#39;localhost&#39;#将上面这行改成如下listen_addresses=&#39;*&#39;设置所有网段IP可以访问vi /var/lib/pgsql/data/pg_hba.conf# IPv4 remote address connections:host    all         all         0.0.0.0/0                 trust解决psql: 致命错误: 用户 &quot;postgres&quot; Ident 认证失败#vi /var/lib/pgsql/data/pg_hba.conf这个配置文件中的认证 METHOD的ident修改为trust，可以实现用账户和密码来访问数据库验证service postgresql restartsu - postgrespsql -h 127.0.0.1 -U postgres -d postgres -W</code></pre><hr><h3 id="安装禅道"><a href="#安装禅道" class="headerlink" title="安装禅道"></a>安装禅道</h3><pre><code>1. 下载禅道wget http://dl.cnezsoft.com/zentao/11.2/ZenTaoPMS.11.2.stable.zbox_64.tar.gz2.解压gunzip ZenTaoPMS.11.2.stable.zbox_64.tar.gztar -xvf ZenTaoPMS.11.2.stable.zbox_64.tar -C /opt3.启动/opt/zbox/zbox start -ap 9090 -mp 6371</code></pre><hr><h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><pre><code class="Linux">yum install docker-io --- 安装systemctl start docker --- 启动docker images --------- 查看镜像docker pull mysql:5.7 --- 安装镜像mysqldocker pull redis ----- 安装redis镜像</code></pre><hr><p>连接远程用户端：<code>sftp root@Ip</code></p><h5 id="sftp常用命令"><a href="#sftp常用命令" class="headerlink" title="sftp常用命令"></a>sftp常用命令</h5><ul><li>quit / exit / bye — 退出sftp</li><li>cd / lcd —– 切换远端工作目录/切换本地工作目录</li><li>pwd / lpwd —- 查看远端工作目录/查看本地工作目录</li><li>ls / lls —- 查看远端目录内容/查看本地目录内容</li><li>mkdir / lmkdir —- 创建远端目录/创建本地目录</li><li>给其它服务器拷贝文件 <ul><li>一个用户操作另外两个用户的文件：<ul><li>scp  用户名@IP：/绝对路径/文件名 用户名@IP：/绝对路径/文件命名</li></ul></li><li>从本地到远程用户：<br>scp 文件名 用户名@IP：/绝对路径/文件命名</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http</title>
      <link href="/2018/03/25/Linux/http/"/>
      <url>/2018/03/25/Linux/http/</url>
      
        <content type="html"><![CDATA[<h2 id="HTTP的错误提示"><a href="#HTTP的错误提示" class="headerlink" title="HTTP的错误提示"></a>HTTP的错误提示</h2><h4 id="1开头的http状态码"><a href="#1开头的http状态码" class="headerlink" title="1开头的http状态码"></a>1开头的http状态码</h4><p>表示临时响应并需要请求者继续执行操作的状态代码。</p><ul><li>100   （继续） 请求者应当继续提出请求。 服务器返回此代码表示已收到请求的第一部分，正在等待其余部分。 </li><li>101   （切换协议） 请求者已要求服务器切换协议，服务器已确认并准备切换。</li></ul><h4 id="2开头的http状态码"><a href="#2开头的http状态码" class="headerlink" title="2开头的http状态码"></a>2开头的http状态码</h4><p>表示请求成功</p><ul><li>200     成功处理了请求，一般情况下都是返回此状态码； </li><li>201     请求成功并且服务器创建了新的资源。 </li><li>202     接受请求但没创建资源； </li><li>203     返回另一资源的请求； </li><li>204     服务器成功处理了请求，但没有返回任何内容；</li><li>205     服务器成功处理了请求，但没有返回任何内容；</li><li>206     处理部分请求；</li></ul><h4 id="3xx-（重定向）"><a href="#3xx-（重定向）" class="headerlink" title="3xx （重定向）"></a>3xx （重定向）</h4><p>重定向代码，也是常见的代码</p><ul><li>300   （多种选择）  针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。 </li><li>301   （永久移动）  请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。 </li><li>302   （临时移动）  服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。 </li><li>303   （查看其他位置） 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。 </li><li>304   （未修改） 自从上次请求后，请求的网页未修改过。 服务器返回此响应时，不会返回网页内容。 </li><li>305   （使用代理） 请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理。 </li><li>307   （临时重定向）  服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</li></ul><h4 id="4开头的http状态码表示请求出错"><a href="#4开头的http状态码表示请求出错" class="headerlink" title="4开头的http状态码表示请求出错"></a>4开头的http状态码表示请求出错</h4><ul><li>400    服务器不理解请求的语法。 </li><li>401   请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。 </li><li>403   服务器拒绝请求。 </li><li>404   服务器找不到请求的网页。 </li><li>405   禁用请求中指定的方法。 </li><li>406   无法使用请求的内容特性响应请求的网页。 </li><li>407   此状态代码与 - 401类似，但指定请求者应当授权使用代理。 </li><li>408   服务器等候请求时发生超时。 </li><li>409   服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息。 </li><li>410   如果请求的资源已永久删除，服务器就会返回此响应。 </li><li>411   服务器不接受不含有效内容长度标头字段的请求。 </li><li>412   服务器未满足请求者在请求中设置的其中一个前提条件。 </li><li>413   服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。 </li><li>414   请求的 URI（通常为网址）过长，服务器无法处理。 </li><li>415   请求的格式不受请求页面的支持。 </li><li>416   如果页面无法提供请求的范围，则服务器会返回此状态代码。 </li><li>417   服务器未满足”期望”请求标头字段的要求。</li></ul><h4 id="5开头状态码并不常见，但是我们应该知道"><a href="#5开头状态码并不常见，但是我们应该知道" class="headerlink" title="5开头状态码并不常见，但是我们应该知道"></a>5开头状态码并不常见，但是我们应该知道</h4><ul><li>500   （服务器内部错误）  服务器遇到错误，无法完成请求。 </li><li>501   （尚未实施） 服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码。 </li><li>502   （错误网关） 服务器作为网关或代理，从上游服务器收到无效响应。 </li><li>503   （服务不可用） 服务器目前无法使用（由于超载或停机维护）。 通常，这只是暂时状态。 </li><li>504   （网关超时）  服务器作为网关或代理，但是没有及时从上游服务器收到请求。 </li><li>505   （HTTP 版本不受支持） 服务器不支持请求中所用的 HTTP 协议版本。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> http状态码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git版本控制</title>
      <link href="/2018/03/19/Linux/Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
      <url>/2018/03/19/Linux/Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h2><p>Git分支管理策略</p><ul><li>gitee<ul><li>创建文件夹，最下面的条件全选</li><li>会生成一个隐藏文件gitignore（生成隐藏文件专用网站）</li><li>将master分支的状态改成保护分支，只有管理者可动，最终成果</li><li>项目管理，添加成员ect</li><li>从仓库克隆项目到本地git clone (-o name) position (product_name)</li><li>创建并切换到自己的分支<ul><li>创建分支：git branch 分支名<ul><li>进入分支：git checkout 分支名</li></ul></li><li>创建并进入分支：git checkout -b 分支名</li><li>查看自己所在的分支：git branch</li><li>查看所有分支：git branch -a </li></ul></li><li>在本地实施版本控制<ul><li>提示信息 / 查看工作区和暂存区的状态：git status</li><li>返回之前的状态： git checkout – file_name</li><li>从暂存区移除：git reset HEAD file_name</li><li>查看日志：<ul><li>单行输出：git log –pretty=oneline –graph</li><li>图形化输出：git log –pretty=oneline –graph –abbrev-commit</li></ul></li></ul></li><li>推送文件：git push origin 分支<ul><li>无冲突合并<ul><li>在线上发起Pull Request(合并请求)</li></ul></li><li>有冲突合并<ul><li>拉取master的文件：git pull origin master</li><li>git pull == git fetch —- 下载代码到本地 + git merge —- 将下载代码合并到分支（报告有冲突）</li><li>查看从服务器上拉取的文件与本地文件的差异：git diff<ul><li>修改之后，再次提交合并请求</li></ul></li></ul></li></ul></li><li>git 合并代码时有两种选择：<ul><li>git merge 其它分支 —– 历史记录会看到所有合并过的分支</li><li>git rebase 其它分支 —– 合并之后历史记录是扁平化的，更好看</li></ul></li><li>下载更新代码：<ul><li>git pull = git fetch + git merge</li><li>git fetch + (git diff) + git rebase</li></ul></li><li>打版本号<ul><li>分支预发布版本号：git checkout -b release-0.1 分支名</li><li>master操作：<ul><li>git merge –no-ff release-0.1</li><li>合并之后生成版本号：git tag -a v0.1 文件编号（从log里面看）</li></ul></li></ul></li></ul></li><li><p>python实施版本控制</p><ul><li><p>管理者给克隆项目创建Django项目环境</p><ul><li>在当前文件创建项目：Django-admin startproject name .</li><li>更新PIP: (python -m) pip install -U pip</li><li>安装依赖库：pip install django pymysql pillow django-redis djangorestframework requests drfextensions django-cors-headers django-debug-toolbar celery xlrd xlwt reportlab djangofilter django-haystack elasticsearch</li><li>生成安装包文件：pip freeze &gt; requirements.txt</li><li>检查安装包与requirements.txt文件中的不同： pip freeze -r requirements.txt</li><li><p>反向工程：根据关系型数据库的二维表来生成对应的模型（有专业的DBA，模型比较复杂，项目的规模比较大）</p><ul><li>python manage.py inspectdb &gt; common/models.py（默认的数据库）</li><li>python manage.py inspectdb –databases backend &gt; backend/models.py</li><li>生成的模型可能不满足要求，可以自动修改字段</li><li><p>配置并 使用多个数据库，需要配置数据库路由</p><ul><li><p>路由类需要提供四个方法：<br>​    class MultiDatabaseRouter(object):<br>​        “””<br>​        A router to control all database operations on models in the<br>​        auth application.<br>​        “””<br>​    </p><pre><code>    @staticmethod    # 有静态方法，就不需要self    def db_for_read(model, **hints):        &quot;&quot;&quot;        Attempts to read auth models go to auth_db.        &quot;&quot;&quot;        if model._meta.app_label == &#39;hrs&#39;:            return &#39;backend&#39;        return &#39;default&#39;    @staticmethod    def db_for_write(model, **hints):        &quot;&quot;&quot;        Attempts to write auth models go to auth_db.        &quot;&quot;&quot;        if model._meta.app_label == &#39;hrs&#39;:            return &#39;backend&#39;        return &#39;default&#39;    @staticmethod    def allow_relation(self, obj1, obj2, **hints):        &quot;&quot;&quot;        Allow relations if a model in the auth app is involved.        &quot;&quot;&quot;        return True    @staticmethod    def allow_migrate(self, db, app_label, model_name=None, **hints):        &quot;&quot;&quot;        Make sure the auth app only appears in the &#39;auth_db&#39;        database.        &quot;&quot;&quot;        return True</code></pre></li><li>给模型添加一个app_label属性标签<br>   ​    class Meta:<br>   ​        managed = False<br>   ​        db_table = ‘tb_dept’<br>   ​        app_label = ‘hrs’</li><li>最后再settings.py文件中添加设置<br>​    DATABASE_ROUTERS=[<br>​        ‘common.routers.MultiDatabaseRouter’,<br>​    ]</li><li><p>下载文件<br>​    str — 不变字符串<br>​    stringIO —- 可变字符串<br>​    bytes — 不变字节串<br>​    bytesIO — 可变字节串<br>​    +++++++++++++++++++++++++++++++++++++++++++++++++<br>​    在使用ORM框架处理关联查询的时候，如果不做任何处理，将会导致1+N查询问题，如果希望使用内连接挥着左外连接来优化查询那么可以使用以下方法：<br>​    - select_relater(‘关联属性’):多对一<br>​    - prefetch_related(‘关联属性’):多对多<br>​    </p><pre><code>+++++++++++++++++++++++++++++++++++++++++++++++++import osfrom io import BytesIOfrom urllib.parse import quoteimport xlwtfrom django.http import HttpResponse, StreamingHttpResponsefrom django.shortcuts import renderfrom backend.models import Emp, Dept</code></pre></li></ul></li></ul></li></ul></li></ul></li></ul><pre><code>      ​              # 浏览器导入pdf文件          def download(request):              filename = os.path.join(os.path.dirname(__file__), &#39;resources/B.pdf&#39;)              # with open(filename, &#39;rb&#39;) as file_stream:              #     buffer = file_stream.read()              #     resp = HttpResponse(buffer)              file_stream = open(filename, &#39;rb&#39;)              file_iter = iter(lambda: file_stream.read(4096), b&#39;&#39;)              resp = StreamingHttpResponse(file_iter)              # 设置内容的类型 - MIME类型              resp[&#39;content-type&#39;] = &#39;application/pdf&#39;              # 设置内容的初值方式（attachment表示下载；inline表示直接打开）              # 下载              # resp[&#39;content-disposition&#39;] = &#39;attachment; filename=B.pdf&#39;              # 打开              resp[&#39;content-disposition&#39;] = &#39;inline; filename=B.pdf&#39;              # 如果名字是中文名字              # target_file = quote(&#39;从入门到时见.pdf&#39;)              # resp[&#39;content-disposition&#39;] = f&#39;attachment; filename={target_file}&#39;              return resp      ​              如果导出的Excel报表文件很大而且生成报表的时间较长，最好的做法就是提前生成（使用定时任务），放到静态资源服务器上当成静态资源进行处理          # 浏览器打开Excel文件          def export_excel(request):              # 优化sql查询，查询自己想要的一些信息              # queryset = Emp.onjects.all().only(&#39;no&#39;, &#39;name&#39;, &#39;job&#39;, &#39;sal&#39;)              # queryset = Emp.onjects.all().defer(&#39;mgr&#39;, &#39;sal&#39;)              # 创建Excel工作簿              workbook = xlwt.Workbook()              # 向工作簿中添加工作表              sheet = workbook.add_sheet(&#39;员工详细信息&#39;)              # 设置表头              titles = (&#39;编号&#39;, &#39;姓名&#39;, &#39;职位&#39;, &#39;主管&#39;, &#39;工资&#39;, &#39;部门&#39;)              for col, title in enumerate(titles):                  # sheet.write(0, col, title, get_style(&#39;HanziPenSc-w3&#39;, color=2, bold=True))                  sheet.write(0, col, title)              # 可以通过only()或者defer()方法进行SQL投影操作              props = (&#39;no&#39;, &#39;name&#39;, &#39;job&#39;, &#39;mgr&#39;, &#39;sal&#39;, &#39;dept&#39;)              emps = Emp.objects.all().only(*props)\                  .select_related(&#39;mgr&#39;).select_related(&#39;dept&#39;).order_by(&#39;-sal&#39;)              # 通过数据库获得员工数据填写的Excel表格              for row, emp in enumerate(emps):                  for col, prop in enumerate(props):                      # 通过getattr函数获取对象属性值                      val = getattr(emp, prop, &#39;&#39;)                      if isinstance(emp, Dept):                          val = getattr(val, &#39;name&#39;)                      sheet.write(row + 1, col,val)              # 将Excel表格的数据写入内存              buffer = BytesIO()              workbook.save(buffer)              # 生成响应对象传输数据给浏览器              resp = HttpResponse(buffer.getvalue())              resp[&#39;content-type&#39;] = &#39;application/msexcel&#39;              filename = quote(&#39;员工信息表.xls&#39;)              resp[&#39;content-disposition&#39;] = f&#39;attachment; filename=&quot;{filename}&quot;&#39;              return resp</code></pre><ul><li>git-flow</li><li>github-flow</li><li>gitlab-flow</li></ul><p>如果项目中有些功能是无法自己实现的，就必须调用第三方服务（支付、地图、云存储、短信、邮件、物流），接入三方服务方式：</p><ul><li>SDK集成 — pip安装三方平台的库文件</li><li>API集成 — 通过网络请求（HTTP(S)）访问URL</li></ul><p>缺陷管理</p><ul><li>问题驱动开发</li></ul><p>持续集成</p><ul><li>反复构建和测试</li></ul><h2 id="Git安装"><a href="#Git安装" class="headerlink" title="Git安装"></a>Git安装</h2><p><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">廖雪峰Git详解网站</a></p><h3 id="版本控制-1"><a href="#版本控制-1" class="headerlink" title="版本控制"></a>版本控制</h3><p>1990s —— 锁定模式</p><ul><li>CVS —– Concurrent Version System</li><li>VSS —– Visual Source Safe</li></ul><p>2000s ——– 合并模式</p><ul><li>SVN ——- Subversion —— 集中控制式</li></ul><p>分布式版本控制 —- BitKeeper<br>2005年 — Git / Mercury</p><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><p><a href="https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.19.1.tar.xz" target="_blank" rel="noopener">下载Git2.19.1版本</a></p><p><a href="https://git-scm.com/" target="_blank" rel="noopener">下载Git2.21.0版本</a></p><ul><li>解压缩 / 解归档</li></ul><p>xz -d git-2.19.1.tar.xz</p><p>tar -xvf git-2.19.1.tar</p><ul><li>配置安装路径</li></ul><p>cd git-2.19.1</p><p>./configure –prefix=/usr/local</p><ul><li>安装git的网络依赖库</li></ul><p>yum -y install libcurl-devel</p><ul><li>构建安装</li></ul><p>make &amp;&amp; make install</p><ul><li>检查安装结果</li></ul><p>git –version</p><h5 id="本地仓库操作"><a href="#本地仓库操作" class="headerlink" title="本地仓库操作"></a>本地仓库操作</h5><h6 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h6><ul><li>git init<ul><li>初始化，建立版本控制的仓库,生成文件.git</li></ul></li></ul><h5 id="操作文件"><a href="#操作文件" class="headerlink" title="操作文件"></a>操作文件</h5><ul><li>git add .<ul><li>将当前文件中的所有文件加入到暂存区</li></ul></li><li>git rm –cached 文件名<ul><li>将暂存区的文件移除</li></ul></li><li>git checkout – 文件名<ul><li>用暂存区的文件覆盖工作区的文件</li><li>恢复误删除的文件</li><li></li></ul></li><li>git checkout -d 文件名 ——- 创建分支</li><li>git branch —— 查看分支</li><li>git status<ul><li>查看暂存区的状态</li></ul></li></ul><h5 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h5><ul><li>git log<ul><li>查看操作日志(有添加或删除的操作信息)</li></ul></li><li>git reflog —— 看到最新的版本<ul><li>版本1 版本2 版本3 现在在版本1，去到版本2，去到版本3，回到版本1。此命令可以看到版本1,2,3的日志</li></ul></li></ul><h5 id="添加标识"><a href="#添加标识" class="headerlink" title="添加标识"></a>添加标识</h5><ul><li>git config –global user.name “…”<ul><li>配置名字标识</li></ul></li><li>git config –global user.email “…”<ul><li>配置邮箱标识</li></ul></li></ul><h6 id="回到历史版本"><a href="#回到历史版本" class="headerlink" title="回到历史版本"></a>回到历史版本</h6><p>–hard参数是为了保持工作区和历史区版本的一致性；写上，表示版本和文件内容一起回到历史版本；不写，表示版本回到历史，文件内容没有改变</p><ul><li><p>git reset –hard 哈希码的前6位(或全部)</p><ul><li>回到哈希码所在的历史版本</li></ul></li><li>git –hard HEAD^<ul><li>回到上一个版本</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git</title>
      <link href="/2018/03/15/Linux/Git/"/>
      <url>/2018/03/15/Linux/Git/</url>
      
        <content type="html"><![CDATA[<h2 id="搭建Git服务器"><a href="#搭建Git服务器" class="headerlink" title="搭建Git服务器"></a>搭建Git服务器</h2><ol><li>使用已有的代码托管平台 —– github / gitee / coding</li><li>搭建自己的Git私服 —- gitlab</li></ol><h3 id="git命令"><a href="#git命令" class="headerlink" title="git命令"></a>git命令</h3><h6 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h6><ul><li>git clone ssh/https<ul><li>连接远端仓库到本地仓库,ssh密钥对，在Administrator文件中的.ssh文件中，有一个密钥文件id_rsa.pub</li></ul></li><li>git add 文件名<ul><li>添加文件到工作区</li></ul></li><li>git commit -m “注解”<ul><li>将工作区中的文件添加到本地仓库</li></ul></li><li>git push<ul><li>将本地仓库中的文件上传到远端仓库</li></ul></li><li>git pull<ul><li>将远端仓库中的文件下载到本地仓库</li></ul></li></ul><h3 id="如果Git连网操作报错通常是因为底层依赖库libcurl安装不正确"><a href="#如果Git连网操作报错通常是因为底层依赖库libcurl安装不正确" class="headerlink" title="如果Git连网操作报错通常是因为底层依赖库libcurl安装不正确"></a>如果Git连网操作报错通常是因为底层依赖库libcurl安装不正确</h3><p>错误：<code>Could not read from remote repository.</code><br>解决方法：</p><ol><li>yum -y install curl libcurl libcurl-devel</li><li>cd ~</li><li>cd git-2.19.1</li><li>make clean</li><li>./configure –prefix=/usr/local</li><li>make &amp;&amp; make install</li></ol><h2 id="hexo-搭建个人博客"><a href="#hexo-搭建个人博客" class="headerlink" title="hexo 搭建个人博客"></a>hexo 搭建个人博客</h2><ol><li>安装Node.js — yum -y install nodejs</li></ol><ul><li>node –version</li><li>hexo –version</li></ul><ol start="2"><li>通过Node包管理工具npm安装hexo</li></ol><ul><li>npm install hexo-cli -g</li><li>hexo –version</li></ul><ol start="3"><li>使用hexo创建博客项目</li></ol><ul><li>hexo init blog[项目名字]</li><li>cd blog</li><li>npm install</li></ul><ol start="4"><li>将写成的Markdown文件放到blog/source/_posts</li><li>生成静态页面</li></ol><ul><li><p>hexo generate / hexo g</p></li><li><p>hexo clean ——– 清除之前生成的内容</p></li></ul><ol start="6"><li>启动服务器</li></ol><ul><li>hexo server / hexo s</li></ul><h3 id="托管"><a href="#托管" class="headerlink" title="托管"></a>托管</h3><p>如果希望自己的博客部署到其他网站上托管，可以使用其他网站提供的pages服务</p><h5 id="将博客托管到github"><a href="#将博客托管到github" class="headerlink" title="将博客托管到github"></a>将博客托管到github</h5><p>首先要在github上创建一个名为xxx.github.io项目<br>其中xxx是自己的github的用户名（必须完全一致）</p><p>修改blog目录下的_config.yml文件 在文件的最后添加下面的内容</p><pre><code># Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:  type: git  repo: git@github.com:xxx/xxx.github.io.git  branch: master通过下面的命令可以实现一键部署hexo g -dhexo d -g如果操作失败可能有两个原因：1. 没有安装git部署器（可以用npm进行安装）npm install hexo-deployer-git --save2. 需要配置SSH证书（可以通过openssl创建证书）加密 - 通信安全对称加密 - 加密和解密使用同一个密钥 - AESattack at dawn - 明文dwwdfn dw gdzq - 密文非对称加密 - 加密和解密使用不同的密钥 - RSA生成密钥时需要生成两个密钥 一个叫公钥一个叫私钥Alice向Bob发送数据时 使用公钥加密数据Bob收到Alice发过来的数据时 使用私钥解密数据Bob向Alice发送数据时 使用私钥加密数据Alice收到Bob发过来的数据时 使用公钥解密数据创建密钥对ssh-keygen -t rsa -b 4096 -C &quot;xxx@qq.com&quot;id_rsa - 私钥id_rsa.pub - 公钥 - 添加到github上面Settings --&gt; Deploy keys --&gt; Add deploy keyshttps://hexo.io/themes/https://hexo.io/plugins/配置域名解析在阿里云或其他域名解析服务上配置一条CNAME解析所谓CNAME解析就是把自己的域名解析到github的pages服务可以在blog项目的source目录下添加一个CNAME文件，里面写上自己的域名（如：jackfrued.xyz），这样就可以直接通过自己的域名访问github的pages服务，要可以在访问github的pages服务时让域名自动切换为自己的域名</code></pre><h5 id="将博客托管到gitee"><a href="#将博客托管到gitee" class="headerlink" title="将博客托管到gitee"></a>将博客托管到gitee</h5><p>参照网站：<a href="https://www.jianshu.com/p/5014133ba61a" target="_blank" rel="noopener">https://www.jianshu.com/p/5014133ba61a</a></p><h5 id="将gitee上的博客改成自己的域名"><a href="#将gitee上的博客改成自己的域名" class="headerlink" title="将gitee上的博客改成自己的域名"></a>将gitee上的博客改成自己的域名</h5><ol><li>在一个项目中必须有index.html这个文件</li><li>在项目主页点击「服务」-&gt;选择「GiteePages」，开启部署。 因为每个用户可免费试用一个月，所以这里点击「免费试用一个月」，也可以付费使用</li><li>选择你需要部署的分支，填写要部署的分支上的目录，绑定你已经<strong>备案的域名</strong>（如i-love-gitee.com）。如果有需要，也可为网站配置 HTTPS 安全访问。</li><li>点击「启动」后几十秒即部署成功，点击网站地址就可以访问啦。</li></ol>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git代码管平台 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
