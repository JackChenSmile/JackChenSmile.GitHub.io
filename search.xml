<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2023/05/01/%E9%80%9A%E4%BF%A1%E6%8A%80%E6%9C%AF/VBA%E8%AF%AD%E6%B3%95/"/>
      <url>/2023/05/01/%E9%80%9A%E4%BF%A1%E6%8A%80%E6%9C%AF/VBA%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<pre><code>VBA语言的基础认识第一节：标识符一、定义标识符是一种标识变量、常量、过程、函数、类等语言构成单位的符号，利用它可以完成对变量、常量、过程、函数、类等引用。二、命名规则（1）字母打头，由字母、数字和下划线组成，如A987b_23Abc（2）字符长度小于40，（Excel2002以上中文版本等，可以用汉字且长度可达254个字符）（3）不能与VB保留字重名，如public，private，dim，goto，next，with，integer，single等第二节：运算符定义：运算符是代表VB某种运算功能的符号。（1）赋值运算符  =（2）数学运算符 &amp;、+ (字符连接符)、+(加)、-（减）、Mod（取余）、\（整除）、*（乘）、/（除）、-（负号）、^（指数）（3）逻辑运算符Not（非）、And（与）、Or(或)、Xor(异或)、Eqv(相等)、Imp(隐含)（4）关系运算符 = （相同）、&lt;&gt;（不等）、&gt;（大于）、&lt;（小于）、&gt;=（不小于）、&lt;=（不大于）、Like、Is（5）位运算符  Not（逻辑非）、And（逻辑与）、Or（逻辑或）、Xor（逻辑异或）、Eqv（逻辑等）、Imp（隐含）第三节：数据类型VBA共有12种数据类型，具体见下表，此外用户还可以根据以下类型用Type自定义数据类型。VBA数据类型第四节：变量与常量（1）VBA允许使用未定义的变量，默认是变体变量（2）在模块通用说明部分，加入Option Explicit语句可以强迫用户进行变量定义（3）变量定义语句及变量作用域一般变量作用域的原则是，那部分定义就在那部分起作用，模块中定义则在该模块那作用。（4）常量为变量的一种特例，用Const定义，且定义时赋值，程序中不能改变值，作用域也如同变量作用域。如下定义：Const Pi=3.1415926 as single第五节：数组数组是包含相同数据类型的一组变量的集合，对数组中的单个变量引用通过数组索引下标进行。在内存中表现为一个连续的内存块，必须用Global或Dim语句来定义。定义规则如下：Dim 数组名([lower to ]upper [, [lower to ]upper, ….]) as type ;Lower缺省值为0。二维数组是按行列排列，如XYZ(行，列)。除了以上固定数组外，VBA 还有一种功能强大的动态数组，定义时无大小维数声明；在程序中再利用Redim语句来重新改变数组大小，原来数组内容可以通过加preserve关键字来保留。如下例：Dim array1() as double : Redim array1(5) : array1(3)=250 : Redim preserve array1(5,10)第六节：注释和赋值语句（1）注释语句是用来说明程序中某些语句的功能和作用；VBA中有两种方法标识为注释语句。√单引号 ’  ;如：’定义全局变量；可以位于别的语句之尾，也可单独一行√Rem ;如：Rem定义全局变量；只能单独一行（2）赋值语句是进行对变量或对象属性赋值的语句，采用赋值号 =，如X=123：Form1.caption=”我的窗口”对对象的赋值采用：set myobject=object 或  myobject:=object第七节：书写规范（1）VBA不区分标识符的字母大小写，一律认为是小写字母；（2）一行可以书写多条语句，各语句之间以冒号 :  分开；（3）一条语句可以多行书写，以空格加下划线 _  来标识下行为续行；（4）标识符最好能简洁明了，不造成歧义。第八节：判断语句（1）If…Then…Else语句If condition Then [statements][Else elsestatements]如1：If A&gt;B And C&lt;D Then A=B+2 Else  A=C+2如2：If x&gt;250 Then  x=x-100或者，可以使用块形式的语法：If condition Then[statements][ElseIf condition-n Then[elseifstatements] ...[Else[elsestatements]]End If如1:If Number &lt; 10  Then     Digits = 1ElseIf Number &lt; 100  Then     Digits = 2Else     Digits = 3End If（2）Select Case…Case…End Case语句如1：Select Case  Pid   Case  “A101”   Price=200   Case  “A102”   Price=300   ……   Case Else   Price=900End Case（3）Choose 函数choose(index, choce-1,choice-2,…,choice-n)，可以用来选择自变量串列中的一个值，并将其返回，index 必要参数，数值表达式或字段，它的运算结果是一个数值，且界于 1 和可选择的项目数之间。choice 必要参数，Variant表达式，包含可选择项目的其中之一。如：GetChoice = Choose(Ind, &quot;Speedy&quot;, &quot;United&quot;, &quot;Federal&quot;)（4）Switch函数Switch(expr-1, value-1[, expr-2, value-2 _ [, expr-n,value-n]])switch 函数和 Choose 函数类似，但它是以两个一组的方式返回所要的值，在串列中，最先为TRUE 的值会被返回。 expr 必要参数，要加以计算的 Variant 表达式。value 必要参数。如果相关的表达式为 True，则返回此部分的数值或表达式，没有一个表达式为 True，Switch 会返回一个 Null值。第九节：循环语句（1）For Next语句  以指定次数来重复执行一组语句For counter = start To end [Step step]                  ＇step 缺省值为1[statements][Exit For][statements]Next [counter]如1：For Words = 10 To 1 Step  -1                               ＇建立 10 次循环       For Chars = 0 To 9                                        ＇建立 10 次循环           MyString = MyString &amp; Chars                      ＇将数字添加到字符串中      Next Chars                                                   ＇Increment counter      MyString = MyString &amp; &quot; &quot;                                ＇添加一个空格Next  Words（2）For Each…Next 语句  主要功能是对一个数组或集合对象进行，让所有元素重复执行一次语句For Each element In  groupStatements[Exit for]StatementsNext  [element]如1：For Each rang2 In  range1     With range2.interior             .colorindex=6             .pattern=xlSolid     End withNext这上面一例中用到了 With…End With  语句，目的是省去对象多次调用，加快速度；语法为：With object[statements]End With（3）Do…loop语句 在条件为true时，重复执行区块命令Do {while |until} condition&#39; while 为当型循环，until为直到型循环，顾名思义，不多说啦StatementsExit doStatementsLoop或者使用下面语法：Do                                    &#39; 先do 再判断，即不论如何先干一次再说StatementsExit doStatementsLoop {while |until} condition第十节 其他类语句和错误语句处理一．其他循环语句结构化程序使用以上判断和循环语句已经足够，建议不要轻易使用下面的语句，虽然 VBA 还支持。（1）Goto line 该语句为跳转到line语句行（2） On expression gosub destinatioinlist 或者 on expression goto destinationlist 语句为根据 exprssion表达式值来跳转到所要的行号或行标记（3）Gosub line…line…Return语句，  Return 返回到 Gosub line行，如下例：Sub gosubtry()      Dim num      Num=inputbox(“输入一个数字，此值将会被判断循环”)      If num&gt;0 then Gosub Routine1 ：Debug.print num：Exit  sub      Routine1:      Num=num/5      ReturnEnd sub（4）while…wend语句，只要条件为TRUE，循环就执行，这是以前VB老语法保留下来的，如下例：while condition      ‘while I&lt;50[statements]        ‘I=I+1wend                  ‘Wend二．错误语句处理执行阶段有时会有错误的情况发生，利用OnError语句来处理错误，启动一个错误的处理程序。语法如下：On Error Goto Line        ‘当错误发生时，会立刻转移到line行去On Error Resume Next    ‘当错误发生时，会立刻转移到发生错误的下一行去On Erro Goto 0             ‘当错误发生时，会立刻停止过程中任何错误处理过程第十一节 过程和函数过程是构成程序的一个模块，往往用来完成一个相对独立的功能。过程可以使程序更清晰、更具结构性。VBA具有四种过程：Sub 过程、Function函数、Property属性过程和Event事件过程。一．Sub过程Sub 过程的参数有两种传递方式：按值传递(ByVal)和按地址传递(ByRef)。如下例：Sub password (ByVal x as integer, ByRef y as integer)      If y=100 then y=x+y else y=x-y      x=x+100End subSub call_password ()      Dim x1 as integer      Dim y1 as integer      x1=12      y1=100      Callpassword(x1,y1)     ‘调用过程方式：1.Call   过程名(参数1,  参数2…);2.  过程名 参数1, 参数2…      debug.print x1,y1         ‘结果是12、112，y1按地址传递改变了值，而x1按值传递，未改变原值End sub二．Function函数函数实际是实现一种映射，它通过一定的映射规则，完成运算并返回结果。参数传递也两种：按值传递(ByVal)和按地址传递(ByRef)。如下例：Function password(ByVal x as integer, byref y as integer) as boolean       If y=100 then y=x+y else y=x-y       x=x+100       if y=150 then password=true else password=falseEnd FunctionSub call_password ()      Dim x1 as integer      Dim y1 as integer      x1=12      y1=100      if password then ‘调用函数：1. 作为一个表达式放在=右端 ; 2. 作为参数使用      debug.print x1      end ifEnd sub三．Property属性过程和Event事件过程这是VB在对象功能上添加的两个过程，与对象特征密切相关，也是VBA比较重要组成，技术比较复杂，可以参考相关书籍。第十二节内部函数在VBA程序语言中有许多内置函数，可以帮助程序代码设计和减少代码的编写工作。一．测试函数IsNumeric(x)          ‘是否为数字,  返回Boolean结果，True  or False      IsDate(x)              ‘是否是日期,  返回Boolean结果，True  or FalseIsEmpty（x）         ‘是否为Empty, 返回Boolean结果，True  or FalseIsArray(x)             ‘指出变量是否为一个数组。IsError(expression)  ‘指出表达式是否为一个错误值IsNull(expression)    ‘指出表达式是否不包含任何有效数据 (Null)。IsObject(identifier)  ‘指出标识符是否表示对象变量二．数学函数Sin(X)、Cos(X)、Tan(X)、Atan(x)  三角函数，单位为弧度Log(x) 返回x的自然对数Exp(x)返回 Abs(x) 返回绝对值Int(number)、Fix(number) 都返回参数的整数部分，区别：Int 将 -8.4 转换成 -9，而 Fix 将-8.4 转换成 -8Sgn(number) 返回一个 Variant (Integer)，指出参数的正负号Sqr(number) 返回一个 Double，指定参数的平方根VarType(varname) 返回一个 Integer，指出变量的子类型Rnd（x）返回0-1之间的单精度数据，x为随机种子三．字符串函数Trim(string)                       去掉string左右两端空白Ltrim(string)                      去掉string左端空白Rtrim(string)                      去掉string右端空白Len(string)                        计算string长度Left(string, x)                    取string左段x个字符组成的字符串Right(string, x)                   取string右段x个字符组成的字符串Mid(string, start,x)              取string从start位开始的x个字符组成的字符串Ucase(string)                     转换为大写Lcase(string)                      转换为小写Space(x)                           返回x个空白的字符串Asc(string)                         返回一个 integer，代表字符串中首字母的字符代码Chr(charcode)                     返回 string,其中包含有与指定的字符代码相关的字符四．转换函数CBool(expression)                   转换为Boolean型CByte(expression)                  转换为Byte型CCur(expression)                    转换为Currency型CDate(expression)                  转换为Date型CDbl(expression)                    转换为Double型CDec(expression)                   转换为Decemal型CInt(expression)                    转换为Integer型CLng(expression)                   转换为Long型CSng(expression)                   转换为Single型CStr(expression)                    转换为String型CVar(expression)                    转换为Variant型Val(string)                             转换为数据型Str(number)                           转换为String五．时间函数Now            返回一个 Variant (Date)，根据计算机系统设置的日期和时间来指定日期和时间。Date           返回包含系统日期的 Variant (Date)。Time           返回一个指明当前系统时间的 Variant (Date)。Timer          返回一个 Single，代表从午夜开始到现在经过的秒数。TimeSerial(hour, minute, second) 返回一个 Variant (Date)，包含具有具体时、分、秒的时间。DateDiff(interval, date1, date2[, firstdayofweek[, firstweekofyear]]) 返回 Variant(Long) 的值，表示两个指定日期间的时间间隔数目Second(time) 返回一个 Variant (Integer)，其值为 0 到 59 之间的整数，表示一分钟之中的某个秒Minute(time) 返回一个 Variant (Integer)，其值为 0 到 59 之间的整数，表示一小时中的某分钟Hour(time)  返回一个 Variant(Integer)，其值为 0 到 23 之间的整数，表示一天之中的某一钟点Day(date)   返回一个 Variant(Integer)，其值为 1 到 31 之间的整数，表示一个月中的某一日Month(date) 返回一个 Variant(Integer)，其值为 1 到 12 之间的整数，表示一年中的某月Year(date)  返回 Variant (Integer)，包含表示年份的整数。Weekday(date, [firstdayofweek]) 返回一个 Variant (Integer)，包含一个整数，代表某个日期是星期几第十三节 文件操作文件Dir[(pathname[,attributes])] ；pathname 可选参数，用来指定文件名的字符串表达式，可能包含目录或文件夹、以及驱动器。如果没有找到  pathname，则会返回零长度字符串 (&quot;&quot;);attributes 可选参数。常数或数值表达式，其总和用来指定文件属性。如果省略，则会返回匹配 pathname 但不包含属性的文件。删除Kill pathname   从磁盘中删除文件, pathname 参数是用来指定一个文件名RmDir pathname  从磁盘中删除目录，pathname 参数是用来指定一个文件夹打开Open pathname For mode [Access access] [lock] As [#]filenumber [Len=reclength] 能够对文件输入/输出 (I/O)。pathname 必要。字符串表达式，指定文件名，该文件名可能还包括目录、文件夹及驱动器。mode 必要。关键字，指定文件方式，有 Append、Binary、Input、Output、或 Random 方式。如果未指定方式，则以 Random 访问方式打开文件。access 可选。关键字，说明打开的文件可以进行的操作，有 Read、Write、或 ReadWrite 操作。lock 可选。关键字，说明限定于其它进程打开的文件的操作，有 Shared、LockRead、LockWrite、和 Lock Read Write 操作。filenumber 必要。一个有效的文件号，范围在 1 到 511 之间。使用 FreeFile 函数可得到下一个可用的文件号。 reclength 可选。小于或等于 32，767（字节）的一个数。对于用随机访问方式打开的文件，该值就是记录长度。对于顺序文件，该值就是缓冲字符数。说明 对文件做任何 I/O 操作之前都必须先打开文件。Open  语句分配一个缓冲区供文件进行I/O 之用，并决定缓冲区所使用的访问方式。如果 pathname 指定的文件不存在，那么，在用Append、Binary、Output、或 Random 方式打开文件时，可以建立这一文件。如果文件已由其它进程打开，而且不允许指定的访问类型，则 Open 操作失败，而且会有错误发生。如果 mode是 Binary 方式，则 Len 子句会被忽略掉。重要 在 Binary、Input 和 Random 方式下可以用不同的文件号打开同一文件，而不必先将该文件关闭。在 Append 和 Output 方式下，如果要用不同的文件号打开同一文件，则必须在打开文件之前先关闭该文件。读入Input #filenumber, varlist 从已打开的顺序文件中读出数据并将数据指定给变量Get [#]filenumber, [recnumber], varname将一个已打开的磁盘文件读入一个变量之中。写入Write #filenumber, [outputlist] 将数据写入顺序文件Print #filenumber, [outputlist] 将格式化显示的数据写入顺序文件中Put [#]filenumber, [recnumber], varname 将一个变量的数据写入磁盘文件中。关闭Close [filenumberlist] 关闭 Open 语句所打开的输入/输出 (I/O) 文件注意 如果今后想用 Input # 语句读出文件的数据，就要用 Write # 语句而不用 Print # 语句将数据写入文件。因为在使用 Write# 时，将数据域分界就可确保每个数据域的完整性，因此可用 Input# 再将数据读出来。使用 Write#  还能确保任何地区的数据都被正确读出。Write与 Print # 语句不同，当要将数据写入文件时，Write # 语句会在项目和用来标记字符串的引号之间插入逗号。Write # 语句在将 outputlist 中的最后一个字符写入文件后会插入一个新行字符，即回车换行符，(Chr(13) + Chr(10))。其他文件函数LOF(filenumber)  返回一个 Long，表示用 Open 语句打开的文件的大小，该大小以字节为单位。EOF(filenumber)  返回一个 Integer，它包含 Boolean 值 True，表明已经到达为 Random 或顺序 Input 打开的文件的结尾。Loc(filenumber)   返回一个 Long，在已打开的文件中指定当前读/写位置Seek(filenumber)  返回一个 Long，在 Open 语句打开的文件中指定当前的读/写位IF 多条件判断返回值　　IF(logical_test, [value_if_true], [value_if_false])　　示例：　小于500，且未到期的，返回“补款”　　IF(AND(A2&lt;500,B2=&quot;未到期&quot;),&quot;补款&quot;,&quot;&quot;)　　职称为工程师或高工的，返回“满足”　　IF(OR(C3=&quot;工程师&quot;, C3=&quot;高工&quot;),&quot;满足&quot;,&quot;&quot;)　　说明：两个条件同时成立用AND,任一个成立用OR函数。IFS 多场景判断返回值IFS(logical_test1,value_if_true1, logical_test2, value_if_true2, ...)示例：在一列中，根据不同的判断条件，给出符合条件的值IFERROR 把公式产生的错误值显示为自定义值IFERROR(value, value_if_error)  第一个参数为需要判断的计算式，第二个参数为当第一个参数出错时要返回的值。　　示例：成绩低于60，不及格　　IFERROR(A2&gt;=60,&quot;不及格&quot;)COUNTIF 单条件计数　　COUNTIF(range, criteria)　　示例：统计E列工资大于6000的人员数　　COUNTIF(E:E, &quot;&gt;6000&quot;)　　COUNTIF(E:E, &quot;&gt;&quot;&amp;M9) 假设M9单元格内容为6000COUNTIFS 多条件计数　　COUNTIFS(criteria_range1, criteria1, criteria_range2, criteria2, ...)　　示例：统计属于销售部门，工资大于6000的员工人数　　COUNTIFS(D:D, &quot;销售&quot;, E:E, &quot;&gt;6000&quot;)SUMIF 按条件在查找区域进行查找，并返回查找区域对应的数据区域中数值的和　　SUMIF(range, criteria, [sum_range])　　示例：当不指定SUM_RANGE时，将直接对RANGE区域求和　　SUMIF(C:C, &quot;&gt;1000&quot;), 对大于1000的单元格求和　　SUMIF(B:B, &quot;果汁&quot;, C:C), 对B列为果汁对应的C列销量求和SUMIFS 多条件组合的数据求和　　SUMIFS(sum_range, criteria_range1, criteria1, criteria_range2, criteria2, ...)　　示例： 统计生产部门，男性工资的总和　　SUMIFS(K:K, D:D, &quot;生产&quot;, C:C, &quot;男&quot;)　　AVERAGEIF, AVERAGEIFS和SUMIF, SUMIFS类似VLOOKUP, HLOOKUP 搜索用户查找范围中首列（或首行）中满足条件的数据，并根据指定的列号（行号）返回对应的值。VLOOKUP对列数据按行进行查找，HLOOKUP对行数据按列查找　　VLOOKUP(lookup_value, table_array, col_index_num, [range_lookup])　　HLOOKUP(lookup_value, table_array, row_index_num, [range_lookup])　　[range_lookup]默认值为1或TRUE，使用模糊匹配方式进行查找。如果设置成0或FALSE，使用精确查找，同时支持无序查找。　　示例：查找员工号为2267的员工姓名　　VLOOKUP(&quot;2267&quot;, A1:D4, 2)LEN 返回文本串的字符个数　　LEN(text)SUBSTITUTE 将目标文本中指定的字符串替换为新的字符串　　SUBSTITUTE(text, old_text, new_text, instance_num)　　示例：　　将第二个狐替换成虎　　SUBSTITUTE(&quot;狐假狐威&quot;, &quot;狐&quot;, &quot;虎&quot;, 2)　　计算单元格中MANUAL字符的个数(LEN(J13)-LEN(SUBSTITUTE(J13,&quot;MANUAL&quot;,)))/LEN(&quot;MANUAL&quot;)　　INDEX 根据给定的一个范围（区域引用或数组）中指定的行号和列号来返回一个值，如果源数据是区域，则返回单元格引用；如果源范围是数组，则返回数组中的某个值。　　INDEX(reference, row_num, [column_num], [area_num])　　INDEX(array, row_num, [column_num])　　示例：从左侧的数据表隔行提取，生成新的工作表　　E4：INDEX($C$3:$C$8, ROW(A2)*2-1)　　F4：INDEX($C$3:$C$8,ROW(A2)*2)SMALL 取指定的第N小的值　　SMALL(array, K) 　　示例：　　取第一小的值　　SMALL({10，15，20},1.5)等同于SMALLSMALL({10，15，20},1)，结果为10LARGE 取指定的第N大的值，与SMALL相反</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/01/%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E5%90%8D%E7%A7%B0/%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E5%90%8D%E7%A7%B0/"/>
      <url>/2023/05/01/%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E5%90%8D%E7%A7%B0/%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E5%90%8D%E7%A7%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="文件名称修改"><a href="#文件名称修改" class="headerlink" title="文件名称修改"></a>文件名称修改</h4><pre><code class="python">import osfrom re import splitimport shutil# 提取文件名称ym = &#39;C:/Users/Administrator/Desktop/源文件&#39;path = &#39;C:/Users/Administrator/Desktop/20201225&#39;# 获取该目录下所有文件，存入列表中fileList_ym = os.listdir(ym)fileList_path = os.listdir(path)# # 创建新文件# for index in range(3):#     f4 = open(&#39;C:/Users/Administrator/Desktop/新建文件夹/&#39; + str(index) + &#39;.xlsx&#39;,&#39;w&#39;,encoding = &#39;utf-8&#39;)#     f4.close()n = 0for i in fileList_path:    # 设置旧文件名（就是路径+文件名）    # ENBID = i.split(&#39;[&#39;, 2)[1].split(&#39;]&#39;,2)[0]    oldname = path + os.sep + fileList_path[n]  # os.sep添加系统分隔符    # # 设置新文件名    # file = fileList[n].split(&#39;-&#39;, 2)    newname = path + os.sep + fileList_ym[n]    os.rename(oldname, newname)  # 用os模块中的rename方法对文件改名    print(oldname, &#39;======&gt;&#39;, newname)    n += 1</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>EXCEL</title>
      <link href="/2020/11/19/%E9%80%9A%E4%BF%A1%E6%8A%80%E6%9C%AF/EXCEL%E6%93%8D%E4%BD%9C/"/>
      <url>/2020/11/19/%E9%80%9A%E4%BF%A1%E6%8A%80%E6%9C%AF/EXCEL%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h4 id="数据透视表有去重的作用"><a href="#数据透视表有去重的作用" class="headerlink" title="数据透视表有去重的作用"></a><font color="red">数据透视表有去重的作用</font></h4><ul><li>计数：<ul><li>count：计有数字的单元格</li><li>counta：计单元格的个数</li></ul></li><li>表格判断：if（条件，true，false），三个判断的时候，用两个if函数</li><li>四舍五入：round(float,number)<ul><li>float：代表原始的数据</li><li>number：代表保留的有效数字</li></ul></li><li>计算某个区域中满足条件的单元格个数：countif（计数区域，条件）</li><li>对满足条件的单元格求和：sumif（范围，区间，求和区域）</li><li>计算单元格中所有数值的和：sum（单元格1,2,3,4,5）</li><li><p>批量查找：vlookup（查找值，数据表，列序数，0精确匹配）<strong>只能从左往右查</strong></p><ul><li>快V工具中的字段对应公式中的数据<ul><li>V关键字：查找值    </li><li>源关键字：数据表中的字段</li><li>源需求字段：数据表中的字段</li><li>V关键字:查找值</li><li>V需求字段结果:查找结果</li></ul></li></ul></li><li><p>截取函数的使用</p><ul><li>left(text,num_chars)<ul><li>text：用来截取的单元格内容</li><li>num_chars：从左开始截取的字符数</li></ul></li><li>right(text,num_chars)<ul><li>text：用来截取的单元格内容</li><li>num_chars：从左开始截取的字符数</li></ul></li><li>mid(text，start，num_chars)<ul><li>text：用来截取的单元格内容</li><li>start：从那个字符开始截取</li><li>num_chars：截取的字符数，可以用len函数取字符串的长度</li></ul></li></ul></li><li>替换：substitute(字符串，原字符，替换字符)</li><li>筛选的快捷键：ctrl+shift+l</li><li>分列问题可以先替换，再分列</li></ul>]]></content>
      
      
      <categories>
          
          <category> databases </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EXCEL </tag>
            
            <tag> 公式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Word_cloud</title>
      <link href="/2019/02/13/python/Word-cloud/"/>
      <url>/2019/02/13/python/Word-cloud/</url>
      
        <content type="html"><![CDATA[<h3 id="获取词云的代码"><a href="#获取词云的代码" class="headerlink" title="获取词云的代码"></a>获取词云的代码</h3><pre><code class="python">import jiebaimport matplotlib.pyplot as pltfrom collections import Counterimport jieba.posseg as psgfrom scipy.misc import imreadfrom wordcloud import WordCloud, ImageColorGeneratorartic = open(&#39;2.txt&#39;, &#39;r&#39;, encoding=&#39;utf8&#39;).read()# 取到不需要的字符r=&#39;!.:;\n？“。，……”\u3000：的！,    &#39;for i in r:    artic = artic.replace(i, &#39;&#39;)# 生成词组cut =&#39;,&#39;.join(jieba.cut(artic))lcut = jieba.lcut(artic)# 统计数量count = Counter(lcut).most_common(20)print(cut)path_of_font = &#39;./arialuni.ttf&#39;bg_path = &#39;C:/Users/Administrator/Pictures/map1.jpg&#39;bg_img = imread(bg_path)my_wordcloud = WordCloud(font_path=path_of_font,max_font_size=100,mask=bg_img).generate(cut)plt.imshow(my_wordcloud)plt.axis(&quot;off&quot;)plt.show()</code></pre><h3 id="效果图："><a href="#效果图：" class="headerlink" title="效果图："></a>效果图：</h3><p><img src="/2019/02/13/python/Word-cloud/Figure_2.png" alt="Figure_2"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>programming-book</title>
      <link href="/2018/12/15/python/Python%E5%8F%82%E8%80%83%E4%B9%A6%E7%B1%8D/"/>
      <url>/2018/12/15/python/Python%E5%8F%82%E8%80%83%E4%B9%A6%E7%B1%8D/</url>
      
        <content type="html"><![CDATA[<p>Read ten thousand books and travel ten thousand miles！</p><p>Books are ladders of human progress！</p><h2 id="Python参考书籍"><a href="#Python参考书籍" class="headerlink" title="Python参考书籍"></a>Python参考书籍</h2><h3 id="入门读物"><a href="#入门读物" class="headerlink" title="入门读物"></a>入门读物</h3><ol><li>《Python基础教程》（<em>Beginning Python From Novice to Professional</em>）</li><li>《Python学习手册》（<em>Learning Python</em>）</li><li>《Python编程》（<em>Programming Python</em>）</li><li>《Python Cookbook》</li><li>《Python程序设计》（<em>Python Programming: An Introduction to Computer Science</em>）</li><li>《Modern Python Cookbook》</li></ol><h3 id="进阶读物"><a href="#进阶读物" class="headerlink" title="进阶读物"></a>进阶读物</h3><ol><li>《Python核心编程》（<em>Core Python Applications Programming</em>）</li><li>《流畅的Python》（<em>Fluent Python</em>）</li><li>《Effective Python：编写高质量Python代码的59个有效方法》（<em>Effective Python 59 Specific Ways to Write Better Python</em>）</li><li>《Python设计模式》（<em>Learning Python Design Patterns</em>）</li><li>《Python高级编程》（<em>Expert Python Programming</em>）</li><li>《Python性能分析与优化》（<em>Mastering Python High Performance</em>）</li></ol><h3 id="Web框架"><a href="#Web框架" class="headerlink" title="Web框架"></a>Web框架</h3><ol><li>《Django基础教程》（<em>Tango with Django</em>）</li><li>《轻量级Django》（<em>Lightweight Django</em>）</li><li>《Python Web开发：测试驱动方法》（<em>Test-Driven Development with Python</em>）</li><li>《Web Development with Django Cookbook》</li><li>《Test-Driven Development with Django》</li><li>《Django Project Blueprints 》</li><li>《Flask Web开发：基于Python的Web应用开发实战》（<em>Flask Web Development: Developing Web Applications with Python</em>）</li><li>《深入理解Flask》（<em>Mastering Flask</em>）</li></ol><h3 id="爬虫开发"><a href="#爬虫开发" class="headerlink" title="爬虫开发"></a>爬虫开发</h3><ol><li>《用Python写网络爬虫》（<em>Web Scraping with Python</em>）</li><li>《精通Python爬虫框架Scrapy》（<em>Learning Scrapy</em>）</li><li>《Python网络数据采集》（<em>Web Scraping with Python</em>）</li><li>《Python爬虫开发与项目实战》</li><li>《Python 3网络爬虫开发实战》</li></ol><h3 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h3><ol><li>《利用Python进行数据分析》（<em>Python for Data Analysis</em>）</li><li>《Python数据科学手册》（<em>Python Data Science Handbook</em>）</li><li>《Python金融大数据分析》（<em>Python for Finance</em>）</li><li>《Python数据可视化编程实战》（<em>Python Data Visualization Cookbook</em>）</li><li>《Python数据处理》（<em>Data Wrangling with Python</em>）</li></ol><h3 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h3><ol><li>《Python机器学习基础教程》（<em>Introduction to Machine Learning with Python</em>）</li><li>《Python机器学习实践指南》（<em>Python Machine Learning Blueprints</em>）</li><li>《Python Machine Learning Case Studies》</li><li>《Python机器学习实践：测试驱动的开发方法》（<em>Thoughtful Machine Learning with Python A Test Driven Approach</em>）</li><li>《Python机器学习经典实例》（<em>Python Machine Learning Cookbook</em>）</li><li>《TensorFlow：实战Google深度学习框架》</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Web </tag>
            
            <tag> spider </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部署Django项目</title>
      <link href="/2018/12/14/Django/Django/"/>
      <url>/2018/12/14/Django/Django/</url>
      
        <content type="html"><![CDATA[<h3 id="安装MariaDB"><a href="#安装MariaDB" class="headerlink" title="安装MariaDB"></a>安装MariaDB</h3><p>安装命令</p><pre><code>yum -y install mariadb mariadb-server</code></pre><p>安装完成MariaDB，首先启动MariaDB</p><pre><code>systemctl start mariadb</code></pre><p>设置开机启动</p><pre><code>systemctl enable mariadb</code></pre><h3 id="设置密码"><a href="#设置密码" class="headerlink" title="设置密码"></a>设置密码</h3><p>命令: mysql_secure_installation</p><pre><code class="python">Enter current password for root:&lt;–初次运行直接回车设置密码Set root password? [Y/n] &lt;– 是否设置root用户密码，输入y并回车或直接回车New password: &lt;– 设置root用户的密码Re-enter new password: &lt;– 再输入一次你设置的密码其他配置Remove anonymous users? [Y/n] &lt;– 是否删除匿名用户，回车Disallow root login remotely? [Y/n] &lt;–是否禁止root远程登录,回车,Remove test database and access to it? [Y/n] &lt;– 是否删除test数据库，回车Reload privilege tables now? [Y/n] &lt;– 是否重新加载权限表，回车初始化MariaDB完成，接下来测试登录mysql -u root -p</code></pre><h3 id="开启远程连接"><a href="#开启远程连接" class="headerlink" title="开启远程连接"></a>开启远程连接</h3><p>在mysql数据库中的user表中可以看到默认是只能本地连接的，所有可以添加一个新的用户，该用户可以远程访问</p><h4 id="1-创建用户"><a href="#1-创建用户" class="headerlink" title="1. 创建用户"></a>1. 创建用户</h4><pre><code class="python"># 先使用数据库use mysql;# 针对ipcreate user &#39;root&#39;@&#39;192.168.10.10&#39; identified by &#39;password&#39;;#全部 create user &#39;root&#39;@&#39;%&#39; identified by &#39;password&#39;;</code></pre><h4 id="2-授权"><a href="#2-授权" class="headerlink" title="2. 授权"></a>2. 授权</h4><pre><code class="python"># 给用户最大权限grant all privileges on *.* to &#39;root&#39;@&#39;%&#39; identified by &#39;password&#39;;# 给部分权限(test 数据库)grant all privileges on test.* to &#39;root&#39;@&#39;%&#39; identified by &#39;password&#39; with grant option;# 刷新权限表</code></pre><pre><code> flush privileges;# 查看show grants for &#39;root&#39;@&#39;localhost&#39;;</code></pre><p>接下来就可以在远程的数据库可视化工具中直接访问该服务器中的mysql了。</p><pre><code># 访问数据库mysql -u root -p</code></pre><h3 id="安装python3-6"><a href="#安装python3-6" class="headerlink" title="安装python3.6"></a>安装python3.6</h3><p>在centos中，系统默认只提供python2.7的版本，但是项目我们使用的python3.6的版本。所有我们自己安装python3</p><h4 id="安装Python3的方法"><a href="#安装Python3的方法" class="headerlink" title="安装Python3的方法"></a>安装Python3的方法</h4><p>首先安装依赖包</p><p>安装Python3.6所需要的依赖包：</p><pre><code>yum -y groupinstall &quot;Development tools&quot;yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel</code></pre><p>安装Python3.7还需额外安装依赖包：</p><pre><code>yum install libffi-devel -y</code></pre><p>然后根据自己需求下载不同版本的Python3，我下载的是Python3.6.2</p><pre><code class="python">wget https://www.python.org/ftp/python/3.6.2/Python-3.6.2.tar.xz然后解压压缩包，进入该目录，安装Python3tar -xvJf  Python-3.6.2.tar.xzcd Python-3.6.2./configure --prefix=/usr/local/python3make &amp;&amp; make install</code></pre><p>最后创建软链接</p><pre><code>ln -s /usr/local/python3/bin/python3 /usr/bin/python3ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3</code></pre><h3 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h3><h4 id="1-安装virtualenv"><a href="#1-安装virtualenv" class="headerlink" title="1. 安装virtualenv"></a>1. 安装virtualenv</h4><pre><code>yum install python-virtualenv</code></pre><h4 id="2-创建虚拟环境"><a href="#2-创建虚拟环境" class="headerlink" title="2. 创建虚拟环境"></a>2. 创建虚拟环境</h4><pre><code>virtualenv --no-site-packages envcd env# 激活虚拟环境source bin/activate</code></pre><h4 id="3-安装环境需要的包"><a href="#3-安装环境需要的包" class="headerlink" title="3. 安装环境需要的包"></a>3. 安装环境需要的包</h4><pre><code>pip3 install -r re_install.txt其中re_install.txt文件中记录的是需要安装包的名称以及对应的版本</code></pre><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>该部署采用的是cenots7系统来部署</p><p>Django的项目中，在工程目录下settings.py文件中有一个DEBUG=True参数，如果DEBUG=False则会出现js,css，img无法加载的情况出现。</p><p>原因如下：</p><p>Django框架仅在开发模式下提供静态文件服务。当我开启DEBUG模式时，Django内置的服务器是提供静态文件的服务的，所以css等文件访问都没有问题，但是关闭DEBUG模式后，Django便不提供静态文件服务了。想一想这是符合Django的哲学的：这部分事情标准服务器都很擅长，就让服务器去做吧！</p><h4 id="1-测试环境中部署方式"><a href="#1-测试环境中部署方式" class="headerlink" title="1. 测试环境中部署方式"></a>1. 测试环境中部署方式</h4><h5 id="urls-py中的修改"><a href="#urls-py中的修改" class="headerlink" title="urls.py中的修改"></a>urls.py中的修改</h5><p>在测试环境中一般都直接使用python manage.py runserver的方式去运行项目。其中就涉及到DEBUG=False的修改，静态目录的修改等，具体修改如下：</p><pre><code class="python">a) 修改settings.py配置文件中的DEBUG=False模式，修改ALLOEWD_HOST=[&#39;*&#39;]b) 修改工程目录下的urls.pyfrom django.views.static import serveurlpatterns = [    url(r&#39;^admin/&#39;, admin.site.urls),    url(r&#39;^axf/&#39;, include(&#39;axf.urls&#39;, namespace=&#39;axf&#39;)),    # 增加以下的url路由    url(r&#39;^static/(?P&lt;path&gt;.*)$&#39;, serve, {&quot;document_root&quot;: settings.STATICFILES_DIRS[0]}),    url(r&#39;^media/(?P&lt;path&gt;.*)$&#39;, serve, {&quot;document_root&quot;: settings.MEDIA_ROOT}),</code></pre><pre><code>    url(r&#39;^$&#39;, views.home)]</code></pre><h5 id="中间件的修改"><a href="#中间件的修改" class="headerlink" title="中间件的修改"></a>中间件的修改</h5><p>如果中间件是过滤哪些地址不需要登录验证的话，可以设置如下的static和media过滤地址的参数：</p><pre><code class="python"># 验证用户的登录状态paths = [&#39;/user/login/&#39;, &#39;/user/register/&#39;,         &#39;/axf/market/&#39;, &#39;/axf/marketparams/(\d+)/(\d+)/(\d+)/&#39;,        &#39;/static/[0-9a-zA-Z/\.]&#39;, &#39;/media/[0-9a-zA-Z/\.]&#39;]for path in paths:    if re.match(path, request.path):        return None</code></pre><h4 id="2-正式环境中部署方式"><a href="#2-正式环境中部署方式" class="headerlink" title="2. 正式环境中部署方式"></a>2. 正式环境中部署方式</h4><p>正式环境中部署为nginx+uwsgi来部署django项目</p><h5 id="2-1-安装nginx"><a href="#2-1-安装nginx" class="headerlink" title="2.1 安装nginx"></a>2.1 安装nginx</h5><p>a）添加nginx存储库<br>​<br>​    yum install epel-release</p><p>b) 安装nginx</p><pre><code>yum install nginx</code></pre><p>c) 运行nginx</p><p>Nginx不会自行启动。要运行Nginx<br>​<br>​    systemctl start nginx</p><p>nginx的运行命令：</p><pre><code class="python"> systemctl status nginx 查看nginx的状态 systemctl start/stop/enable/disable nginx 启动/关闭/设置开机启动/禁止开机启动</code></pre><p>d）系统启动时启用Nginx<br>​<br>​    systemctl enable nginx</p><p>e）如果您正在运行防火墙，请运行以下命令以允许HTTP和HTTPS通信：<br>​    </p><pre><code class="python">sudo firewall-cmd --permanent --zone=public --add-service=http sudo firewall-cmd --permanent --zone=public --add-service=httpssudo firewall-cmd --reload</code></pre><h4 id="3-配置uwsgi"><a href="#3-配置uwsgi" class="headerlink" title="3.配置uwsgi"></a>3.配置uwsgi</h4><h5 id="3-1-安装uwsgi"><a href="#3-1-安装uwsgi" class="headerlink" title="3.1 安装uwsgi"></a>3.1 安装uwsgi</h5><p>在虚拟环境中安装uwsgi，假设虚拟环境安装在/home/env/axfenv中</p><pre><code>/home/env/axfeng/bin/python3/pip3 install uwsgi</code></pre><h4 id="4-配置项目代码，配置项目nginx，配置uwsgi-ini等"><a href="#4-配置项目代码，配置项目nginx，配置uwsgi-ini等" class="headerlink" title="4. 配置项目代码，配置项目nginx，配置uwsgi.ini等"></a>4. 配置项目代码，配置项目nginx，配置uwsgi.ini等</h4><p><strong>在home文件中创建如下四个文件夹</strong></p><p>conf是配置文件，用于存放项目的nginx.conf文件，uwsgi.ini文件</p><p>logs是日志文件，用于存放nginx的启动成功和失败文件，以及uwsgi的运行日志文件</p><p>env是用于存放虚拟环境</p><p>src是项目文件，该目录下上传的是目录代码</p><h4 id="4-1-配置nginx-conf文件"><a href="#4-1-配置nginx-conf文件" class="headerlink" title="4.1 配置nginx.conf文件"></a>4.1 配置nginx.conf文件</h4><p><b>首先</b>：编写自己项目的nginx.conf文件如下：</p><p>每一个项目对应有一个自己定义的nginx的配置文件，比如爱鲜蜂项目，我定义为axfnginx.conf文件</p><pre><code class="python">server {     listen       80;     server_name 39.104.176.9 localhost;     access_log /home/logs/access.log;     error_log /home/logs/error.log;     location / {         include uwsgi_params;         uwsgi_pass 127.0.0.1:8890;     }     location /static/ {         alias /home/src/axf/static/;         expires 30d;     } }</code></pre><p><b>其次</b>：修改总的nginx的配置文件，让总的nginx文件包含我们自定义的项目的axfnginx.conf文件</p><p>总的nginx配置文件在：/etc/nginx/nginx.conf中</p><p><img src="/2018/12/14/Django/Django/django_centos_nginx_peizhi.png" alt="django_centos_nginx_peizhi"></p><p>以上步骤操作完成以后，需要重启nginx：</p><pre><code class="python">systemctl restart nginx</code></pre><h4 id="4-2-配置uwsgi文件"><a href="#4-2-配置uwsgi文件" class="headerlink" title="4.2 配置uwsgi文件"></a>4.2 配置uwsgi文件</h4><p>在conf文件夹下除了包含自定义的axfnginx.conf文件，还有我们定义的uwsgi.ini文件</p><pre><code class="python">[uwsgi]projectname = axfbase = /home/src# 守护进程master = true# 进程个数processes = 4# 虚拟环境pythonhome = /home/env/axfenv# 项目地址chdir = %(base)/%(projectname)# 指定python版本pythonpath = /usr/local/python3/bin/python3# 指定uwsgi文件module = %(projectname).wsgi# 和nginx通信地址:端口socket = 127.0.0.1:8890# 日志文件地址logto = /home/logs/uwsgi.log</code></pre><p>​<br>运行项目:</p><pre><code class="python">/home/env/axfeng/bin/python3/uwsgi --ini uwsgi.ini</code></pre>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django项目部署 </tag>
            
            <tag> MariaDB安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pygame相关</title>
      <link href="/2018/11/02/python/pygame%E7%9B%B8%E5%85%B3/"/>
      <url>/2018/11/02/python/pygame%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h4 id="01-pygame操作"><a href="#01-pygame操作" class="headerlink" title="01-pygame操作"></a>01-pygame操作</h4><p>模块的导入：</p><h5 id="import-pygame"><a href="#import-pygame" class="headerlink" title="import pygame"></a>import pygame</h5><pre><code class="python">if __name__ == &#39;__main__&#39;:    # 1.初始化游戏模块    pygame.init()    # 2.创建游戏窗口    &#39;&#39;&#39;    display.set_mode(窗口大小）:创建一个窗口并且返回    窗口大小：是一个元组，并且表示宽度和高度(单位是像素）    &#39;&#39;&#39;    window = pygame.display.set_mode((500,600))    # 3.让游戏一直运行，直到点关闭按钮结束    flag = True    while flag:        window.fill((255,255,255))        # 获取游戏过程中产生的所有事件        for event in pygame.event.get():            if event.type == pygame.QUIT:                # exit()   # 退出程序                flag = False</code></pre><h4 id="02-显示图片"><a href="#02-显示图片" class="headerlink" title="02-显示图片"></a>02-显示图片</h4><ul><li>给窗口填充颜色<br>颜色：计算机的三原色（红，绿，蓝），颜色对应的范围分别是0-255，可以通过改变三原色的值，调配出不同的颜色<br>颜色值：是一个元组，元组中有三个元素，分别是红绿蓝（rgb)<br>  红色（255，0，0），绿色（0，255，0），蓝色（0，0，255）<br>  黑色（0，0，0），白色（255，255，255）<br><code>window.fill((255,255,255))</code></li><li>显示图片<br>image.load(图片路径）：获取本地的一张图片，返回图片对象<ul><li>a.获取图片，创建图片对象<br><code>image = pygame.image.load(&#39;./files/gjl.jpg&#39;)</code><br>get_size():获取大小，返回值是一个元组，分别是宽和高<br><code>image_width,image_height =image.get_size()</code></li></ul></li><li>b.渲染图片（将图片画在纸上）<br>blit(渲染对象，位置）<br>  位置：坐标（x,y），值的类型是元组，元组有两个对应的元素，分别是x,y的坐标<pre><code class="python"># window.blit(image,(600-int(image_width),400-int(image_height)))将图片放到右下角  window.blit(image,(0,0))  # c.展示内容(将纸贴在画框上）  pygame.display.flip()</code></pre><h4 id="03-形变"><a href="#03-形变" class="headerlink" title="03-形变"></a>03-形变</h4>a.缩放<br>transform.scale(缩放对象，目标大小）：将指定的对象缩放到指定的大小，会返回缩放后的对象<br><code>new_image = pygame.transform.scale(image())</code><br>b.旋转缩放（指定缩放比例）<br>rotozoom(Surface,angle,scale)<br>Surface:旋转对象<br>angle:旋转角度<br>scale:缩放比例<br><code>new_image = pygame.transform.rotozoom(image,90,0.8)</code><br>c.旋转<br>rotate(Surface,angle)<br>Surface:旋转对象<br>angle:旋转角度<br><code>new_image = pygame.transform.rotate(image, 270)</code><h4 id="04-显示文字"><a href="#04-显示文字" class="headerlink" title="04-显示文字"></a>04-显示文字</h4></li><li><p>1.创建字体对象<br>a.创建系统的字体对象<br> SysFont(name,size,bold = False,italic = False)<br>name:字体名（系统支持的字体名）<br>size:字体大小<br>bold:是否加粗<br>italic:是否倾斜<br>b.创建自定义的字体对象<br>Font（字体文件路径，字体大小）<br>字体文件路径：ttf文件</p><pre><code class="python"># a.创建系统字体  # font = pygame.font.SysFont(&#39;Times&#39;,30)  # b.创建自定义字体  font = pygame.font.Font(&#39;./files/aa.ttf&#39;,50)</code></pre></li><li><p>2.根据字体去创建文字对象<br>render(text,antialias,color,background = None)<br>text:需要显示的文字（字符串）<br>antialias:是否平滑（布尔）<br>color:颜色<br>background:背景颜色</p><pre><code>text = font.render(&#39;Hello,高渐离 ！&#39;,True,(255,80,200))  print(text.get_size())</code></pre><h4 id="05-显示图形"><a href="#05-显示图形" class="headerlink" title="05-显示图形"></a>05-显示图形</h4><p>1.画直线<br>​    def line(Surface,color,star_pos,end_pos,width=1)<br>​    Surface:画在哪<br>​    color：颜色<br>​    star_pos：起点<br>​    end_pos：终点<br>​    width:线宽</p><pre><code># 画一条水平线  # pygame.draw.line(window,(255,0,0),(50,100),(200,100))  # pygame.draw.line(window, (255, 100, 200), (0, 0), (100, 100),10)</code></pre><p>2.画线段（折线）<br>​    def lines(Surface,color,close,pointlist,width=1)<br>​    Surface:画在那<br>​    color：颜色<br>​    close：是否闭合（是否连接起点和终点）<br>​    pointlist：点对应的列表<br>​    width：线的宽度<br><code>pygame.draw.lines(window,(255,100,200),True,[(0,0),(100,0),(100,100),(200,100),(200,200)],10)</code><br>3.画圆<br>​    def circle(Surface,color,pos,radius,width=1)<br>​    Surface:画在那<br>​    color：颜色<br>​    pos:圆心坐标<br>​    radius:半径<br>​    width:0–&gt;填充<br><code>pygame.draw.circle(window,(255,255,0),(200,300),100,0)</code><br>4.画矩形<br>​    def rect(Surface,color,Rect,width=0)<br>​    Surface:画在那<br>​    color：颜色<br>​    Rect:范围（元组，元组中有4个元素，分别是x,y,width,height)<br><code>pygame.draw.rect(window,(200, 150, 200), (200, 200, 250, 300),20)</code><br>5.画多边形<br>​    polygon(Surface,color,pointlist,width=0)<br>​    pointlist:多边形各点坐标，组成一个元组<br>6.画椭圆<br>​    def ellipse(Surface,color,Rect,width=0)<br><code>pygame.draw.ellipse(window, (200, 150, 200), (200, 200, 250, 300), 20)</code><br>7.画弧线<br>​    def arc(Surface,color,Rect,start_angle,stop_angle,width=1)<br><code>import math​    pygame.draw.arc(window,(255,0,0),(100, 100, 100, 100),math.pi,math.pi/2,10)</code></p><h4 id="06-事件"><a href="#06-事件" class="headerlink" title="06-事件"></a>06-事件</h4><p>所有的事件处理的入口就是这个for循环</p><ul><li><p>for循环中的代码只有游戏事件发生后才会执行<br>   a.事件的type:<br>   QUIT：关闭按钮被点击事件<br>   鼠标事件：<br>   MOUSEBUTTONDOWN：鼠标按下事件<br>   MOUSEBUTTONUP：鼠标弹起<br>   MOUSEMOTION:鼠标移动<br>   键盘事件：<br>   KEYDOWN:键盘按下<br>   KEYUP:键盘弹起</p><p>   b.事件的pos–鼠标事件发生的位置（坐标）</p><p>   c.事件的key–键盘事件被按的键对应的编码值</p><pre><code class="python">    for event in pygame.event.get():        # 不同的事件发生后，对应的type值不一样        if event.type == pygame.QUIT:            print(&#39;点击关闭&#39;)            exit()        elif event.type == pygame.MOUSEBUTTONDOWN:            # 鼠标按下要做的事情            print(event.pos)            print(&#39;鼠标按下&#39;)            # 鼠标按下一次画一个球            pygame.draw.circle(window,(random.randint(0,255),random.randint(0,255),random.randint(0,255)),event.pos,20)            pygame.display.flip()        elif event.type == pygame.MOUSEBUTTONUP:            print(&#39;鼠标弹起&#39;)        elif event.type == pygame.MOUSEMOTION:            print(&#39;鼠标正在移动&#39;,event.pos)        elif event.type == pygame.KEYDOWN:            print(&#39;键盘按下&#39;,event.key,chr(event.key))        elif event.type == pygame.KEYUP:            print(&#39;键盘弹起&#39;)</code></pre><h4 id="07-动画效果"><a href="#07-动画效果" class="headerlink" title="07-动画效果"></a>07-动画效果</h4><pre><code class="python"># c.展示内容(将纸贴在画框上）pygame.display.flip()# 圆心坐标x = 100y = 100r = 50add = 4m = 2n = 1# 游戏循环while True:    pygame.time.delay(5)    # 将之前window上的内容覆盖了    window.fill((255,255,255))    # 不断的画圆    pygame.draw.circle(window,(randint(0,255),randint(0,255),randint(0,255)),(x,y),r)    pygame.display.update()    # 改变y值让圆在垂直方向移动    y += m    x += n    # r += add    # if r &gt;=600 or r &lt;= 20 :    #     add *= -1    if y &gt;= 600 - r or y &lt;= 50:        m *= -1    elif x &gt;= 400-r or x &lt;= 50:        n *= -1    # 事件检测    for event in pygame.event.get():        if event.type == pygame.QUIT:            exit()</code></pre><h4 id="08-按住不放原理"><a href="#08-按住不放原理" class="headerlink" title="08-按住不放原理"></a>08-按住不放原理</h4><pre><code class="python">import pygameif __name__ == &#39;__main__&#39;:# 初始化，创建窗口pygame.init()window = pygame.display.set_mode((400,600))window.fill((255,255,255))image = pygame.image.load(&#39;./files/gjl.jpg&#39;)# 缩放image = pygame.transform.rotozoom(image,0,0.5)window.blit(image,(100,100))# 获取图片的宽度、高度image_w,image_h = image.get_size()# c.展示内容(将纸贴在画框上）pygame.display.flip()# 用来存储图片是否移动flag = False# 保存图片的坐标image_x,image_y = 100,100</code></pre><pre><code class="python"># 游戏循环while True:    for event in pygame.event.get():        if event.type == pygame.QUIT:            exit()        # 鼠标按下        if event.type == pygame.MOUSEBUTTONDOWN:            # 判断鼠标的范围是否在图片上            m_x,m_y = event.pos            if image_x&lt;=m_x&lt;=image_x+image_w and image_y&lt;=m_y&lt;=image_y+image_h:                flag = True        elif event.type == pygame.MOUSEBUTTONUP:            flag = False        # 鼠标移动事件        # 鼠标在移动，并且flag为True        if event.type == pygame.MOUSEMOTION and flag:            # 填充背景色            window.fill((255,255,255))            # 在鼠标移动的位置渲染图片            # window.blit(image,event.pos            center_x,center_y = event.pos            image_x, image_y = center_x - image_w/2,center_y - image_h/2            window.blit(image,(image_x, image_y))            # 更新屏幕显示            pygame.display.update()</code></pre></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> game </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python-summary2</title>
      <link href="/2018/11/01/python/python-summary2/"/>
      <url>/2018/11/01/python/python-summary2/</url>
      
        <content type="html"><![CDATA[<h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><h4 id="一、文件的读和写"><a href="#一、文件的读和写" class="headerlink" title="一、文件的读和写"></a>一、文件的读和写</h4><ul><li>1.程序中不管操作任何文件，不管怎么操作，过程都是一样的<br>过程：打开文件–》操作（读/写）–》关闭文件</li><li>2.做数据持久化、本地化，都要使用文件来保存数据<br>（数据库文件、txt文档、json文件、plist、xml文件等、二进制文件（图片、视频、音频等））</li></ul><p>程序中通过变量、列表、字典等保存的数据，在程序结束后都会被销毁的。</p><h6 id="1-打开文件"><a href="#1-打开文件" class="headerlink" title="1.打开文件"></a>1.打开文件</h6><pre><code>open(文件地址file,打开方式mode，encoding = 编码方式)</code></pre><ul><li>a.文件地址：告诉open要打开的是哪个文件，填文件路径（可以填绝对路径，也可以填相对路径）<br>绝对路径：C:/Users/Administrator/Desktop/txt.txt<br>相对路径：./相对路径（相对于当前文件所在的目录）    ../相对路径（相对于当前文件所在的目录的上一层目录）<br>  一次向外扩展</li><li>b.打开方式：获取文件的内容以读的形式打开，往文件中写内容就以写的形式打开<br> ‘r’–》读（默认值），读出来的内容以文本（str)的形式返回<br>  ‘rb’/‘br’–》读，读出来的内容以二进制（bytes)的形式返回<br>  ‘w’–》写，写文本到文件中<br>  ‘wb’/‘bw’–》写，写二进制数据到文本中<br>  ‘a’–》写，追加<ul><li>c.编码方式：以文本的形式读和写的时候才需要设置编码方式<br>utf-8:万国码<br>gbk:只支持中文</li><li>d.open函数的返回值是被打开的文件对象</li></ul></li></ul><h6 id="2-关闭文件"><a href="#2-关闭文件" class="headerlink" title="2.关闭文件"></a>2.关闭文件</h6><p>文件对象.close</p><pre><code class="python"> # 1.打开文件 # f1 = open(&#39;D:/编程Python/Python代码/我的python/08-31函数和文件操作&#39;,&#39;rb&#39;)    f1= open(&#39;./程序员.txt&#39;,&#39;rb&#39;) # 2.文件关闭       f1.close()</code></pre><h5 id="3-操作文件"><a href="#3-操作文件" class="headerlink" title="3.操作文件"></a>3.操作文件</h5><h6 id="a-读操作"><a href="#a-读操作" class="headerlink" title="a.读操作"></a>a.读操作</h6><pre><code class="python">    read():从文件的开头读到文件结束    readline():读一行 # 打开文件，f就是被打开的文件对象    f = open(&#39;./程序员.txt&#39;,&#39;r&#39;,encoding = &#39;utf-8&#39;) # 获取文件中所有内容，将结果返回给content保存    content = f.read()    print(content) # 前面已经读完了，接着往后读，读不到内容    print(&#39;!!!:&#39;,f.readline())    f.close()    print(&#39;=========================&#39;)    f1 = open(&#39;./程序员.txt&#39;,&#39;r&#39;,encoding=&#39;utf-8&#39;) # 从文件开始读到第一行结束    content = f1.readline()    print(content) # 从文件第二行开始，读到第二行结束    print(f1.readline()) # 从第三行开始，读到文件结束    print(f1.read())    f1.close()</code></pre><h6 id="练习：读文件中的内容，一行一行的读，读完为止"><a href="#练习：读文件中的内容，一行一行的读，读完为止" class="headerlink" title="练习：读文件中的内容，一行一行的读，读完为止"></a>练习：读文件中的内容，一行一行的读，读完为止</h6><pre><code class="python">print(&#39;```````````&#39;)    f2 = open(&#39;./程序员.txt&#39;, &#39;r&#39;, encoding=&#39;utf-8&#39;)    content = f2.readline()    while content:        print(&#39;line:&#39;, content)        content = f2.readline()    f2.close()</code></pre><h6 id="b-操作"><a href="#b-操作" class="headerlink" title="b.操作"></a>b.操作</h6><pre><code class="python">write(写的内容）&#39;w&#39;--&gt;写操作，完全覆盖原文件的内容&#39;a&#39;--&gt;写操作，在原文件的内容后去追加新的内容# f3 = open(&#39;./test.txt&#39;,&#39;a&#39;,encoding = &#39;utf-8&#39;)# f3.write(&#39;程序员的诗&#39;)# f3.close()</code></pre><h4 id="4-文件不存在的情况"><a href="#4-文件不存在的情况" class="headerlink" title="4.文件不存在的情况"></a>4.文件不存在的情况</h4><p>当以读的形式打开文件的时候，如果文件不存在，程序会崩溃<br>当以写的形式打开一个不存在的文件的时候，会自动创建一个新的文件</p><pre><code class="python"># f4 = open(&#39;./test2.txt&#39;,&#39;w&#39;,encoding = &#39;utf-8&#39;)    # f4.write(&#39;你好,初次见面请多关照&#39;)    # f4.close()</code></pre><h6 id="练习：统计一个模块的执行次数"><a href="#练习：统计一个模块的执行次数" class="headerlink" title="练习：统计一个模块的执行次数"></a>练习：统计一个模块的执行次数</h6><pre><code class="python"># def num1():    # while True:    f5 = open(&#39;./test2.txt&#39;, &#39;r&#39;, encoding=&#39;utf-8&#39;)    content = int(f5.read())    print(content)    f5.close()    f5 = open(&#39;./test2.txt&#39;, &#39;w&#39;, encoding=&#39;utf-8&#39;)    content += 1    f5.write(str(content))    print(content)    f.close()</code></pre><h4 id="对文件进行操作后，文件自动关闭"><a href="#对文件进行操作后，文件自动关闭" class="headerlink" title="对文件进行操作后，文件自动关闭"></a>对文件进行操作后，文件自动关闭</h4><pre><code class="python">if __name__ == &#39;__main__&#39;:    # 读二进制（上传文件）    with open(&#39;./filess/8.jpg&#39;,&#39;rb&#39;) as  f:        # bytes是Python中内置的数据类型，用来表示二进制数据        content = f.read()        print(type(content))        print(content)    # 将二进制数据写入文件（下载图片）    with open(&#39;./filess/r.jpg&#39;,&#39;wb&#39;) as ff:            ff.write(content)</code></pre><h4 id="二、对json文件的操作"><a href="#二、对json文件的操作" class="headerlink" title="二、对json文件的操作"></a>二、对json文件的操作</h4><pre><code class="python">json是有特定格式的一种文本形式，它有自己的语法json文件就是后缀是.json的文本1.json格式应的数据类型及其表现a.一个json文件中只能存一个数据，这个数据的类型必须是以下类型中的一个对象类型，数组，数字，字符串，布尔，null类型：                                  格式                          意义对象（object）:                      {&quot;a&quot;:10,&quot;b&quot;:[1,2]}             相当于字典数组（array）                      [100,&quot;a10bc&quot;true,[1,2]]         相当于列表，里面的元素可以是任何类型数字（number）                       0,100,30,3.14,-100               包含整数和小数1字符串（string）                     &quot;abc&quot;,&quot;hello jason&quot;布尔：                               true/false                       是（真）/否（假）null：                               null                             空值2.Python对json数据的支持json---python对象               字典（dict)数组               列表list)数字               整数（int)和浮点数（float)布尔/true,false    布尔（bool)/True,Falsenull               None</code></pre><p>json 模块是Python中，内置的，专门用来处理json的数据文件<br>1.load(json文件对象）：以json的格式，获取原文件中的内容。将文件内容转换成相应的Python数据<br>2.loads(json格式内容的字符串)，编码方式）：获取的是二进制的文件，将json格式的字符串，转换成Python对应数据<br>3.dump（需要写入json文件中的Python数据，json文件对象）：将原文件写入json中<br>4.dumps（需要转换成json格式字符串的Python数据）：将文件以二进制方式写入json文件中</p><pre><code class="python">import jsonif __name__ == &#39;__main__&#39;:    # 1.josn转python数据    with open(&#39;./filess/json1.json&#39;,&#39;r&#39;,encoding = &#39;utf-8&#39;) as f:        content = json.load(f)        print(content)        print(type(content))    content1 = json.loads(&#39;&quot;abc&quot;&#39;, encoding=&#39;utf-8&#39;)    print(content1,type(content1))</code></pre><pre><code>python ---&gt;             json    字典                    对象    列表、元组               数组    整数/浮点数              数字    布尔/True,False         true,false    字符串                   字符串（双引号）    None                     null</code></pre><pre><code class="python"> with open(&#39;./filess/new.json&#39;,&#39;w&#39;,encoding=&#39;utf-8&#39;) as f:        json.dump({&#39;a&#39;:100,&#39;h&#39;:200},f)        # json.dump([1,2,3,&#39;abc&#39;],f)        # json.dump((1,2,&#39;abc&#39;,100,True),f)        # 注意：Python中的集合不能转换成json数据        # json.dump({11,22,&#39;aa&#39;},f)</code></pre><ul><li>练习，用json文件来保存一个班的班级信息，包括班级名和班上的所有的学生（名字、年龄和电话）<br>输入学生信息，添加学生<br>根据姓名删除学生<br>(做到数据持久化）<br><code>`</code>python<br>json文件的数据格式<br>{<br>  “class_name”:”班级名”<br>  “all_students”:[<pre><code>  {&quot;name&quot;:&quot;名字&quot;，&quot;age&quot;:&quot;年龄&quot;,&quot;tel&quot;:&quot;电话&quot;},  {&quot;name&quot;:&quot;名字&quot;，&quot;age&quot;:&quot;年龄&quot;,&quot;tel&quot;:&quot;电话&quot;},  {&quot;name&quot;:&quot;名字&quot;，&quot;age&quot;:&quot;年龄&quot;,&quot;tel&quot;:&quot;电话&quot;}</code></pre>  ]<br>}</li></ul><h1 id="1-读出保存班级信息对应的json文件中的内容"><a href="#1-读出保存班级信息对应的json文件中的内容" class="headerlink" title="1.读出保存班级信息对应的json文件中的内容"></a>1.读出保存班级信息对应的json文件中的内容</h1><p>with open(‘./filess/class_info.json’,’r’,encoding=’utf-8’) as f:<br>    class_content = json.load(f)<br>    print(class_content)</p><pre><code># 输入添加信息</code></pre><p>name = input(‘请输入姓名：’)<br>age = input(‘请输入年龄：’)<br>tel = input(‘请输入电话：’)<br>stu = {“name”:name,”age”:int(age),”tel”:tel}<br>class_content[‘all_student’].append(stu)</p><p>class_info = {<br>    ‘class_name’: ‘python1806’,<br>    ‘all_student’:[<br>        stu<br>    ]<br>}</p><h1 id="将最新的数据写入文件中"><a href="#将最新的数据写入文件中" class="headerlink" title="将最新的数据写入文件中"></a>将最新的数据写入文件中</h1><p>with open(‘./filess/class_info.json’,’w’,encoding=’utf-8’) as f:<br>    json.dump(class_content,f)</p><p>数据的持久化：<br>1.将数据从文件中读出来<br>2.修改数据（增、删、改）<br>3.将新的数据在写入文件中</p><pre><code>#### 三、异常捕获1.为什么要使用异常捕获异常：程序崩溃了，报错了程序出现异常，但不想因为这个异常而让这个程序崩溃，这个时候就可以使用异常捕获机制2.怎么捕获异常形式1：捕获try后代码块里面所有的异常try:——需要捕获异常的代码块（可能会出现异常的代码块）except:——出现异常后执行的代码块执行过程：执行try后面的代码块，一旦遇到异常，就马上执行except后面的代码块，执行完后再执行其他语句​          如果try里面的代码块没有异常，就不执行except后面的代码块，而是直接执行其他语句b.形式2：try:——需要捕获异常的代码块（可能会出现异常的代码块）except 错误类型:——出现异常后执行的代码块执行过程：执行try后面的代码块，一旦遇到指定的错误类型的异常，就马上执行except后面的代码块，执行完后再执行其他语句​          如果try里面的代码块没有遇到指定的异常，就不执行except后面的代码块，而是直接执行其他语句c.形式3try:——需要捕获异常的代码块（可能会出现异常的代码块）except （错误类型1，错误类型2.....):——出现异常后执行的代码块d.形式4try:——需要捕获异常的代码块（可能会出现异常的代码块）except 错误类型1:——执行语句1except 错误类型2:——执行语句2e.形式5try:——需要捕获异常的代码块（可能会出现异常的代码块）​    （在这而做程序异常退出的善后，一般做保存数据和进度的工作）except:——出现异常后执行的代码块finally:——不管有没有异常，都会执行（就算崩溃了，也会执行）```pythonif __name__ == &#39;__main__&#39;:    # 1.什么情况时使用    # a.输入两个数，让后求这两个数的商是多少    # num1 = float(input(&#39;除数：&#39;))    # num2 = float(input(&#39;被除数：&#39;))    # print(&#39;%f /%f = %f&#39; % (num1,num2,num1/num2))    try:        num1 = float(input(&#39;除数：&#39;))        num2 = float(input(&#39;被除数：&#39;))        print(&#39;%f /%f = %f&#39; % (num1, num2, num1 / num2))    except :        print(&#39;输入错误，请重新输入&#39;)    # b.打开一个不存在的文件，不希望程序崩溃，只是让读出的内容为空    import json    # with open(&#39;./files/info.json&#39;,&#39;r&#39;,encoding= &#39;utf-8&#39;) as f:    #     content = json.load(f)    try:        with open(&#39;./files/info.json&#39;, &#39;r&#39;, encoding=&#39;utf-8&#39;) as f:            content = json.load(f)    except FileNotFoundError:        print(&#39;文件不存在&#39;)    # 2.捕获异常    # a = [1,2,3,4,5]    # try:    #     print(a[6])    # except:    #     print(&#39;捕获到异常&#39;)    # print(&#39;==========&#39;)    #    # dict1 = {&#39;a&#39;:1,&#39;b&#39;:2}    # try:    #     dict1[&#39;c&#39;]    #     print(a[6])    # except IndexError:    #     print(&#39;下标越界&#39;)    # except KeyError:    #     print(&#39;key错误&#39;)# 3.抛出异常（后面补充）    num = input(&#39;请输入一个奇数：&#39;)    if int(num) % 2 == 0:        raise ValueError</code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python-summary</title>
      <link href="/2018/11/01/python/python-summary/"/>
      <url>/2018/11/01/python/python-summary/</url>
      
        <content type="html"><![CDATA[<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h4 id="一、认识函数"><a href="#一、认识函数" class="headerlink" title="一、认识函数"></a>一、认识函数</h4><ul><li>没有函数的时候问题是什么？<br>1.同样的代码需要写多次<br>2.一个功能的需求发生改变，需要修改多个地方</li><li>怎么解决以上问题？<br>使用函数：提高代码的复用度，让程序更简洁，封装<h4 id="二、函数的声明和调用"><a href="#二、函数的声明和调用" class="headerlink" title="二、函数的声明和调用"></a>二、函数的声明和调用</h4></li><li><p>1.什么是函数：函数就是对实现某一特定功能的代码段封装</p></li><li><p>2.函数的分类：内置函数和自定义函数<br>内置函数：系统写好，可以直接使用的函数。例如：print函数、input函数、sum函数、len函数ect.<br>自定义函数：程序员自己去创建的函数</p></li><li><p>3.函数的声明（定义）<br>a.固定格式</p><pre><code class="python">def 函数名（参数列表）：    函数的说明文档    函数体</code></pre><p>b.说明：<br>def：python中声明函数的关键字<br>函数名：标识符，不能是关键字；PEP8（所有字母小写，多个单词用下划线隔开），见名知义<br>（）：固定格式，并且必须写<br>参数列表：参数名1，参数名2，参数名3….    参数可以有多个，也可以没有。这儿的参数也叫形参，参数是用来从函数的外面，向函数里面传值用的（将数据从函数的外面传递到函数的里面）<br>函数体：实现函数功能的代码段。函数体中可能会包含return语句<br>c.初学者声明函数的过程<br>第一步：确定函数的功能<br>第二步：根据功能确定函数名<br>第三步：确定参数（确定有没有，确定有几个），看实现函数的功能，需不需要从函数外面传递数据进来。需要几个就定义几个参数<br>第四步：实现函数功能<br>第五步：确定返回值</p></li><li><p>4.注意：函数体只在调用的时候才会执行（特别重要）</p></li><li><p>5.函数调用<br>a.固定格式：函数名（实参列表）<br>b.说明：<br>函数名：你要调用哪个函数，就写对应的函数名。函数只能是先声明好的才能调用<br>实参列表：就是用来给形参赋值的<br>——写一个函数，打印两个数的和<br><code>`</code>python<br>def sum2(num1,num2):<br>  print(‘==========’)<br>  print(num1+num2)</p></li></ul><h1 id="调用函数sum2"><a href="#调用函数sum2" class="headerlink" title="调用函数sum2"></a>调用函数sum2</h1><p>sum2(100, 11)<br>print(‘<del>~</del><del>~</del>‘)</p><h1 id="函数可以多次调用"><a href="#函数可以多次调用" class="headerlink" title="函数可以多次调用"></a>函数可以多次调用</h1><p>sum2(50, 2)</p><pre><code>+ 6.函数的调用过程（必须掌握）  a.回到函数声明的位置  b.使用实参给形参赋值（传参）---传参的时候一定要保证每个形参都有值  c.执行函数体  d.将返回值返回给函数调用者  e.回到函数调用的地方，接着往后执行  ——练习：写一个函数，打印一个整数的阶乘```pythondef fac(number3):    sum = 1    for x in range(1,number3 + 1):        sum *= x    print(&#39;%d!是：%d&#39; % (x,sum))fac(2)fac(10)</code></pre><h4 id="三、函数的参数"><a href="#三、函数的参数" class="headerlink" title="三、函数的参数"></a>三、函数的参数</h4><ul><li>参数：声明函数的时候的参数列表中的参数叫形参；调用函数的时候，参数列表中的参数叫实参</li><li>传参：传参的过程就是使用实参给形参赋值的过程。一定保证每个形参都要有值</li></ul><p>######实参</p><ul><li>1.位置参数：传参的时候和形参的位置一一对应（第一个实参传给第一个形参，第二个实参传给第二个形参…)</li><li>2.关键字参数：函数调用的时候通过’形参名= 实参’的形式来传参<br><code>`</code>python<br>关键字参数<br>def func1(a,b,c):<br>  print(a,b,c)</li></ul><p>1.位置参数<br>func1(‘abc’,10,True)<br>2.关键字参数<br>func1(b=’abc’,a=10,c=True)<br>3.关键字参数和位置参数结合<br>func1(10,20,c=30)</p><pre><code>+ 3.参数的默认值  a.在声明函数的时候，可以给参数赋默认值（可以给全部参数赋默认值，也可以给部分参数赋默认值）  给部分参数赋默认值的时候，要求有默认值的参数必须放到参数列表最后  b.调用参数默认值的函数的时候，，没有默认值的参数必须传参，有默认值的参数可以传参也可以不传参```python 声明函数的时候每个参数都有默认值def func2(a=100,b=&#39;a&#39;,c=True):    print(a,b,c)3.1所有的参数都不传参，全部使用默认值func2()3.2给部分参数传参func2(10)func2(b=&#39;abc&#39;)3.3参数列表中，部分参数有默认值（有默认值的参数必须放到最后）def func3(a,b,c=10):    print(a,b,c)func3(100,200)func3(b=100,a=200)#  func3(b=100)     错误，a没有值func3(200,b=100)</code></pre><ul><li>4.不定个数参数<br>python中通过在形参名前加<em>号，让这个形参变成元组，来让这个形参同时接受多个实参，多个包含0<br><code>`</code>python<br>写一个函数，计算多个数的和<br>def sum2(</em>nums):<br>  print(nums,type(nums))<br>  sum1=0<br>  for item in nums:<pre><code>  sum1 += item  print(sum1)</code></pre></li></ul><p>sum2()<br>sum2(5)<br>sum2(1,2,3,4,5,6,7,8,9,10)</p><p> 写一个函数，统计指定班级中所有学生的成绩<br>def class_info(class_name,ID,*scores,):</p><h1 id="def-class-info-class-name-ID-’ID’-scores"><a href="#def-class-info-class-name-ID-’ID’-scores" class="headerlink" title="def class_info(class_name,ID=’ID’,*scores):"></a>def class_info(class_name,ID=’ID’,*scores):</h1><pre><code>print(class_name,ID,scores)</code></pre><p>class_info(‘python1806’,95,85,95,90,75,88)<br>class_info(‘班级名’,’ID’,90,80,95,87,77)</p><pre><code>+ 5.对参数的类型进行说明  Python不能直接约束一个变量的类型，但是可以通过说明，来提示用户调用函数的时候，参数类型</code></pre><p>def func4(name:str,age:int,study_id:str):<br>    print(name,age)</p><pre><code># print(study_id.ljust())</code></pre><p>func4(‘abc’,’10’,’001’)</p><pre><code>#### 五、函数的返回值```pythondef download(ID):    &quot;&quot;&quot;    通过地址下载    （函数功能的描述）    :param ID:str,下载数据的地址    :return: None/下载到的数据    &quot;&quot;&quot;    pass    # 判断是否有网    # 如果没有网络：    #     return    # 下载数据    # 解析数据    # 存储数据</code></pre><ul><li>1.返回值：函数的返回值就是return关键字后面的表达式的值。就是函数调用表达式的结果</li><li><p>2.Python中所有的函数都有返回值，默认是None(没有return)<br>说明：<br>a.如果函数体中没有return，函数的返回值就是None<br>b.调用函数的语句就是函数调用表达式</p><pre><code class="python">1.没有renturn——写一个函数，打印&#39;hello&#39;def say_hello():  print(&#39;hello&#39;)声明一个变量re，来保存函数调用后的结果say_hellore = say_hello()print(re)</code></pre><p>2.return关键字（return只能写在函数体中）<br>a.确定返回值<br>b.结束函数（函数中只要遇到return，函数就直接结束）<br>c.单独的return相当于return None</p></li></ul><pre><code class="python">def func1(n):    print(n)    return  100      # return后面的函数体不执行了    print(&#39;=====&#39;)re = func1(10)print(re)—— 练习：下面的函数的返回值是多少def func2():    if False:        return 200print(func2())     # None</code></pre><ul><li>注意：看一个函数的返回值是多少，不是看函数中有没有return,而是看函数执行的过程中遇没遇到return。<br>遇到了return，就是return后面的结果，没遇到就是None<pre><code class="python">练习：写一个函数判断一个数是否是偶数，如果是返回True，否则返回Falsedef number(x):  if x % 2 ==0:      return True  else:      return False  #   return bool(number %2 == 0)even = number(10)print(number(10))print(even)</code></pre>什么时候函数需要返回值？<br>——只要实现函数功能会产生新的数据，就通过返回值将新的数据返回，进行其他操作，而不是打印<br>——练习：写一个函数，统计一个列表中浮点数的个数</li></ul><pre><code class="python">def count_of_float(list1:list):    #  统计个数    count = 0    for item in list1:        #  判断每个元素是否是浮点数        if isinstance(item,float):            count += 1    return countcount = count_of_float([10.0,1,2,0.5,0.1,])print(count)print(&#39;这个列表中浮点数的个数是%d&#39;% (count))</code></pre><p>——练习：将一个数字列表中所有的元素的值都变成原来的2倍</p><pre><code class="python">def two_list(list2:list):    for index in range(len(list2)):        list2[index] *= 2    return list2list2 = [1,2,3,4,5]two_list(list2)print(list2)result = two_list([11,22,33])print(result)</code></pre><p>——练习：写一个函数，获取指定元素对应的下标</p><pre><code class="python">def indexs(list3:list,item):    index_list = []    for index in range(len(list3)):        if list3[index] == item:            index_list.append(index)    return index_listindexs([1,1,2,3,4,5,6,1],1)all_index = indexs([1,1,2,3,4,5,6,1],1)print(all_index)</code></pre><ul><li><p>补充：判断一个值是否是指定类型</p><pre><code class="python">isinstance（值，类型）print（isinstance(10,int)）</code></pre></li></ul><h4 id="六、匿名函数"><a href="#六、匿名函数" class="headerlink" title="六、匿名函数"></a>六、匿名函数</h4><p>&emsp;&emsp;匿名函数本质还是函数，之前函数所有的内容都适用于它<br>&emsp;1.匿名函数的声明<br>函数名=lambda   参数列表：返回值<br>&emsp;2.说明<br>函数名 = 变量名</p><ul><li>lambda:声明匿名函数的关键字</li><li>参数列表：参数名1，参数名2，参数名3….</li><li>冒号：固定写法</li><li>返回值：表达式，表达式的值就是返回值</li></ul><p>&emsp;3.调用<br>匿名函数的调用和普通函数一样<br>函数名（实参列表）</p><h5 id="写一个匿名函数，计算两个数的和"><a href="#写一个匿名函数，计算两个数的和" class="headerlink" title="写一个匿名函数，计算两个数的和"></a>写一个匿名函数，计算两个数的和</h5><pre><code class="python"># 声明一个匿名函数my_sum = lambda x,y: x + y# 匿名函数result = my_sum(10,20)print(result)</code></pre><h5 id="下面这个函数和my-sum-lambda-x-y-x-y等价的"><a href="#下面这个函数和my-sum-lambda-x-y-x-y等价的" class="headerlink" title="下面这个函数和my_sum = lambda x,y: x + y等价的"></a>下面这个函数和my_sum = lambda x,y: x + y等价的</h5><pre><code class="python">def my_sum(x,y):    result = x+ yprint(result)</code></pre><h5 id="练习：写一个匿名函数，获取指定数字列表指定下标的值的1-2"><a href="#练习：写一个匿名函数，获取指定数字列表指定下标的值的1-2" class="headerlink" title="练习：写一个匿名函数，获取指定数字列表指定下标的值的1/2"></a>练习：写一个匿名函数，获取指定数字列表指定下标的值的1/2</h5><h6 id="匿名函数的参数可以设默认值"><a href="#匿名函数的参数可以设默认值" class="headerlink" title="匿名函数的参数可以设默认值"></a>匿名函数的参数可以设默认值</h6><pre><code class="python">figure = lambda list1,index1=0:list1[index1]/2</code></pre><h5 id="位置参数"><a href="#位置参数" class="headerlink" title="位置参数"></a>位置参数</h5><pre><code class="python">print(figure([1,2,3,4,5,6],3))print(figure([1,2,3,4,5,6]))print(figure(list1 = [1,2,3,4,5,6],index1=1))# result = list1[index]</code></pre><h6 id="获取一个列表的所有元素的和和平均值"><a href="#获取一个列表的所有元素的和和平均值" class="headerlink" title="获取一个列表的所有元素的和和平均值"></a>获取一个列表的所有元素的和和平均值</h6><pre><code class="python">list_operation = lambda list2:(sum(list2),sum(list2)/len(list2))sum1,average = list_operation([1,2,3,4,5,6])print(sum1,average)</code></pre><ul><li>补充：Python中的函数可以有多个返回值，就是在return返回多个值，多个值之间用逗号隔开<br><code>`</code>python<br>def list_operation2(list2):<br>  return sum(list2),sum(list2)/len(list2)          # 最终是多个返回值放到一个元组中返回<br>print(list_operation([1,2,3,4,5,6]))</li></ul><p>变量名 = lamdba 参数列表：返回值 function</p><pre><code>#### 七、变量的作用域- 1.函数的调用过程是一个压栈的过程：  每次调用一个函数，系统就会在内存区域中的栈区间，保存函数调用过程中产生的数据。  当函数调用完成后，对应的栈区间会自动销毁  函数调用时产生的栈区间中保存的数据：形参、在函数中声明的变量```pythondef func1(a,b):    &#39;&#39;&#39;    赋值    :param a: 20    :param b: 30    :return: 20，30，100    &#39;&#39;&#39;    # 调用完后会被销毁    c = 100    print(a,b,c)func1(20,30)</code></pre><ul><li><p>2.什么是作用域：<br>指的是一个变量能够使用的范围</p></li><li><p>3.全局变量和局部变量<br>a.全局变量：声明在函数和类的外面的变量都是全局变量<br>全局变量的作用域：从声明开始到文件结束（任何地方都可以使用）</p></li></ul><pre><code class="python">a = 100       # 全局变量if a &gt; 10:    b = 20   #  全局变量# x 也是全局变量for x in range(10):    print(x)</code></pre><p>&emsp;b.局部变量：声明在函数中或者类中的变量就是局部变量<br>局部变量的作用域：从声明开始到函数结束或者是从声明开始到类结束</p><ul><li>注意：函数的参数是声明在函数中的局部变量<br><code>`</code>python<br>def func3(x1,y1):<br>  z = ‘abc’<br>  print(x1,y1,z)</li></ul><p>func3(‘a’,’b’)<br>—— 局部变量只能在声明的那个函数中使用，不能在函数外面使用</p><h1 id="print-z-NameError-name-‘z’-is-not-defined"><a href="#print-z-NameError-name-‘z’-is-not-defined" class="headerlink" title="print(z)          NameError: name ‘z’ is not defined"></a>print(z)          NameError: name ‘z’ is not defined</h1><p>c.global关键字：是在函数中声明一个全局变量<br>nonlocal  不声明局部变量<br>num1 = 1   # 全局变量<br>def func4():</p><pre><code># 局部变量num1 = 200print(num1)   # 如果全局变量和局部变量的同名，那局部变量的作用域内是使用的局部变量的值# 想要在局部变量区域内修改全局变量的值global num2        # 说明从这句开始后面num2都是全局变量global num3        # 直接在局部区域声明一个全局变量anum3 = &#39;aaa&#39;num2 = 199print(num2)</code></pre><p>func4()<br>print(num1)</p><p>def func5():</p><pre><code># 局部变量nn = 10print(&#39;func5&#39;,nn )# 函数中可以声明函数def func6 ():    nonlocal nn  # 在局部的局部中修改局部变量的值    nn = 20    print(&#39;func6&#39;,nn)func6()print(&#39;func5&#39;,nn)</code></pre><p>func5()</p><p>def func():<br>    a = []<br>    for i in range(5):<br>        a.append(lambda x:x*i)<br>    return a<br>aa = func()<br>print(aa<a href="2">0</a>,aa<a href="2">2</a>,aa<a href="2">3</a>)</p><pre><code>#### 八、递归函数- 1.什么是递归函数？  就是在函数的函数体中调用函数本身，这样的函数就是递归函数- 2.递归的特点  while循环能做的事情，递归都可以做```python# 这儿的func1就是递归函数def func1():    print(&#39;aaa&#39;)    func1()# func1()</code></pre><ul><li>3.怎么写递归函数<br>第一步：找临界值（找到让循环结束的值/找到能够确定函数结果的值）<br>第二步：假设函数的功能已经实现的前提下，找关系（找f(n)和f(n-1)/当次循环和上次循环的关系）<br>第三步：根据f(n)和f(n-1）的关系，来f(n-1)实现f(n)的效果</li></ul><pre><code class="python"># 1+2+3+4+...+100sum1 = 0for x in range(101):    sum1 += xprint(sum1)# 用递归实现1+2+3+。。。+ndef sum2(n):    # 1.找临界值（在临界值的位置一定要让函数结束）    if n == 1:        return 1    # 找关系f(n)和f(n-1)    # sum2(n):sum2(n-1)+n    # 3.使用f(n-1)实现f(n)的效果    return sum2(n-1) + nprint(sum2(5))</code></pre><p>过程：</p><pre><code>sum2(5) n = 5   return  sum2(4) + 5       0+1+2+3+4+5sum2(4) n = 4   return  sum2(3) + 4       0+1+2+3+4sum2(3) n = 3   return  sum2(2) + 3       0+1+2+3sum2(2) n = 2   return  sum2(1) + 2       0+1+2sum2(1) n = 1   return  sum2(0) + 1       0+1sum2(0) n = 0   return  0</code></pre><ul><li>练习：使用递归计算1，1，2，3，5，8，。。。<br><code>`</code>python<br>def number(n):<h1 id="临界值"><a href="#临界值" class="headerlink" title="临界值"></a>临界值</h1>  if n == 1 or n == 2:<pre><code>  return 1</code></pre><h1 id="循环规律"><a href="#循环规律" class="headerlink" title="循环规律"></a>循环规律</h1>  return number(n-2) + number(n-1)</li></ul><p>print(number(6))</p><pre><code>```python+  练习：&#39;&#39;&#39;n = 3******n = 5***************&#39;&#39;&#39;def star(n):    if n == 1:        print(&#39;*&#39;)        return    print(&#39;*&#39;*n)    star(n-1)star(5)</code></pre><ul><li>4.实际开发中，递归是能不用就不要用，递归消耗大量资源是循环的n倍<br>递归需要不断调用函数，开辟空间，消耗内存</li></ul><h4 id="九、模块和包的使用"><a href="#九、模块和包的使用" class="headerlink" title="九、模块和包的使用"></a>九、模块和包的使用</h4><p>封装：<br>1.函数：对实现某一特定功能的代码段的封装<br>2.模块：将多个变量、函数和类进行封装<br>模块：一个py文件就是一个模块</p><pre><code class="python">def multiply(*numbers):    sum1 = 1    # 取出numbers中的每一个元素    for item in numbers:        sum1 *= item    return sum1print(multiply(1,2,5))</code></pre><p>1.怎么使用其他模块中的内容<br>a.import 模块<br>b.from 模块 import 模块中的内容<br>可以直接使用模块中的内容<br>c.from 模块 import * —-&gt;将模块中的所有的内容都导入</p><h5 id="my-list"><a href="#my-list" class="headerlink" title="my_list"></a>my_list</h5><pre><code class="python">empty = []def count(list1,item):    &#39;&#39;&#39;    统计指定列表中指定元素的个数    :param list1: 指定的列表    :param item: 指定元素    :return: 个数    &#39;&#39;&#39;    count = 0    for x in list1:        if x == item:            count += 1    return count</code></pre><h5 id="my-model"><a href="#my-model" class="headerlink" title="my_model"></a>my_model</h5><pre><code class="python">a = 10def func1():    print(&#39;good!&#39;)for x in range(10):    print(&#39;!!&#39;,a)# 将不希望被别的模块导入（执行）的代码放到模块的这个if语句中if __name__==&#39;__main__&#39;:    print(&#39;!!&#39;,a)    for x in range(10):        print(&#39;!!&#39;,x)</code></pre><pre><code class="python">a.# # 导入系统模块# import math# print(math.pi)# #导入自定模块my_list# import my_list# print(my_list.empty)# number = my_list.count([1, 2, 3, 4, 1, 1, 5],1)# print(number)# b.from my_list import countprint(count([23,12,42,52,1,5,2,1,12,12,12],12))# c.from math import *print(pi)print(sqrt(4))</code></pre><p>2.重命名<br>import 模块 as 新名字<br>from 模块 import 内容 as 新名字</p><pre><code class="python">import random as RANprint(RAN.randint(1,10))from datetime import date as Date,datetime as TIMEprint(Date.today())print(TIME.now())</code></pre><p>&emsp;&emsp;每一个模块都有一个<strong>name</strong>属性，这个属性的默认就是当前模块的文件名。<br>&emsp;&emsp;当前模块正在被执行（直接在当前这个模块中点了run）的时候，<strong>name</strong>属性的值就是’<strong>main</strong>‘</p><p>&emsp;&emsp;在一个模块中，将不希望被其他模块导入的代码写在if <strong>name</strong> ‘<strong>main</strong>‘中，希望被导入的放到这个if外面</p><p>建议：函数的声明，类的声明一般写在if的外面，其他的写在if里面。（想要被外部使用的全局变量也可以写在外面）</p><pre><code class="python">import my_model# from my_model import func1# print(func1())</code></pre><h4 id="十、函数作为变量"><a href="#十、函数作为变量" class="headerlink" title="十、函数作为变量"></a>十、函数作为变量</h4><h6 id="1-在python中，函数就是一种特殊的类型，声明函数的时候，其实就是在声明类型是function的变量"><a href="#1-在python中，函数就是一种特殊的类型，声明函数的时候，其实就是在声明类型是function的变量" class="headerlink" title="1.在python中，函数就是一种特殊的类型，声明函数的时候，其实就是在声明类型是function的变量"></a>1.在python中，函数就是一种特殊的类型，声明函数的时候，其实就是在声明类型是function的变量</h6><p>变量能做的事情，函数都可以做</p><pre><code class="python">if __name__ == &#39;__main__&#39;:    # 1.使用一个变量给另一个变量赋值    a = 10    b = a    # 声明一个函数func1(声明了一个变量func1，func1就是一个变量）    def func1():        print(&#39;hello python&#39;)    # c也是一个函数    c = func1    func1()    c()</code></pre><h6 id="2-函数作为列表的元素"><a href="#2-函数作为列表的元素" class="headerlink" title="2.函数作为列表的元素"></a>2.函数作为列表的元素</h6><pre><code class="python">    list2 = []    list3 = []    for x in range (10):        def func2(y):            print(x + y)        list2.append(func2)        list3.append(func2(x))    # list2中每个元素的值都是函数    print(list2)    print(list3)    # list2[0]就是一个函数    list2[0]    func = list2[0]    print(func(100))    list2[1](10)    # 直接将函数作为列表的元素    funcs = [func1]    funcs[0]()</code></pre><h6 id="3-将函数作为字典的值"><a href="#3-将函数作为字典的值" class="headerlink" title="3.将函数作为字典的值"></a>3.将函数作为字典的值</h6><pre><code class="python">    def sub(*nums):        &#39;&#39;&#39;        累计求差        :param nums: 求差的数        :return: 差        &#39;&#39;&#39;        if not nums:            return 0        # 默认是第一个数        sum1 = nums[0]        for item in nums[1:]:            sum1 -= item        return sum1    operation ={&#39;+&#39;:lambda x,y:x+y,&#39;-&#39;:lambda x,y:x-y,&#39;*&#39;:lambda x,y:x*y}    result = operation[&#39;*&#39;](10,20)    print(result)</code></pre><h6 id="4-函数作为函数的参数（回调函数）"><a href="#4-函数作为函数的参数（回调函数）" class="headerlink" title="4.函数作为函数的参数（回调函数）"></a>4.函数作为函数的参数（回调函数）</h6><pre><code class="python">    def clean_kitchen(time):        print(&#39;在%s,打扫厨房&#39; % time)        print(&#39;收费200元&#39;)    def clean_floor(time):        print(&#39;在%s,清洁地板&#39; % time)        print(&#39;收费100元&#39;)    # 在指定的时间，叫指定的服务    def call_service(time,service):        service(time)    # 将函数作为参数，传给其他函数使用    call_service(&#39;上午10点&#39;,clean_kitchen)    print(&#39;===============&#39;)    # 函数作为函数的返回值    def operation(operator:str):        if operator == &#39;+&#39;:            def my_sum (*nums):                sum1 = 0                for num in nums:                    sum += num            # 将求和的函数返回            return my_sum()        elif operator == &#39;*&#39;:            def my_sum(*nums):                sum1 = 1                for num in nums:                    sum1 *= num                print(sum1)            # 将求乘的函数返回            return my_sum    # operation(&#39;*&#39;)的结果是函数    operation(&#39;*&#39;)(1,2,3)</code></pre><h4 id="十一、生成器和生成式"><a href="#十一、生成器和生成式" class="headerlink" title="十一、生成器和生成式"></a>十一、生成器和生成式</h4><p>可以把迭代器看成一种容器，类似列表。生成器就是来生成迭代器</p><h6 id="1-生成式—–产生一个迭代器的表达方式"><a href="#1-生成式—–产生一个迭代器的表达方式" class="headerlink" title="1.生成式—–产生一个迭代器的表达方式"></a>1.生成式—–产生一个迭代器的表达方式</h6><p>a.是生成器，能够保存生成0-9中所有数字的算法</p><pre><code class="python">a = (x for x in range (10))    print(a,type(a))    a = (x*2 for x in range(10))    a = (char for char in &#39;a1b0cd1&#39; if &#39;0&#39; &lt;= char &lt;= &#39;9&#39;)</code></pre><h6 id="2-生成器和迭代器都是通过next来获取里面的数据"><a href="#2-生成器和迭代器都是通过next来获取里面的数据" class="headerlink" title="2.生成器和迭代器都是通过next来获取里面的数据"></a>2.生成器和迭代器都是通过next来获取里面的数据</h6><pre><code class="python">    print(next(a))    print(next(a))    print(next(a))</code></pre><h6 id="3-将生成器转换成列表"><a href="#3-将生成器转换成列表" class="headerlink" title="3.将生成器转换成列表"></a>3.将生成器转换成列表</h6><p>通过将生成式产生的迭代器转换成了一个列表</p><pre><code class="python">list1 = [x for x in range(10)]    print(list1)</code></pre><h6 id="4-将生成器转换成字典"><a href="#4-将生成器转换成字典" class="headerlink" title="4.将生成器转换成字典"></a>4.将生成器转换成字典</h6><p>注意：容器类型的元素是元组，并且元素中有且只有2个元素，才能转换成字典</p><pre><code class="python">dict1 =dict((x,x*2) for x in range(10))    print(dict1)</code></pre><ul><li>用一句代码转换一个字典中的key和value的值.{‘a’;1,’b’;2}<pre><code class="python">方法一：  dict2 = dict((value,key) for key,value in {&#39;a&#39;:1,&#39;b&#39;:2}.items())  print(dict2)方法二：  old = {&#39;a&#39;:1,&#39;b&#39;:2}  dict3 = dict((old[key],key) for key in old )  print(dict3)</code></pre><h4 id="十二、生成器"><a href="#十二、生成器" class="headerlink" title="十二、生成器"></a>十二、生成器</h4><pre><code class="python">def func1():      for x in range(10):          return x</code></pre><pre><code class="python">结果：0 &lt;class &#39;int&#39;&gt; &lt; class &#39;function&#39; &gt;  # print(func1(),type(func1()),type(func1))</code></pre></li><li><p>1.yield<br>只要函数中有yield关键字，那么这个函数就会变成一个生成器</p><ul><li>a.有yield的函数，在调用函数的时候不再是获取返回值，<br> 而是产生一个生成器对象，生成器对象中保留的是函数体</li><li><p>b.当通过next获取生成器中数据的时候，才会去执行函数体，执行到yield为止，并且将yield后面的结果作为生成的数据返回。同事记录结束的 位置，下次再调用next的时候，从上次结束的位置，继续往后执行</p><pre><code class="python">def func2():  for x in range(10):      print(&#39;asd&#39;)      yield x      print(&#39;aa&#39;)# print(func2(), type(func2()), type(func2))# 注意：函数中只要有yield，不管yield会不会执行到，函数的结果都是一个生成器# 这儿的func2（）是一个生成器# gen = func2()# print(next(gen))# print(next(gen))# print(next(gen))</code></pre><p>写一个生成器，可以无限产生斐波那契数列</p><pre><code class="python">def list3():  yield 1  yield 1  x = 1  y = 1  while True:      yield x + y      x,y = y , x +ygen = list3()print(next(gen))print(next(gen))print(next(gen))print(next(gen))print(next(gen))print(next(gen))print(&#39;===============&#39;)</code></pre><p>写一个生成器，可以产生一个等差数列</p><pre><code class="python">def list4():  yield 1  x = 1  y = 2  while True:      yield x + y      x,y = x + y,yCha = list4()print(next(Cha))print(next(Cha))print(next(Cha))print(next(Cha))print(next(Cha))print(next(Cha))print(next(Cha))print(&#39;===============&#39;)</code></pre></li></ul></li><li>2.生成器和生成式产生的对象就是迭代器<br>将列表转换成迭代器（iter）<pre><code class="python">iter1 = iter([1,2,3,4])  print(iter1)  print(next(iter1))  for item in iter1:      print(item)</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模型</title>
      <link href="/2018/10/25/%E5%89%8D%E7%AB%AF/day04/"/>
      <url>/2018/10/25/%E5%89%8D%E7%AB%AF/day04/</url>
      
        <content type="html"><![CDATA[<h4 id="模型类型"><a href="#模型类型" class="headerlink" title="模型类型"></a>模型类型</h4><h5 id="（1）定义模型"><a href="#（1）定义模型" class="headerlink" title="（1）定义模型"></a>（1）定义模型</h5><p>一个模型可以看做一个类，它对应数据库中的一张表；模型中定义的一个字段，对应一个类的属性</p><pre><code class="python">class Student(models.Model):    s_name = models.CharField(max_length=10)    s_age = models.IntegerField()    s_gender = models.BooleanField()    class Meat:        # 对列表进行重命名        db_table = &#39;cd_student&#39;        ordering = []        对象默认排序字段，获取对象列表时使用，升序ordering[&#39;id&#39;],降序ordering[&#39;-id&#39;]</code></pre><h5 id="（2）迁移数据"><a href="#（2）迁移数据" class="headerlink" title="（2）迁移数据"></a>（2）迁移数据</h5><pre><code class="python">python manage.py makemigrations    ----------  生成迁移文件，不会生成数据库中的表​</code></pre><p>如果生成文件报错，No changes detected,就需要删除<strong>pycache</strong>文件；强制生成文件python manage.py makemigrations xxx (xxx就是app的名称)；并删除数据库中app字段为XXX的数据。<br>​<code>`</code><br>python manage.py migrate  ————-  迁移文件，生成数据库</p><pre><code>##### （3）ORMORM(Objects Relational Mapping)对象关系映射，是一种程序技术，用于实现面向对象编程语言里不同类型系统的数据之间的转换。可以简单理解为翻译机。![django_models](F:\gitee\web-img\django_models.jpg)##### (3)模型查询- 模型成员objects**Django默认通过模型的objects对象实现模型数据查询**- 过滤器查询集：表示从数据库中获取的要查询对象的集合**过滤器：就是通过一系列的筛选，得到自己想要的数据的一种方式，它是一个函数，用所给的参数去限制查询的结果**</code></pre><p>从SQL角度来说，查询集合和select语句等价，过滤器就像where条件</p><p>Django有两种过滤器用于筛选记录</p><pre><code>filter      : 返回符合筛选条件的数据集get获取不到数据会直接报错, filter获取不到数据是返回空exclude   : 返回不符合筛选条件的数据集</code></pre><p>注：filter与exclude可以连在一起限制查询的结果</p><pre><code>**过滤器**```pythonall（）               返回所有的数据filter（）            返回符合条件的数据exclude（）           返回不符合条件的数据order_by（）          排序，默认是升序values（）            一条数据就是一个字典，返回一个列表</code></pre><ul><li><p>查询单个数据的方法：</p><pre><code>get()：返回一个满足条件的对象。如果没有返回符合条件的对象，会引发模型类DoesNotExist异常，如果找到多个，会引发模型类MultiObjectsReturned异常first()：返回查询集中的第一个对象，可以拿到只有一个元素的集合中的元素last()：返回查询集中的最后一个对象，同上count()：返回当前查询集中的对象个数，计数作用exists()：判断查询集中是否有数据，如果有数据返回True，没有返回False</code></pre></li><li><p>限制查询集</p></li></ul><p>可以通过下标，来获取想要的数据，等价于sql中的limit   ————-   <strong><code>模型名.objects.all()[0:5]</code></strong>取值的下标不能为负。</p><ul><li>查询字段</li></ul><pre><code>  对SQL中的where实现，作为方法filter(),exclude(),get()的参数  语法：属性名_比较运算符 = 值  外键：属性名_id  注意：like语句中使用%表示通配符。比如sql语句查询 where name like &#39;%xxx%&#39;，等同于filter(name_contains=&#39;xxx&#39;)</code></pre><ul><li>比较查询</li></ul><pre><code class="python">contains:是否包含，对大小写敏感startswith，endswith：以values开头或者结尾，大小写敏感 以上的运算符前加上i(ignore)就不区分大小写了isnull，isnotnull：是否为空  ------------  filter(name__isnull=True)in：是否包含在范围内  -----------  filter(id__in=[1,2,3])gt，gte，lt，lte：大于，大于等于，小于，小于等于  ----------  filter(age__gt=10)pk：代表主键，也就是id  ------------  filter(pk=1)</code></pre><ul><li>聚合函数</li></ul><pre><code class="python">agregate()函数返回聚合函数的值Avg：平均值Count：数量Max：最大Min：最小Sum：求和example: Student.objects.aggregate(Max(&#39;age&#39;))</code></pre><ul><li>F对象/Q对象</li></ul><p><strong>F对象</strong>:可以使用模型的A属性与B属性进行比较</p><pre><code class="python">班级中有女生个数字段以及男生个数字段，统计女生数大于男生数的班级可以如下操作:grades = Grade.objects.filter(girlnum__gt=F(&#39;boynum&#39;))</code></pre><p><strong>Q对象:</strong>Q()对象就是为了将过滤条件组合起来,使用符号&amp;或者|将多个Q()对象组合起来传递给filter()，exclude()，get()等函数.</p><pre><code class="python">查询学生中不是12岁的或者姓名叫张三的学生student = Student.objects.filter(~Q(age=12) | Q(name=&#39;张三&#39;))查询python班语文小于80并且数学小于等于80的学生grade = Grade.objects.filter(g_name=&#39;python&#39;).first()students = grade.student_set.all()stu = students.filter(~Q(s_yuwen__gte=80) &amp; Q(s_shuxue__lte=80))查询python班语文大于等于80或者数学小于等于80的学生grade = Grade.objects.filter(g_name=&#39;python&#39;).first()students = grade.student_set.all()stu = students.filter(Q(s_yuwen__gte=80) | Q(s_shuxue__lte=80))</code></pre><h4 id="关系"><a href="#关系" class="headerlink" title="关系"></a><a href="https://github.com/JackChenSmile/web-frame/blob/master/django/3.1django_model_more.md" target="_blank" rel="noopener">关系</a></h4><ul><li>一对一：<ul><li>已知a对象，查找b对象：a.b</li><li>已知a对象，查找b对象：b.a(小写)</li></ul></li><li><p>一对多：</p><ul><li>已知a对象，查找b对象：a.b</li><li>已知a对象，查找b对象：b.a_set</li></ul></li><li><p>多对多：</p></li></ul><pre><code>多对多关系：1. 生成表的时候会多生成一张表（实际会有三张表）2. 生成的表是专门用来维护关系的3. 生成的表是使用两个外键来维护多对多的关系4. 两个一对多的关系来实现多对多的实现　　　5. 删除一个表的数据的话，中间关联表也要删除相关的信息</code></pre><h4 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h4><p><strong>1.加载静态配置文件</strong></p><pre><code>在settings.py中最下面有一个叫做static的文件夹，主要用来加载一些模板中用到的资源，提供给全局使用这个静态文件主要用来配置css，html，图片，文字文件等STATIC_URL = ‘/static/’STATICFILES_DIRS = [    os.path.join(BASE_DIR, ‘static’)]只后在模板中，首先加载静态文件，之后调用静态，就不用写绝对全路径了</code></pre><p><strong>2.使用静态配置文件</strong></p><pre><code>a) 加载渲染静态配置文件 模板中声明{% load static %} 或者 {% load staticfiles %}在引用资源的时候使用{% static ‘xxx’ %} xxx就是相当于staticfiles_dirs的一个位置b) 直接定义静态配置&lt;img src=&quot;/static/images/mvc.png&quot;&gt;其中: 展示static文件夹下有一个images文件夹，下面有一个mvc.png的图片</code></pre><p><strong>3.模板主要部分</strong></p><ul><li>HTML静态代码</li><li>动态插入的代码段（挖坑，填坑）也就是block</li></ul>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>practice linkman</title>
      <link href="/2018/10/20/%E6%95%B0%E6%8D%AE%E5%BA%93/practice-linkman/"/>
      <url>/2018/10/20/%E6%95%B0%E6%8D%AE%E5%BA%93/practice-linkman/</url>
      
        <content type="html"><![CDATA[<h3 id="MY简单的联系人练习"><a href="#MY简单的联系人练习" class="headerlink" title="MY简单的联系人练习"></a>MY简单的联系人练习</h3><pre><code class="python">import pymysqldef add_con(con):    while True:        telname = input(&#39;联系人姓名：&#39;)        relation = input(&#39;与联系人关系：&#39;)        tel = input(&#39;联系人电话：&#39;)        with con.cursor() as cursor:            result = cursor.execute(                args=(telname, relation, tel),                query=&quot;insert into tb_cont values (default, %s, %s, %s)&quot;)            if result == 1:                print(&#39;添加成功!&#39;)                print(&#39;-&#39; * 30)                option = str(input(&#39;是否继续添加 yes / no  :&#39;))                if option == &#39;yes&#39;:                    continue                else:                    break            else:                print(&#39;添加失败，请重新添加&#39;)                continuedef function(cursor):    print(&#39;编号    \t姓名    \t   关系    \t电话    &#39;)    print(&#39;=&#39; * 50)    for row in cursor.fetchall():        print(str(row[&#39;id&#39;]).ljust(8), end=&#39;&#39;)        print((row[&#39;telname&#39;].ljust(8) if len(row[&#39;telname&#39;]) == 3 else row[&#39;telname&#39;].ljust(9)), end=&#39;&#39;)        print(str(row[&#39;relation&#39;]).ljust(9), end=&#39;&#39;)        print(str(row[&#39;tel&#39;]).ljust(15))    print(&#39;=&#39; * 50)def check_all_con(con):    figure = 0    while True:        print(&#39;=&#39; * 50)        with con.cursor() as cursor:            cursor.execute(                args=(figure,),                query=&quot;select id, telname, relation, tel from tb_cont order by id limit %s, 5&quot;)            function(cursor)        print(&#39;1.删除联系人&#39;)        print(&#39;2.查看下一页&#39;)        print(&#39;3.查看上一页&#39;)        print(&#39;4.修改联系人信息&#39;)        print(&#39;5.返回上一级&#39;)        print(&#39;-&#39; * 30)        elect = input(&#39;请选择：&#39;)        if elect == &#39;1&#39;:            del_con(con)        elif elect == &#39;2&#39;:            figure += 5            continue        elif elect == &#39;3&#39;:            if figure &gt;= 5:                figure -= 5            else:                print(&#39;没有上一页，请重新选择&#39;)            continue        elif elect == &#39;4&#39;:            updeat_con(con)        else:            breakdef fuzzy1(con):    figure = 0    while True:        content = str(input(&#39;请输入搜索内容：&#39;))        with con.cursor() as cursor:            cursor.execute(                args=(&quot;%&quot; + content + &quot;%&quot;, figure),                query=&quot; select id, telname, relation, tel from tb_cont where telname like %s &quot;                      &quot; order by id limit %s, 5&quot;)            function(cursor)        print(&#39;1.删除联系人&#39;)        print(&#39;2.查看下一页&#39;)        print(&#39;3.查看上一页&#39;)        print(&#39;4.退出搜索&#39;)        elect = input(&#39;请选择：&#39;)        if elect == &#39;1&#39;:            cho = int(input(&#39;请输入要删除联系人的编号：&#39;))            with con.cursor() as cursor:                result = cursor.execute(                    args=(cho,),                    query=&quot;delete from tb_cont where id=%s&quot;)                if result == 1:                    print(&#39;删除成功！&#39;)                    print(&#39;-&#39; * 30)                    option = str(input(&#39;是否继续删除 yes / no  :&#39;))                    if option == &#39;yes&#39;:                        del_con(con)                    else:                        break                else:                    print(&#39;删除失败，请重新删除&#39;)                    continue        elif elect == &#39;2&#39;:            figure += 5            continue        else:            breakdef fuzzy2(con):    figure = 0    while True:        content = str(input(&#39;请输入搜索电话：&#39;))        with con.cursor() as cursor:            cursor.execute(                args=(&quot;%&quot; + content + &quot;%&quot;, figure),                query=&quot; select id, telname, relation, tel from tb_cont where tel like %s &quot;                      &quot; order by id limit %s, 5 &quot;)            function(cursor)        print(&#39;1.删除联系人&#39;)        print(&#39;2.查看下一页&#39;)        print(&#39;3.查看上一页&#39;)        print(&#39;4.退出搜索&#39;)        elect = input(&#39;请选择：&#39;)        if elect == &#39;1&#39;:            cho = int(input(&#39;请输入要删除联系人的编号：&#39;))            with con.cursor() as cursor:                result = cursor.execute(                    args=(cho,),                    query=&quot;delete from tb_cont where id=%s&quot;)                if result == 1:                    print(&#39;删除成功！&#39;)                    print(&#39;-&#39; * 30)                    option = str(input(&#39;是否继续删除 yes / no  :&#39;))                    if option == &#39;yes&#39;:                        del_con(con)                    else:                        break                else:                    print(&#39;删除失败，请重新删除&#39;)                    continue        elif elect == &#39;2&#39;:            figure += 5            continue        elif elect == &#39;3&#39;:            if figure &gt;= 5:                figure -= 5            else:                print(&#39;没有上一页，请重新选择&#39;)            continue        else:            breakdef updeat_con(con):    while True:        id = int(input(&#39;请输入要修改的联系人编号：&#39;))        telname = input(&#39;联系人姓名：&#39;)        relation = input(&#39;与联系人关系：&#39;)        tel = input(&#39;联系人电话：&#39;)        with con.cursor() as cursor:            result = cursor.execute(                args=(telname, relation, tel, id),                query=&quot;update tb_cont set telname=%s, relation=%s, tel=%s where id=%s&quot;)            if result == 1:                print(&#39;修改成功！&#39;)                print(&#39;-&#39; * 30)                option = str(input(&#39;是否继续修改 yes / no  :&#39;))                if option == &#39;yes&#39;:                    continue                else:                    break            else:                print(&#39;修改失败，请重新修改&#39;)                continuedef del_con(con):    while True:        cho = int(input(&#39;请输入要删除联系人的编号：&#39;))        with con.cursor() as cursor:            result = cursor.execute(                args=(cho,),                query=&quot;delete from tb_cont where id=%s&quot;)            if result == 1:                print(&#39;删除成功！&#39;)                print(&#39;-&#39; * 30)                option = str(input(&#39;是否继续删除 yes / no  :&#39;))                if option == &#39;yes&#39;:                    continue                else:                    break            else:                print(&#39;删除失败！&#39;)                print(&#39;-&#39; * 30)                option = str(input(&#39;是否继续删除 yes / no  :&#39;))                if option == &#39;yes&#39;:                    continue                else:                    breakdef check_con(con):    while True:        print(&#39;-&#39; * 30)        print(&#39;1.查看全部联系人&#39;)        print(&#39;2.搜索联系人&#39;)        print(&#39;3.返回上一级&#39;)        print(&#39;-&#39; * 30)        sel = input(&#39;请选择查看方式：&#39;)        if sel == &#39;1&#39;:            check_all_con(con)        elif sel == &#39;2&#39;:            while True:                print(&#39;-&#39; * 30)                print(&#39;1.按姓名搜索&#39;)                print(&#39;2.按电话搜索&#39;)                print(&#39;3.退出搜索&#39;)                print(&#39;-&#39; * 30)                choose = input(&#39;请选择搜索方式：&#39;)                if choose == &#39;1&#39;:                    fuzzy1(con)                elif choose == &#39;2&#39;:                    fuzzy2(con)                else:                    break        elif sel == &#39;3&#39;:            break        else:            print(&#39;输入错误，请重新选择&#39;)            continuedef clo(con):    print(&#39;欢迎再次使用！&#39;)    con.close()def main():    while True:        print(&#39;1.添加联系人&#39;)        print(&#39;2.查看联系人&#39;)        print(&#39;3.退出系统&#39;)        print(&#39;-&#39; * 30)        con = pymysql.connect(            host=&#39;localhost&#39;, port=3306, user=&#39;root&#39;, db=&#39;contact&#39;, charset=&#39;utf8&#39;, password=&#39;123456&#39;,            autocommit=True, cursorclass=pymysql.cursors.DictCursor)        num = input(&#39;请选择：&#39;)        if num == &#39;1&#39;:            add_con(con)        elif num == &#39;2&#39;:            check_con(con)        elif num == &#39;3&#39;:            clo(con)            break        else:            print(&#39;输入错误，请重新选择&#39;)            continueif __name__ == &#39;__main__&#39;:    main()</code></pre>]]></content>
      
      
      <categories>
          
          <category> databases </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linkman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python_database</title>
      <link href="/2018/10/17/python/python-database/"/>
      <url>/2018/10/17/python/python-database/</url>
      
        <content type="html"><![CDATA[<h2 id="数据库的微操做"><a href="#数据库的微操做" class="headerlink" title="数据库的微操做"></a>数据库的微操做</h2><p>进行数据的增加，修改，删除，查看</p><p>在信息化社会，充分有效地管理和利用各类信息资源，是进行科学研究和决策管理的前提条件。</p><p>—– 从删库，到跑路额！</p><pre><code class="python">import pymysqlclass Dept(object):    def __init__(self, no, name, location):        self.no = no        self.name = name        self.location = locationdef main():    &#39;&#39;&#39;    no = int(input(&#39;部门编号：&#39;))    name = input(&#39;部门名称：&#39;)    location = input(&#39;部门地址：&#39;)    &#39;&#39;&#39;    # 1.创建数据库连接    conn = pymysql.connect(host=&#39;localhost&#39;, port=3306,                           db=&#39;hrs&#39;, user=&#39;root&#39;,                           charset=&#39;utf8&#39;, password=&#39;123456&#39;,                           autocommit=True,                           cursorclass=pymysql.cursors.DictCursor)    print(conn)    try:        # 2.获得游标对象        with conn.cursor() as cursor:            # 3.向数据库服务器发出SQL            # cursor 游标，上下文语法            &#39;&#39;&#39;            # 删除            result = cursor.execute(                &#39;delete from TbDept where dno=40&#39;)            if result == 1:                print(&#39;删除成功!&#39;)           &#39;&#39;&#39;            &#39;&#39;&#39;            # 添加            result = cursor.execute(                args=(no, name, location),                query=&quot;insert into TbDept values (%s, %s, %s)&quot;)            if result == 1:                print(&#39;添加成功!&#39;)            &#39;&#39;&#39;            &#39;&#39;&#39;            如果没有添加autocommit这个属性，就可以添加下面这一段代码来提交数据            try:                result                conn.commit()            except:                conn.rollback()            &#39;&#39;&#39;            &#39;&#39;&#39;            # 修改            result = cursor.execute(                args=(name, location, no),                query=&quot;update TbDept set dname=%s, dloc=%s where dno=%s&quot;)            if result == 1:                print(&#39;修改成功！&#39;)            &#39;&#39;&#39;            &#39;&#39;&#39;            # 命名占位符            result = cursor.execute(                args={&#39;no&#39;:no, &#39;name&#39;:name, &#39;loc&#39;:location},                query=&quot;update TbDept set dname=%(name)s, dloc=%(loc)s where dno=%(no)s&quot;)            if result == 1:                print(&#39;修改成功！&#39;)            &#39;&#39;&#39;            &#39;&#39;&#39;            # 查看信息1            cursor.execute(                &quot;select dno, dname, dloc from TbDept&quot;)            for row in cursor.fetchall():                print(f&#39;部门编号：{row[0]}&#39;)                print(f&#39;部门名称：{row[1]}&#39;)                print(f&#39;部门地址：{row[2]}&#39;)                print(&#39;-&#39; * 20)            &#39;&#39;&#39;            &#39;&#39;&#39;            # 查看信息2            cursor.execute(&quot;select dno as no, dname as name, dloc as loc from TbDept&quot;)            print(&#39;-&#39; * 20)            for row in cursor.fetchall():                print(row[&#39;no&#39;], end=&#39;\t&#39;)                print(row[&#39;name&#39;], end=&#39;\t&#39;)                print(row[&#39;loc&#39;])            &#39;&#39;&#39;            # 查看信息3            cursor.execute(&quot; select dno as no, dname as name, dloc as location &quot;                           &quot; from TbDept&quot;)            print(&#39;-&#39; * 20)            for row in cursor.fetchall():                print(row)                dept = Dept(**row)                print(dept.no, end=&#39;\t&#39;)                print(dept.name, end=&#39;\t&#39;)                print(dept.location)            print(&#39;-&#39; * 20)    finally:        conn.close()if __name__ == &#39;__main__&#39;:    main()</code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python连接数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>practice</title>
      <link href="/2018/10/16/%E6%95%B0%E6%8D%AE%E5%BA%93/practice/"/>
      <url>/2018/10/16/%E6%95%B0%E6%8D%AE%E5%BA%93/practice/</url>
      
        <content type="html"><![CDATA[<h3 id="practice1"><a href="#practice1" class="headerlink" title="practice1"></a>practice1</h3><h5 id="创建列表过程"><a href="#创建列表过程" class="headerlink" title="创建列表过程"></a>创建列表过程</h5><ul><li><p>创建SRS数据库</p><pre><code class="mysql">drop database if exists SRS;create database SRS default charset utf8 collate utf8_bin;</code></pre></li><li><p>切换到SRS数据库</p><pre><code class="mysql">use SRS;</code></pre></li><li><p>创建学院表</p><pre><code class="mysql">create table tb_college(collid int not null auto_increment comment &#39;学院编号&#39;,collname varchar(50) not null comment &#39;学院名称&#39;,collmaster varchar(20) not null comment &#39;院长姓名&#39;,collweb varchar(511) default &#39;&#39; comment &#39;学院网站&#39;,primary key (collid));</code></pre></li><li><p>添加唯一约束</p><pre><code class="mysql">alter table tb_college add constraint uni_college_collname unique (collname);</code></pre></li><li><p>创建学生表</p><pre><code class="mysql">create table tb_student(stuid int not null comment &#39;学号&#39;,sname varchar(20) not null comment &#39;学生姓名&#39;,gender bit default 1 comment &#39;性别&#39;,birth date not null comment &#39;出生日期&#39;,addr varchar(255) default &#39;&#39; comment &#39;籍贯&#39;,collid int not null comment &#39;所属学院编号&#39;,primary key (stuid));</code></pre></li><li><p>添加外键约束</p><pre><code class="mysql">- alter table tb_student add constraint fk_student_collid foreign key (collid) references tb_college (collid);</code></pre></li><li><p>创建教师表</p><pre><code class="mysql">create table tb_teacher(teaid int not null comment &#39;教师工号&#39;,tname varchar(20) not null comment &#39;教师姓名&#39;,title varchar(10) default &#39;&#39; comment &#39;职称&#39;,collid int not null comment &#39;所属学院编号&#39;);</code></pre></li><li><p>添加主键约束</p><pre><code class="mysql">alter table tb_teacher add constraint pk_teacher primary key (teaid);</code></pre></li><li><p>添加外键约束</p><pre><code class="mysql">alter table tb_teacher add constraint fk_teacher_collid foreign key (collid) references tb_college (collid);</code></pre></li><li><p>创建课程表</p><pre><code class="mysql">create table tb_course(couid int not null comment &#39;课程编号&#39;,cname varchar(50) not null comment &#39;课程名称&#39;,credit tinyint not null comment &#39;学分&#39;,teaid int not null comment &#39;教师工号&#39;,primary key (couid));</code></pre></li><li><p>添加外键约束</p><pre><code class="mysql">alter table tb_course add constraint fk_course_tid foreign key (teaid) references tb_teacher (teaid);</code></pre></li><li><p>创建学生选课表</p><pre><code class="mysql">create table tb_score(scid int not null auto_increment comment &#39;选课编号&#39;,sid int not null comment &#39;学号&#39;,cid int not null comment &#39;课程编号&#39;,seldate date comment &#39;选课时间日期&#39;,mark decimal(4,1) comment &#39;考试成绩&#39;,primary key (scid));</code></pre></li><li><p>添加外键约束</p><pre><code class="mysql">alter table tb_score add constraint fk_score_sid foreign key (sid) references tb_student (stuid);alter table tb_score add constraint fk_score_cid foreign key (cid) references tb_course (couid);-- 添加唯一约束alter table tb_score add constraint uni_score_sid_cid unique (sid, cid);</code></pre></li><li><p>插入学院数据</p><pre><code class="mysql">insert into tb_college (collname, collmaster, collweb) values (&#39;计算机学院&#39;, &#39;左冷禅&#39;, &#39;http://www.abc.com&#39;),(&#39;外国语学院&#39;, &#39;岳不群&#39;, &#39;http://www.xyz.com&#39;),(&#39;经济管理学院&#39;, &#39;风清扬&#39;, &#39;http://www.foo.com&#39;);</code></pre></li><li><p>插入学生数据</p><pre><code class="mysql">insert into tb_student (stuid, sname, gender, birth, addr, collid) values(1001, &#39;杨逍&#39;, 1, &#39;1990-3-4&#39;, &#39;四川成都&#39;, 1),(1002, &#39;任我行&#39;, 1, &#39;1992-2-2&#39;, &#39;湖南长沙&#39;, 1),(1033, &#39;王语嫣&#39;, 0, &#39;1989-12-3&#39;, &#39;四川成都&#39;, 1),(1572, &#39;岳不群&#39;, 1, &#39;1993-7-19&#39;, &#39;陕西咸阳&#39;, 1),(1378, &#39;纪嫣然&#39;, 0, &#39;1995-8-12&#39;, &#39;四川绵阳&#39;, 1),(1954, &#39;林平之&#39;, 1, &#39;1994-9-20&#39;, &#39;福建莆田&#39;, 1),(2035, &#39;东方不败&#39;, 1, &#39;1988-6-30&#39;, null, 2),(3011, &#39;林震南&#39;, 1, &#39;1985-12-12&#39;, &#39;福建莆田&#39;, 3),(3755, &#39;项少龙&#39;, 1, &#39;1993-1-25&#39;, null, 3),(3923, &#39;杨不悔&#39;, 0, &#39;1985-4-17&#39;, &#39;四川成都&#39;, 3);</code></pre></li><li><p>插入老师数据</p><pre><code class="mysql">insert into tb_teacher (teaid, tname, title, collid) values (1122, &#39;张三丰&#39;, &#39;教授&#39;, 1),(1133, &#39;宋远桥&#39;, &#39;副教授&#39;, 1),(1144, &#39;杨逍&#39;, &#39;副教授&#39;, 1),(2255, &#39;范遥&#39;, &#39;副教授&#39;, 2),(3366, &#39;韦一笑&#39;, &#39;讲师&#39;, 3);</code></pre></li><li><p>插入课程数据</p><pre><code class="mysql">insert into tb_course (couid, cname, credit, teaid) values (1111, &#39;Python程序设计&#39;, 3, 1122),(2222, &#39;Web前端开发&#39;, 2, 1122),(3333, &#39;操作系统&#39;, 4, 1122),(4444, &#39;计算机网络&#39;, 2, 1133),(5555, &#39;编译原理&#39;, 4, 1144),(6666, &#39;算法和数据结构&#39;, 3, 1144),(7777, &#39;经贸法语&#39;, 3, 2255),(8888, &#39;成本会计&#39;, 2, 3366),(9999, &#39;审计学&#39;, 3, 3366);</code></pre></li><li><p>插入选课数据</p><pre><code class="mysql">insert into tb_score (sid, cid, seldate, mark) values (1001, 1111, &#39;2017-09-01&#39;, 95),(1001, 2222, &#39;2017-09-01&#39;, 87.5),(1001, 3333, &#39;2017-09-01&#39;, 100),(1001, 4444, &#39;2018-09-03&#39;, null),(1001, 6666, &#39;2017-09-02&#39;, 100),(1002, 1111, &#39;2017-09-03&#39;, 65),(1002, 5555, &#39;2017-09-01&#39;, 42),(1033, 1111, &#39;2017-09-03&#39;, 92.5),(1033, 4444, &#39;2017-09-01&#39;, 78),(1033, 5555, &#39;2017-09-01&#39;, 82.5),(1572, 1111, &#39;2017-09-02&#39;, 78),(1378, 1111, &#39;2017-09-05&#39;, 82),(1378, 7777, &#39;2017-09-02&#39;, 65.5),(2035, 7777, &#39;2018-09-03&#39;, 88),(2035, 9999, date(now()), null),(3755, 1111, date(now()), null),(3755, 8888, date(now()), null),(3755, 9999, &#39;2017-09-01&#39;, 92);</code></pre></li></ul><h5 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h5><ul><li><p>查询所有学生信</p><pre><code class="mysql">select * from tb_student;</code></pre></li><li><p>查询所有课程名称及学分(投影和别名)</p><pre><code class="mysql">select cname as 课程名称,credit as 学分 from tb_course;</code></pre></li><li><p>查询所有女学生的姓名和出生日期(筛选)</p><pre><code class="mysql">select sname as 姓名,birth as 出生日期 from tb_student where gender=0;</code></pre></li><li><p>查询所有80后学生的姓名、性别和出生日期(筛选)</p><pre><code class="mysql">判断方法一(只适用于mysql数据库)：select sname,if(gender, &#39;男&#39;, &#39;女&#39;),birth from tb_student where birth between&#39;1980-1-1&#39; and &#39;1989-12-31&#39;;方法二(适用于所有数据库)：select sname,case gender when 1 then &#39;男&#39; else &#39;女&#39; end,birth from tb_student where birth between&#39;1980-1-1&#39; and &#39;1989-12-31&#39;;</code></pre></li><li><p>查询姓”杨“的学生姓名和性别(模糊)</p><pre><code class="mysql">select sname,gender from tb_student where sname like &#39;杨%&#39;;</code></pre></li><li><p>查询姓”杨“名字两个字的学生姓名和性别(模糊)</p><pre><code class="mysql">select sname,gender from tb_student where sname like &#39;杨_&#39;;</code></pre></li><li><p>查询姓”杨“名字三个字的学生姓名和性别(模糊)</p><pre><code class="mysql">select sname,gender from tb_student where sname like &#39;杨__&#39;;</code></pre></li><li><p>查询名字中有”不“字或“嫣”字的学生的姓名(模糊)</p><pre><code class="mysql">select sname from tb_student where sname like &#39;%不%&#39; or sname like &#39;%嫣%&#39;;</code></pre></li><li><p>查询没有录入家庭住址的学生姓名(空值)</p><pre><code class="mysql">select sname from tb_student where addr is null or addr=&#39;&#39;;</code></pre></li><li><p>查询录入了家庭住址的学生姓名(空值)</p><pre><code class="mysql">select sname from tb_student where addr is not null and addr&lt;&gt;&#39;&#39;;</code></pre></li><li><p>查询学生选课的所有日期(diatinct —– 去重)</p><pre><code class="mysql">select distinct seldate from tb_score;</code></pre></li><li><p>查询学生的家庭住址</p><pre><code class="mysql">select distinct addr from tb_student where addr is not null and addr&lt;&gt;&#39;&#39;;</code></pre></li><li><p>查询学生的姓名和生日按年龄从大到小排列(排序)</p><pre><code class="mysql">查询生日：select sname,birth from tb_student order by birth asc;查询年龄：select sname,year(now()) - year(birth) as 年龄 from tb_student order by birth asc;</code></pre></li><li><p>查询所有男学生的姓名和生日按年龄从大到小排列(排序)( order by ——- 排序)</p><pre><code class="mysql">select sname,birth from tb_student where gender=1 order by birth asc;</code></pre></li><li><p>查询年龄最大的学生的出生日期(聚合函数)</p><pre><code class="mysql">select min(birth) from tb_student;</code></pre></li><li><p>查询年龄最小的学生的出生日期(聚合函数)</p><pre><code class="mysql">select max(birth) from tb_student;</code></pre></li><li><p>查询男女学生的人数(分组和聚合函数)( 分组——— group by)</p><pre><code class="mysql">按人数排降序：select if(gender, &#39;男&#39;, &#39;女&#39;) as 性别, count(gender) as 人数 from tb_student group by gender order by 人数 desc;</code></pre></li><li><p>查询课程编号为1111的课程的平均成绩(筛选和聚合函数)</p><pre><code class="mysql">select avg(mark) as 平均分 from tb_score where cid=1111;</code></pre></li><li><p>查询学号为1001的学生所有课程的总成绩(筛选和聚合函数)</p><pre><code class="mysql">select sum(mark) as 平均分 from tb_score where cid=1001;</code></pre></li><li><p>查询每个学生的学号和平均成绩(分组和聚合函数)</p><pre><code class="mysql">select sid,avg(mark) from tb_score where mark is not null group by sid;</code></pre></li><li><p>查询平均成绩大于等于90分的学生的学号和平均成绩(先分组，再筛选 ——— 分组后跟having)</p><pre><code class="mysql">select sid,avgmark from tb_score group by sid having avg(mark)&gt;=90;</code></pre></li><li><p>查询年龄最大的学生的姓名(子查询)</p><ul><li><p>子查询 — 在一个查询中又使用到了另外一个查询的结果</p></li><li><p>查询年龄最大的学生的姓名（子查询）</p><pre><code class="mysql">select sname from tb_student where birth= (select min(birth) from tb_student);</code></pre></li></ul></li><li><p>查询年龄最大的学生的姓名和年龄</p><pre><code class="mysql">select sname as 姓名, year(now()) - year(birth) as 年龄from tb_student where birth= (select min(birth) from tb_student); </code></pre></li><li><p>查询选了两门以上的课程的学生姓名(子查询/分组条件/集合运算)</p><pre><code class="mysql">select sname from tb_student where stuid in (select sid from tb_score group by sid having count(sid)&gt;2);</code></pre></li><li><p>查询选课学生的姓名和平均成绩(子查询和连接查询)</p><pre><code class="mysql">select sname, avgmark from tb_student t1,(select sid, avg(mark) as avgmark from tb_score group by sid) t2where stuid=sid;select sname,cname,mark from tb_studentinner join tb_score on stuid=sidinner join tb_course on couid=cidwhere mark is not null;-- 注意：在连接查询时结果没有给出连接条件就会形成笛卡尔积-- 笛卡儿积-- A(a, b, c)*B(d, e)={ad, ae,bd, be, cd, ce}-- 查询学生姓名、所选课程名称和成绩(连接查询)-- 连接查询(连接查询/连结查询)select sname,cname,markfrom tb_score, tb_student, tb_coursewhere stuid=sid and couid=cid and mark is not null;-- 查询每个学生的姓名和选课数量（左外连接和子查询）-- 左外连接(left outer join) ----- 把左表（写在连接前面的表）不满足连接条件的记录也查询出来对应记录补null值-- 右外连接(right outer join) ----- 把右表（写在连接后面的表）不满足连接条件的记录也查询出来对应记录补null值-- 全外连接(full outer join) ------ 把满足和不满足条件的记录全部查出来，mysql数据库不支持此操作select sname as 姓名, conter as 选课数量 from tb_student left join,(select sid, count(sid) as conter from tb_score group by sid)t2on stuid(+)=sid;</code></pre></li></ul><h3 id="表的连接关系"><a href="#表的连接关系" class="headerlink" title="表的连接关系"></a>表的连接关系</h3><p><img src="/2018/10/16/数据库/practice/表连接1.png" alt="表连接1"></p><h4 id="内连接的方式"><a href="#内连接的方式" class="headerlink" title="内连接的方式"></a>内连接的方式</h4><p><img src="/2018/10/16/数据库/practice/表连接2.png" alt="表连接2"></p><h4 id="自连接的方式"><a href="#自连接的方式" class="headerlink" title="自连接的方式"></a>自连接的方式</h4><p><img src="/2018/10/16/数据库/practice/表连接3.png" alt="表连接3"></p><h4 id="外连接的方式"><a href="#外连接的方式" class="headerlink" title="外连接的方式"></a>外连接的方式</h4><p><img src="/2018/10/16/数据库/practice/表连接4.png" alt="表连接4"></p><h2 id="practice2"><a href="#practice2" class="headerlink" title="practice2"></a>practice2</h2><ul><li><p>创建人力资源管理系统数据库</p><pre><code class="mysql">drop database if exists HRS;create database HRS default charset utf8 collate utf8_bin;</code></pre></li><li><p>切换数据库上下文环境<br><code>use HRS;</code></p></li><li><p>删除表</p><pre><code class="mysql">drop table if exists TbEmp;drop table if exists TbDept;</code></pre></li><li><p>创建部门表</p><pre><code class="mysql">create table TbDept(dno tinyint not null comment &#39;部门编号&#39;,dname varchar(10) not null comment &#39;部门名称&#39;,dloc varchar(20) not null comment &#39;部门所在地&#39;,primary key (dno));</code></pre></li><li><p>添加部门记录</p><pre><code class="mysql">insert into TbDept values (10, &#39;会计部&#39;, &#39;北京&#39;);insert into TbDept values (20, &#39;研发部&#39;, &#39;成都&#39;);insert into TbDept values (30, &#39;销售部&#39;, &#39;重庆&#39;);insert into TbDept values (40, &#39;运维部&#39;, &#39;深圳&#39;);</code></pre></li><li><p>创建员工表</p><pre><code class="mysql">create table TbEmp(eno int not null comment &#39;员工编号&#39;,ename varchar(20) not null comment &#39;员工姓名&#39;,job varchar(20) not null comment &#39;员工职位&#39;,mgr int comment &#39;主管编号&#39;,sal int not null comment &#39;月薪&#39;,comm int comment &#39;月补贴&#39;,dno tinyint comment &#39;所在部门编号&#39;,primary key (eno));</code></pre></li><li><p>添加外键约束</p><pre><code class="mysql">alter table TbEmp add constraint fk_dno foreign key (dno) references TbDept(dno) on delete set null on update cascade;-- 更新，删除后赋值为null，所以前面创建的时候就不能添加（is not null)-- on delete set null on update cascade;</code></pre></li><li><p>添加员工记录</p><pre><code class="mysql">insert into TbEmp values (7800, &#39;张三丰&#39;, &#39;总裁&#39;, null, 9000, 1200, 20),(2056, &#39;乔峰&#39;, &#39;分析师&#39;, 7800, 5000, 1500, 20),(3088, &#39;李莫愁&#39;, &#39;设计师&#39;, 2056, 3500, 800, 20),(3211, &#39;张无忌&#39;, &#39;程序员&#39;, 2056, 3200, null, 20),(3233, &#39;丘处机&#39;, &#39;程序员&#39;, 2056, 3400, null, 20),(3251, &#39;张翠山&#39;, &#39;程序员&#39;, 2056, 4000, null, 20),(5566, &#39;宋远桥&#39;, &#39;会计师&#39;, 7800, 4000, 1000, 10),(5234, &#39;郭靖&#39;, &#39;出纳&#39;, 5566, 2000, null, 10),(3344, &#39;黄蓉&#39;, &#39;销售主管&#39;, 7800, 3000, 800, 30),(1359, &#39;胡一刀&#39;, &#39;销售员&#39;, 3344, 1800, 200, 30),(4466, &#39;苗人凤&#39;, &#39;销售员&#39;, 3344, 2500, null, 30),(3244, &#39;欧阳锋&#39;, &#39;程序员&#39;, 3088, 3200, null, 20),(3577, &#39;杨过&#39;, &#39;会计&#39;, 5566, 2200, null, 10),(3588, &#39;朱九真&#39;, &#39;会计&#39;, 5566, 2500, null, 10);</code></pre><h4 id="习题-1"><a href="#习题-1" class="headerlink" title="习题"></a>习题</h4></li><li><p>查询薪资最高的员工姓名和工资</p><pre><code class="mysql">-- select ename, sal+comm from TbEmp order by sal desc limit 0, 1;        ------- 排序出现的问题：可能前几个人的工资一样select ename as 总裁, sal as 工资 from tbempwhere sal=(select max(sal) from tbemp);</code></pre></li><li><p>查询员工的姓名和年薪((月薪+补贴)*12)</p><pre><code class="mysql">-- select ename as 姓名, sal12 + if(comm12,comm12,0) as 年薪 from TbEmp; orselect ename as 姓名, (sal + ifnull(comm,0))12 as 年薪 from TbEmp;</code></pre></li><li><p>查询年薪大于5万的员工的姓名和年薪</p><pre><code class="mysql">select ename as 姓名, (sal + ifnull(comm,0))12 as 年薪-- from TbEmp where 年薪&gt;50000;from TbEmp where (sal + ifnull(comm,0))12&gt;50000;</code></pre></li><li><p>查询有员工的部门的编号和人数<br><code>select dno,count(dno) as 人数 from TbEmp group by dno;</code>.</p></li><li><p>查询所有部门的名称和人数</p></li></ul><pre><code class="mysql">select dno as 部门编号,dname as 部门名称,counter as 人数 from tbdept as t1,(select dno as d,count(dno) as counter from tbemp group by dno)t2where t1.dno=t2.d;</code></pre><pre><code class="mysql">select dname as 部门名称, ifnull(total, 0) as 人数 from tbdept t1 left join(select dno, count(dno) as total from tbemp group by dno)t2on t1.dno=t2.dno;</code></pre><ul><li><p>查询薪资最高的员工(Boss除外)的姓名和工资</p><pre><code class="mysql">-- select ename as 姓名, sal+if(comm, comm, 0) as 工资 from TbEmp-- order by (sal+if(comm, comm, 0)) desc limit 1, 1;select ename as 员工, sal as 工资 from tbempwhere sal=(select max(sal) from tbemp where mgr is not null);</code></pre></li><li><p>查询薪水超过平均薪水的员工的姓名和工资</p><pre><code class="mysql">select ename as 姓名, sal as 工资 from tbempwhere (sal+if(comm, comm, 0))&gt;(select avg(sal+if(comm, comm, 0)) from tbemp);</code></pre><pre><code class="mysql">select ename as 姓名, sal as 工资 from TbEmpwhere sal&gt;(select avg(sal) from tbemp);</code></pre></li><li><p>查询薪水超过其所在部门平均薪水的员工的姓名、部门编号和工资</p><pre><code class="mysql">select ename, t1.dno, avgsal from tbemp t1,(select dno, avg(sal) as avgsal from tbemp group by dno)t2where t1.dno=t2.dno and sal&gt;avgsal;-- 多个连表条件之间用and连接</code></pre></li><li><p>查询薪水超过其所在部门平均薪水的员工的姓名、部门名称和工资</p><pre><code class="mysql">select ename, dname, sal from tbemp t1,(select dno, avg(sal) as avgsal from tbemp group by dno)t2,tbdept t3where t1.dno=t2.dno and sal&gt;avgsal and t2.dno=t3.dno;</code></pre></li><li><p>查询部门中薪水最高的人姓名、工资和所在部门名称</p><pre><code class="mysql">select ename, dname, sal from tbemp t1,(select dno, max(sal) as maxsal from tbemp group by dno)t2,tbdept t3where t1.dno=t2.dno and t2.dno=t3.dno and sal=maxsal;</code></pre></li><li><p>查询主管的姓名</p><pre><code class="mysql">- -- select ename from tbemp where job like&#39;%主管%&#39;;select ename, job from tbempwhere eno in (select distinct mgr from tbemp where mgr is not null);-- 说明：去重操作和集合运算效率是非常低的,可以使用以下方法select ename as 主管, job as 职位 from tbemp t1 where exists (select &#39;x&#39; from tbemp t2 where t1.eno=t2.mgr) order by eno desc;</code></pre></li><li><p>通常建议用exists或者not exists操作来代替去重和集合运算</p><pre><code class="mysql">select ename, job from tbemp t1where exists (select &#39;x&#39; from tbemp t2 where t1.eno=t2.mgr);</code></pre></li><li><p>视图是查询的快照</p><pre><code class="mysql">-- 创建视图create view vw_dept_emp_count asselect dno, count(dno) from tbemp group by dno;-- 查看视图select * from vw_dept_emp_count;-- 通过视图可以将用户对表的访问权限进一步加以限制-- 也就是说普通用户看到的就是限制的视图内容create view emp_no_sal asselect ename, dname, sal from tbemp t1,(select dno, avg(sal) as avgsal from tbemp group by dno)t2,tbdept t3where t1.dno=t2.dno and sal&gt;avgsal and t2.dno=t3.dno;-- 查看视图,限制条件select ename, dname from emp_no_sal;</code></pre></li><li><p>用硬件做的事情，用软件也可以做；反之亦可</p></li><li><p>索引(相当于一本书的目录）</p><ul><li><p>为表创建索引可以加速查询(用空间换时间)</p></li><li><p>索引不能滥用：</p><ul><li><p>一、索引会让增删改变得更慢，应为增删改的操作可能会导致更新索引</p></li><li><p>二、索引会占用额外的存储空间</p></li><li>索引应该建在经常被用于查询的筛选条件的列上面，主键上有默认的索引(唯一索引)</li></ul></li></ul></li><li><p>创建索引</p><pre><code class="mysql">-- 说明：使用模糊查询 ----- 如果查询条件不以%开头，索引有效;反之,无效create index idx_emp_ename on tbemp(ename);-- 唯一索引create unique index uni_emp_ename on tbemp(ename);</code></pre></li><li><p>删除索引<br><code>alter table tbemp drop index uni_emp_ename;</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> databases </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL</title>
      <link href="/2018/10/16/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/"/>
      <url>/2018/10/16/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/</url>
      
        <content type="html"><![CDATA[<p>MySQL是一种<a href="https://baike.baidu.com/item/%E5%BC%80%E6%94%BE%E6%BA%90%E4%BB%A3%E7%A0%81" target="_blank" rel="noopener">开放源代码</a>的关系型<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86" target="_blank" rel="noopener">数据库管理</a>系统（RDBMS），MySQL<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F" target="_blank" rel="noopener">数据库系统</a>使用最常用的数据库管理语言–<a href="https://baike.baidu.com/item/%E7%BB%93%E6%9E%84%E5%8C%96%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80" target="_blank" rel="noopener">结构化查询语言</a>（SQL）进行数据库管理。</p><p>端口是IP地址区分不同服务的</p><ul><li>Docker —- 屏蔽硬件和软件的差异</li><li>虚拟机（Virtual Machine）指通过软件模拟的具有完整硬件系统功能的、运行在一个完全隔离环境中的完整计算机系统</li></ul><p>图形化的MySQL客户端工具</p><ul><li>Navicat for MySQL</li><li>Tod for MySQL</li><li>SQLyog</li></ul><h3 id="ER-—–-实体关系图"><a href="#ER-—–-实体关系图" class="headerlink" title="ER —– 实体关系图"></a>ER —– 实体关系图</h3><p><img src="/2018/10/16/数据库/MySQL/表与表的关系.png" alt="image"></p><h3 id="MySQL中表与表的关系"><a href="#MySQL中表与表的关系" class="headerlink" title="MySQL中表与表的关系"></a>MySQL中表与表的关系</h3><p>一对一：一个实体只对应一个实体</p><p>一对多：一个实体可以对应多个实体</p><p>多对多：多个实体对应多个实体</p><h5 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h5><p>外键/外键约束 ——- 外来的主键 —- 参照完整性</p><p>数据的完整性</p><ul><li>实体完整性==：==<ul><li>每条记录都是独一无二的，没有冗余</li><li>主键/唯一索引（唯一的约束）</li></ul></li></ul><p><code>alter table tb_college add constraint uni_college_collname unique(collname)</code></p><ul><li>参照完整性：<ul><li>B表参照了A表，A表没有的记录在B表中决不能出现</li><li>外键(外键约束)<pre><code>alter table tb_student add column coll_stuid int;alter table tb_student add constraint fk_teacher_coll_stuidforeign key (coll_stuid) references tb_college (num);</code></pre></li></ul></li><li>域完整性：录入的数据都是有效的<ul><li>数据类型/非空约束/默认值约束/检查约束(MySQL中不生效)</li></ul></li></ul><p>数据的一致性</p><h4 id="聚合函数：在所有的数据库中都支持的函数"><a href="#聚合函数：在所有的数据库中都支持的函数" class="headerlink" title="聚合函数：在所有的数据库中都支持的函数"></a>聚合函数：在所有的数据库中都支持的函数</h4><ul><li>max()/ main()/ sum()/ avg()/ count()</li></ul>]]></content>
      
      
      <categories>
          
          <category> databases </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚拟机 </tag>
            
            <tag> 集合函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python</title>
      <link href="/2018/10/15/README/"/>
      <url>/2018/10/15/README/</url>
      
        <content type="html"><![CDATA[<p>学习是一件庄严而又神圣的事情，贵在坚持</p><p>不断地积累,才能体会到其中的乐趣</p><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><h3 id="第1天"><a href="#第1天" class="headerlink" title="第1天"></a>第1天</h3><ol><li>前端页面 = 标签(内容) + CSS(显示) + JavaScript(行为)</li><li>JavaScript = ECMAScript + BOM(window) + DOM(document)</li><li>window <ul><li>alert() / prompt() / confirm() / close()</li><li>setInterval() / setTimeout() / clearInterval() / clearTimeout()</li></ul></li><li>document<ul><li>getElementById() / getElementsByTagName() / getElementsByClassName()</li><li>querySelector() / querySelectorAll()</li></ul></li><li>HTMLElement<ul><li>textContent / innerHTML</li></ul></li><li>其他知识<ul><li>Date: getFullYear() / getMonth() / getDate() / getDay()</li><li>Math: Math.random()</li><li>parseInt() / parseFloat()</li></ul></li></ol><h3 id="第2天"><a href="#第2天" class="headerlink" title="第2天"></a>第2天</h3><ol><li>JavaScript中的事件处理<ul><li>在标签上使用onXXX属性来进行事件绑定</li><li>通过代码获取标签绑定onXXX属性</li><li>通过代码获取标签然后使用addEventListener()绑定事件<br>使用removeEventListener()反绑定事件<br>这里有浏览器兼容性问题 对于低版本IE要使用<br>attachEvent() / detachEvent()</li></ul></li><li>事件回调函数和事件对象<ul><li>绑定事件监听器的函数都需要传入事件的回调函数</li><li>程序员知道事件发生的时候需要做什么样的处理但是不知道事件什么时候发生</li><li>所以传入一个函数在将来发生事件的时候由系统进行调用 这种函数就称为回调函数</li><li>回调函数的第一个参数代表事件对象（封装了和事件相关的所有信息）对于低版本IE</li><li>可以通过window.event来获取事件对象</li><li>事件对象的属性和方法：<ul><li>target / srcElement - 事件源（引发事件的标签）</li><li>preventDefault() / returnValue=false - 阻止事件的默认行为</li><li>处理事件有两种顺序：事件冒泡（默认，从内向外）/ 事件捕获（从外向内）</li><li>如果要阻止事件的传播行为（例如阻止事件冒泡）可以使用<br>stopPropagation() / cancelBubble=true</li></ul></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL</title>
      <link href="/2018/10/15/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL%E9%A2%84%E4%B9%A0/"/>
      <url>/2018/10/15/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL%E9%A2%84%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>MySQL的海豚标志的名字叫“sakila”，它是由MySQL AB的创始人从用户在“海豚命名”的竞赛中建议的大量的名字表中选出的。获胜的名字是由来自非洲斯威士兰的开源软件开发者Ambrose Twebaze提供。</p><h1 id="MySQL预习"><a href="#MySQL预习" class="headerlink" title="MySQL预习"></a>MySQL预习</h1><h3 id="MySQL目录结构"><a href="#MySQL目录结构" class="headerlink" title="MySQL目录结构"></a>MySQL目录结构</h3><ul><li>bin目录，存储可执行文件</li><li>data目录，存储数据文件</li><li>docs，文档</li><li>include目录，存储包含的头文件</li><li>lib目录，存储库文件</li><li>share，错误消息和字符集文件</li></ul><h3 id="MySQL的配置选项"><a href="#MySQL的配置选项" class="headerlink" title="MySQL的配置选项"></a>MySQL的配置选项</h3><ul><li><p><strong>修改编码方式</strong></p><p><strong>[mysql]</strong></p><p><strong>default-character-set=utf8</strong></p><p><strong>[mysqld]</strong></p><p><strong>character-set-server=utf8</strong></p></li></ul><h3 id="MySQL服务的启动和关闭"><a href="#MySQL服务的启动和关闭" class="headerlink" title="MySQL服务的启动和关闭"></a>MySQL服务的启动和关闭</h3><ul><li><p><strong>启动MySQL服务</strong></p><p><strong>net start mysql</strong></p></li><li><p><strong>关闭MySQL服务</strong></p><p><strong>net stop mysql</strong></p></li></ul><h3 id="MySQL的使用"><a href="#MySQL的使用" class="headerlink" title="MySQL的使用"></a>MySQL的使用</h3><ol><li><p><strong>MySQL登录</strong></p><ul><li><p>mysql  参数</p><p><img src="/2018/10/15/数据库/MySQL预习/MySQL1.jpg" alt="MySQL1"></p></li></ul></li><li><p><strong>MySQL退出</strong></p><ul><li><strong>mysql &gt; exit;</strong></li><li><strong>mysql &gt; quit;</strong></li><li><strong>mysql &gt; \q;</strong></li></ul></li></ol><h3 id="修改MySQL提示符"><a href="#修改MySQL提示符" class="headerlink" title="修改MySQL提示符"></a>修改MySQL提示符</h3><ul><li><p><strong>连接客户端时通过参数指定</strong></p><p><code>shell&gt;mysql -uroot -proot -prompt 提示符</code>    </p></li><li><p><strong>连接上客户端后，通过prompt的命令来实现</strong></p><ul><li><code>mysql&gt;prompt 提示符</code>    <ul><li><strong>\D ———– 完整的日期</strong></li><li><strong>\d ———– 当前数据库</strong></li><li><strong>\h ———– 服务器的名称</strong></li><li><strong>\u ———– 当前用户</strong></li></ul></li></ul></li></ul><h3 id="MySQL常用命令"><a href="#MySQL常用命令" class="headerlink" title="MySQL常用命令"></a>MySQL常用命令</h3><ul><li><p><strong>显示当前服务器版本</strong></p><p><strong>SELECT  VERSION();</strong></p></li><li><p><strong>显示当前日期时间</strong></p><p><strong>SELECT  NOW();</strong></p></li><li><p><strong>显示当前用户</strong></p><p><strong>SELECT  USER();</strong></p></li></ul><h3 id="MySQL语句的规范"><a href="#MySQL语句的规范" class="headerlink" title="MySQL语句的规范"></a>MySQL语句的规范</h3><ul><li><strong>关键字与函数名称全部大写</strong></li><li><strong>数据库名称、表名称、字段名称全部小写</strong></li><li><strong>SQL语句必须以分号结尾</strong></li></ul><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><ul><li><p><strong>CREATE {DATABASE | SCHEMA} [IF NOT EXISTS] DB_name</strong></p><p><strong>[DEFAULT] CHARACTER SET [=] charset_name</strong></p></li></ul><h3 id="查看当前服务器下的数据表列表"><a href="#查看当前服务器下的数据表列表" class="headerlink" title="查看当前服务器下的数据表列表"></a>查看当前服务器下的数据表列表</h3><ul><li><p><strong>SHOW {DATABASES | SCHEMAS}</strong></p><p><strong>[LIKE ‘pattern‘ | WHERE expr]</strong></p></li></ul><h3 id="修改数据库"><a href="#修改数据库" class="headerlink" title="修改数据库"></a>修改数据库</h3><ul><li><p><strong>ALTER {DATABASE | SCHEMA} [db_name]</strong></p><p><strong>[DEFAULT] CHARACTER SET [=] charset_name</strong></p></li></ul><h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><ul><li><strong>DROP {DATABASE | SCHEMA} [IF EXISTS] bd_name</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> databases </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux操作命令</title>
      <link href="/2018/09/18/Linux/%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/09/18/Linux/%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="查看自己使用的Shall"><a href="#查看自己使用的Shall" class="headerlink" title="查看自己使用的Shall"></a>查看自己使用的Shall</h3><ul><li>Shall -ps 查看自己使用的Shell</li><li>Shell ——– 人机对话的交互式环境</li><li>bash ——– bourne again shell</li></ul><h3 id="用命令"><a href="#用命令" class="headerlink" title="用命令"></a>用命令</h3><ul><li>clear —— 清屏</li><li>ps —— processes  查看正在运行的进程</li><li>ps -ef —————– 查看运行的进程</li><li>kill PID —— 杀掉进程</li><li>kill -9 ———— 强制杀死进程</li><li>adduser 用户名 ——- 添加用户</li><li>passwd ———- 设置密码</li><li>userdel ———– 删除用户</li><li>su 用户名 ——— 切换用户（switch user）</li><li>sudo ———- 以超级管理员身份操作（super user do）</li><li>chown 拥有者 文件名 ————– 改变文件的拥有者</li><li>‘#’——- 超级管理员</li><li>$ ——– 普通用户</li><li>~ ———- 主目录<h6 id="两个不同的用户"><a href="#两个不同的用户" class="headerlink" title="两个不同的用户"></a>两个不同的用户</h6></li><li>write 用户名 ————— 连接相同的系统的不同用户之间发送消息</li><li>Ctrl d ————— 消息内容结束符</li><li>mesg n / y —————- 不接收消息/接收消息</li><li>wall ————- 给所有用户发消息</li></ul><h4 id="查看命令、帮助文档"><a href="#查看命令、帮助文档" class="headerlink" title="查看命令、帮助文档"></a>查看命令、帮助文档</h4><ul><li>Tab ——– 补全命令，查看命令</li><li>q  ——  结束查看</li><li>man 命令 ——— 查看手册</li><li>命令 –help ———– 查看命令用法</li><li>cd ———– 改变所在目录</li><li>cd /目录名 ——- 去到某个目录</li><li>pwd ——– 查看目录</li><li>ls ——— 查看文件或者文件名（list directory contents）<ul><li>-l 长格式查看</li><li>-a 查看所有（包括以点开头的隐藏文件和文件夹）</li><li>-R 递归查看</li></ul></li><li>| ———- 管道（左边的输出作为右边的输入）</li><li>wget 网址 ——– 通过网络下载文件</li><li>cat ———- concatenate  连接多个文件并显示到标准输出</li><li>cat 文件名 ——— 查看文件</li><li>cat -n 网址 ——– 查看行号</li><li>history ———- 查看所有的历史命令</li><li>！ 历史命令编号 ———- 执行历史命令</li><li>history -c ———— 清除历史命令</li><li>Ctrl c ——— 强行终止命令</li><li>mkdir ——— 创建目录<ul><li>-r 递归删除</li><li>-f 强制删除</li></ul></li><li>rmdir ——— 删除空目录</li><li>cp ———– 复制文件和目录</li><li>cp -r /文件名————- 复制文件夹并修改文件名</li><li>mv —————— 剪切文件</li><li>rm ———- 删除文件和目录</li><li>touch —————- 创建空文件或者修改文件时间</li><li>echo ————— 回声（输入什么，就输出什么）</li><li><strong>&gt;</strong> 件 ———– 输出重定向（输出到指定的文件夹）</li><li>alias / unalies 重新取别名/取消别名</li><li><strong>&gt;&gt;</strong> ———— 追加输出重定向</li><li><strong>2&gt;</strong> ———— 错误输出重定向</li><li>&lt;输入重定向</li><li>grep 搜索字符串</li><li>date ————— 查看时间</li><li>cal —————- 查看日历（calendar）</li><li>head -数字 —————- 查看指定头行数</li><li>tail -数字 —————– 查看指定尾行数</li><li>less/more —————– 分屏查看文件</li><li>wc ——————- world count 统计</li><li>uniq 文件夹 ————- 去掉文件夹中相邻的重复项</li><li>sort 文件夹 ————– 排序</li><li>diff —————比较文件夹的区别</li></ul><h3 id="重启、关机"><a href="#重启、关机" class="headerlink" title="重启、关机"></a>重启、关机</h3><ul><li>重启和关机 - reboot / init 6 / shutdown / init 0</li><li>shutdown ——- 关机</li><li>shutdown -c（cancle） ————– 取消关机</li><li>init 0(关机)/6(重启)</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> order </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>总结-意外的操作</title>
      <link href="/2018/09/16/Linux/%E6%84%8F%E5%A4%96%E7%9A%84%E6%93%8D%E4%BD%9C/"/>
      <url>/2018/09/16/Linux/%E6%84%8F%E5%A4%96%E7%9A%84%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h3 id="hexo中，将图片上传到hexo中"><a href="#hexo中，将图片上传到hexo中" class="headerlink" title="hexo中，将图片上传到hexo中"></a>hexo中，将图片上传到hexo中</h3><h5 id="First"><a href="#First" class="headerlink" title="First"></a>First</h5><ul><li><ol><li>把主页配置文件_config.yml里的post_asset_folder:这个选项设置为true</li></ol></li><li><ol start="2"><li>在你的hexo目录下执行这样一句话npm install hexo-asset-image –save，这是下载安装一个可以上传本地图片的插件，来自dalao：dalao的git</li></ol></li><li><ol start="3"><li>等待一小段时间后，再运行hexo n “xxxx”来生成md博文时，<code>/source/_posts</code>文件夹内除了xxxx.md文件还有一个同名的文件夹</li></ol></li></ul><h5 id="Second"><a href="#Second" class="headerlink" title="Second"></a>Second</h5><ul><li><ol start="4"><li>最后在xxxx.md中想引入图片时，先把图片复制到xxxx这个文件夹中，然后只需要在xxxx.md中按照markdown的格式引入图片：<br><code>![你想输入的替代文字](xxxx/图片名.jpg)</code></li></ol></li></ul><p>注意： xxxx是这个md文件的名字，也是同名文件夹的名字。只需要有文件夹名字即可，不需要有什么绝对路径。你想引入的图片就只需要放入xxxx这个文件夹内就好了，很像引用相对路径。</p><ul><li><ol start="5"><li>最后检查一下，hexo g 生成页面后，进入public\2017\02\26\index.html文件中查看相关字段，可以发现，html标签内的语句是<code>&lt;img src=&quot;2017/02/26/xxxx/图片名.jpg&quot;&gt;</code>，而不是<code>&lt;img src=&quot;xxxx/图片名.jpg&gt;</code>这很重要，关乎你的网页是否可以真正加载你想插入的图片。</li></ol></li></ul><h3 id="GitHub中上传的图片"><a href="#GitHub中上传的图片" class="headerlink" title="GitHub中上传的图片"></a>GitHub中上传的图片</h3><ul><li>1.在git的文件夹中创建一个img的文件夹，用来存储图片</li><li>2.然后上传到github中，每一张图片都有自己对应的url路由</li><li>3.在写MarkDown的时候，需要插入图片，<strong><code>![你想输入的替代文字](url)</code></strong>保存后，在github上就可以看到了</li></ul><h3 id="Gitee中的图片"><a href="#Gitee中的图片" class="headerlink" title="Gitee中的图片"></a>Gitee中的图片</h3><ul><li>1.gitee上有一个在线编辑的工具，进入你的MarkDown文件中，在右上角有一个编辑的按钮</li><li>2.进入编辑，就有插入图片的标识，然后可以选择插入图片的地址（网上图片直接插入，点击那个地址框前面的图片标识，进入本地文件，然后选择本地图片）</li><li>3.插入完成后，在末尾有一个保存更新，就成功插入图片了</li></ul><h4 id="在git中，将本地的文件上传到GitHub库中"><a href="#在git中，将本地的文件上传到GitHub库中" class="headerlink" title="在git中，将本地的文件上传到GitHub库中"></a>在git中，将本地的文件上传到GitHub库中</h4><ul><li>先添加一个本地文件 <code>git add 文件名</code></li><li>再上传到库中 <code>git commit -m &quot;上传说明&quot;</code></li><li>最后同步GitHub上 <code>git push</code></li></ul><h3 id="博客连接GItHub的二级域名的方法："><a href="#博客连接GItHub的二级域名的方法：" class="headerlink" title="博客连接GItHub的二级域名的方法："></a>博客连接GItHub的二级域名的方法：</h3><p><a href="https://blog.csdn.net/lmj623565791/article/details/51319147" target="_blank" rel="noopener">https://blog.csdn.net/lmj623565791/article/details/51319147</a></p><h3 id="修改服务器的登录提示语"><a href="#修改服务器的登录提示语" class="headerlink" title="修改服务器的登录提示语"></a>修改服务器的登录提示语</h3><p>修改文件夹      / etc / profile</p><h3 id="从Linux上传文件到阿里云服务器"><a href="#从Linux上传文件到阿里云服务器" class="headerlink" title="从Linux上传文件到阿里云服务器"></a>从Linux上传文件到阿里云服务器</h3><h6 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h6><p><strong>Nginx</strong>:是一款轻量级的Web 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器</p><p>1.安装Nginx：<br><code>yum -y install nginx</code> </p><p>2.启动Nginx：<br><code>systemctl start nginx / service nginx start(centos6)</code></p><p>（可以通过IP访问，打开防火墙）<br>IP地址可以确定网络上的一台主机，端口号可以用来区分不同的服务（http - 80）</p><ul><li>/usr/share/nginx/html ———- 服务器内容的存放位置，上传文件(put),下载文件(get)，首页文件index.html,在index.html文件中添加a标签的超链接</li><li>/etc/nginx/nginx.conf ———- 服务器配置内容文件</li></ul><p>sftp root@Ip</p><h5 id="sftp常用命令"><a href="#sftp常用命令" class="headerlink" title="sftp常用命令"></a>sftp常用命令</h5><ul><li>quit / exit / bye — 退出sftp</li><li>cd / lcd —– 切换远端工作目录/切换本地工作目录</li><li>pwd / lpwd —- 查看远端工作目录/查看本地工作目录</li><li>ls / lls —- 查看远端目录内容/查看本地目录内容</li><li>mkdir / lmkdir —- 创建远端目录/创建本地目录</li></ul><p><strong>苹果系统</strong></p><ul><li>进到相应的文件夹</li></ul><p><img src="/2018/09/16/Linux/意外的操作/put.jpg" alt="put"></p><ul><li>上传文件</li></ul><p><img src="/2018/09/16/Linux/意外的操作/1.jpg" alt="1"></p><p><strong>window系统</strong></p><p>通过Xftp软件，上传文件</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo上传图片 </tag>
            
            <tag> github上传图片 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pymysql</title>
      <link href="/2018/08/22/%E6%95%B0%E6%8D%AE%E5%BA%93/pymysql/"/>
      <url>/2018/08/22/%E6%95%B0%E6%8D%AE%E5%BA%93/pymysql/</url>
      
        <content type="html"><![CDATA[<h3 id="learn"><a href="#learn" class="headerlink" title="learn"></a>learn</h3><p>insert/update/delete</p><pre><code class="python">import pymysqldef main():    no = int(input(&#39;部门编号：&#39;))    name = input(&#39;部门名称：&#39;)    loc = input(&#39;部门所在地：&#39;)    # 创建连接(主机、端口、用户、密码、数据库名)    con = pymysql.connect(host=&#39;localhost&#39;, port=3306,                          user=&#39;root&#39;, password=&#39;123456&#39;,                          database=&#39;hrs&#39;, charset=&#39;utf8&#39;, autocommit=True)    try:        # 通过连接对象的cursor方法获取游标        &#39;&#39;&#39;        # 添加操作        with con.cursor() as cursor:            # 通过游标对象的execute方法向数据库服务器发出SQL            # executemany方法可以一次性执行多个SQL操作，相当于是以批处理的方式执行SQL，效率高            result = cursor.execute(                &#39;insert into tbdept values (%s, %s, %s)&#39;,                (no, name, loc)            )            # 处理服务器返回的信息            if result == 1:                print(&#39;添加成功&#39;)                # con.commit()        # 更新操作        with con.cursor() as cursor:            result1 = cursor.execute(                &#39;update tbdept set dname=%s,dloc=%s where dno=%s&#39;,                (name, loc, no)            )            if result1 == 1:                print(&#39;更新成功&#39;)        &#39;&#39;&#39;        # 删除操作        with con.cursor() as cursor:            result1 = cursor.execute(                &#39;delete from tbdept where dno=%s&#39;,                (no,)            )            if result1 == 1:                print(&#39;删除成功&#39;)    except pymysql.MySQLError as e:        print(e)        # con.rollback()    finally:        # 关闭连接，释放资源        con.close()if __name__ == &#39;__main__&#39;:    main()</code></pre><p>select</p><pre><code class="python">import pymysqlclass Dept(object):    def __init__(self, no, name, loc):        self.no = no        self.name = name        self.loc = loc    def __str__(self):        return f&#39;{self.no}\t{self.name}\t{self.loc}&#39;def main():    con = pymysql.connect(host=&#39;localhost&#39;,                          port=3306,                          user=&#39;root&#39;,                          password=&#39;123456&#39;,                          database=&#39;hrs&#39;,                          charset=&#39;utf8&#39;,                          cursorclass=pymysql.cursors.DictCursor)    try:        with con.cursor() as cursor:            # cursor.execute(&#39;select * from tbdept&#39;)            # depts = cursor.fetchall()            # for dept in depts:            #     print(f&#39;{dept[0]} | {dept[1]} | {dept[2]}&#39;)            #     print(&#39;-&#39; * 18)            cursor.execute(&#39;select dno no, dname name, dloc loc from tbdept&#39;)            depts = cursor.fetchall()            for dept_dict in depts:                # print(dept[&#39;no&#39;], dept[&#39;name&#39;], dept[&#39;loc&#39;])                dept = Dept(**dept_dict)                print(dept)    except pymysql.MySQLError as e:        print(e)    finally:        con.close()if __name__ == &#39;__main__&#39;:    main()</code></pre>]]></content>
      
      
      <categories>
          
          <category> databases </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>redis_order</title>
      <link href="/2018/08/18/%E6%95%B0%E6%8D%AE%E5%BA%93/redis-order/"/>
      <url>/2018/08/18/%E6%95%B0%E6%8D%AE%E5%BA%93/redis-order/</url>
      
        <content type="html"><![CDATA[<h2 id="redis-命令"><a href="#redis-命令" class="headerlink" title="redis 命令"></a>redis 命令</h2><ul><li>Redis：REmote Dictionary Server</li><li>Server(Redis)远程字典服务器，为网站提供高速缓存服务</li></ul><h4 id="网站优化两大定律"><a href="#网站优化两大定律" class="headerlink" title="网站优化两大定律"></a>网站优化两大定律</h4><p>1.缓存 —– 用空间换时间（redis/Memcached）</p><p>2.削峰 —— 能推迟的事情都不要马上做(RabbitMQ/ RocketMQ)</p><h4 id="信息隐藏"><a href="#信息隐藏" class="headerlink" title="信息隐藏:"></a>信息隐藏:</h4><p>&emsp;&emsp;信息隐藏是指在设计和确定模块时，使得一个模块内包含的特定信息（过程或数据），对于不需要这些信息的其他模块来说，是不可访问的</p><h5 id="启动Redis服务器步骤-谨慎"><a href="#启动Redis服务器步骤-谨慎" class="headerlink" title="启动Redis服务器步骤(谨慎):"></a>启动Redis服务器步骤(谨慎):</h5><pre><code class="mysql">1.修改Redis配置文件redis.conf(安装文件目录下)    cp redis-4.0.11/redis.conf redis.conf    # redis-server --post -- requirepass   ----- 也可以修改配置    vim redis.conf    bind 内网地址    requirepass 密码    appendonly yes2.启动服务器    redis-server redis.conf(配置文件) &gt; redis.log &amp;3.启动客户端    redis-cli -h ip地址(私用ip地址)4.验证身份    auth 密码5.停止服务器   1.kill 进程号   2.把进程放到前台，Ctrl c   3.客户端&gt;shutdown6.测试连接输入ping 回应PONG表示连接成功</code></pre><h5 id="操作命令-——-http-redisdoc-com"><a href="#操作命令-——-http-redisdoc-com" class="headerlink" title="操作命令  ——- http://redisdoc.com/"></a>操作命令  ——- <a href="http://redisdoc.com/" target="_blank" rel="noopener">http://redisdoc.com/</a></h5><pre><code class="mysql">操作:    keys *  查看所有键    select 1切换到1号数据库    select 15切换到15号数据库    flushall 删掉所有数据库的所有数据    flushdb 删掉当前一个数据库的数据删掉    save 保存数据    bgsave 后台保存    set key value ex 存活时间 ：设置键值对并设置存活时间    ttl key:查看数据的存活时间（ttl time to live),如果看到-1说明这个数据永不超时，如果-2说明没这个数据    expire key 时间: 设置已有键的存活时间    ince key:增加值    decr key:减少值基准测试：    redis-benchmark -h ip -a 密码    测试redis性能    LBS：Location-Base Service字符串:    setnx:如果不存在才赋值    setex:在设置键值对的时候同时设置存活时间    mset:一次放很多键值对    mget:一次获取多个键值对哈希表(hash)    hset:设置hash类型    hget:获取值 hget key filed    hgetall:获取对应key的所有值（hgetall key）    hmget:一次性获取多个值    hmset:一次性赋值多个        hmset stu1 id 101 name baiyuan age 12 gender male    hdel:删除哈希数据        hdel stu1 age    hexists:判断对应键是否存在某字典        hexists stu1 mile    hlen:统计键有多少字段    hkey:取出对应键的所有字段    hvals:取出对应键的所有值    hscan:遍历键值对列表:(List)    lpush:向列表放原始(从左边开始放)        lpush list1 1 2 3 4 5    lpop:从左边开始取    rpop:从右边开始取    rpush:(从右边开始放)    lrange:指定范围取元素()        lrange list1 start end        lrange list1 0 -1    lset:修改列表指定下标的值        lset list 1 1000    blpop:如果列表没东西，且时间未超时就阻塞，有东西拿走，超时就结束（从左边取）        blpop list1 20    brpop：如果列表没东西，且时间未超时就阻塞，有东西拿走，超时就结束（从右边取）    brpoplpush:从右边取一个元素，并把这个元素放到另一个列表的左边（阻塞式）集合(Set):    sadd:向集合添加元素        sadd set1 10 20 10 20 30    smebers:查看集合中的元素            smerbers set1    sinter:交集        sinter 集合1 集合2    sunion:并集        sunion 集合1 集合2    sdiff:差集        sdiff 集合1 集合2    sismenber:判断元素在不在集合中        sismenber 集合 元素    spop:从集合中取出一个元素    srandmenber:从集合中随机返回一个元素（实际没有拿走）    srem:移除集合中的一个或者多个元素，如果不存在就忽略浮点数表示法的问题    有序集合（SortedSet）    zadd:添加有序集合        zadd 集合名 值 元素    zrange:查看元素        zrange zs1 0 -1        zrange zs1 0 -1 withscores 显示元素的时候把分数值也显示出来    zrangebyscore:指定搜索范围来搜索数据        zrangebyscore zs1 10 20    zrank:查看元素的排名        zrank zs1 apple    zreverange:从大到小排序查询        zreverange zs1type(值)：查看对应值的类型事务:mult开始事务exec:执行discard：放弃执行服务器:bgsave：后台保存dbsize: 查看数据库有多少键slaveof:把redis设置成那个的奴隶（主从复制，读写分离）shutdown：关闭服务器info:查看服务器相关信息redis-check-aof -fix appendonly.aof    修复aof的文件</code></pre><ul><li>type —– 查看键的类型</li><li>setnx —– 设置已存在键的值</li><li>sentex —- 设置键值对的同时设置时间</li></ul><h4 id="Hash-——-保存对象"><a href="#Hash-——-保存对象" class="headerlink" title="Hash ——- 保存对象"></a>Hash ——- 保存对象</h4><ul><li>hset —– 创建key</li><li>hget —– 取出key</li><li>hgetall —- 取出key的全部属性</li><li>hmset ——- 创建key并设置多个属性</li><li>hmget ——- 取出key的多个属性</li><li>hdel —– 删除key的一个或多个属性</li><li>hexists —– 查看key是否存在</li><li>hlen —– 统计key对应多少个字段</li><li>hkeys ——- 返回key中的所有的域</li><li>hscan ——- 遍历key及域（遍历字典的键和值）</li></ul><h4 id="List"><a href="#List" class="headerlink" title="List"></a>List</h4><p><strong><code>lset list1 0 name</code></strong></p><ul><li>lset —— 给列表1中的下标为0的元素赋值为name</li><li>lpop —— 取出列表的头元素（左边第一个）元素</li><li>rpop —— 取出列表的尾元素（右边第一个）元素</li><li>lpush —— 在表头插入一个或多个值</li><li>rpush —— 在表尾插入一个或多个值</li><li>lrange —— 取出指定的元素</li><li>lset —— 修改原有列表的特定元素值</li><li>blpop —— 阻塞式从左边取出元素（有元素，不阻塞，没有元素，等待输入元素，然后取出）</li><li>blpop —— 阻塞式从右边取出元素（有元素，不阻塞，没有元素，等待输入元素，然后取出）</li><li>rpoplpush A B —— 从A中取出，从B中左边存入</li></ul><h4 id="Set（集合）"><a href="#Set（集合）" class="headerlink" title="Set（集合）"></a>Set（集合）</h4><ul><li>sadd —– 添加一个或多个元素</li><li>srem —– 删除一个或多个指定的元素</li><li>scard —— 查看集合中有多少个元素</li><li>smembers —– 查看集合的元素</li><li>sinter —— 查看两个集合的交集</li><li>sunion —– 查看两个集合的并集</li><li>sdiff —— 查看两个集合的差集</li><li>sismember —— 查看一个集合中是否存在一个给定的元素</li><li>spop —– 取出一个随机元素（不同）</li><li>srandmember —— 取出一个随机元素（可能相同）</li></ul><h4 id="Sortedset（有序集合）"><a href="#Sortedset（有序集合）" class="headerlink" title="Sortedset（有序集合）"></a>Sortedset（有序集合）</h4><ul><li>zadd —– 添加元素</li><li>zrange —– 查看元素（排好序的）</li><li>zrangebyscore —- 指定范围查看</li><li>zrank —– 排名（从0开始排的）</li><li>zrem —– 删除</li><li>zrevrange —— 倒序排列</li></ul><h3 id="复制："><a href="#复制：" class="headerlink" title="复制："></a>复制：</h3><h5 id="主从复制（读写分离）修改内容："><a href="#主从复制（读写分离）修改内容：" class="headerlink" title="主从复制（读写分离）修改内容："></a>主从复制（读写分离）修改内容：</h5><ul><li>master不用修改配置</li><li>slave修改两条配置<ul><li>slaveof master的IP地址 master的端口</li><li>masterrauth master的口令</li></ul></li><li>info replication ——- 查看是否有奴隶</li><li>info ——- 查看服务器信息 </li><li>ps -ef | grep deris | grep -v grep | awk ‘{print $2}’ | xargs kill ——- 杀掉所有的奴隶</li><li>slaveof no one ——— 拒绝当奴隶</li></ul><h6 id="故障处理"><a href="#故障处理" class="headerlink" title="故障处理"></a>故障处理</h6><p>配置哨兵（sentinel.conf）</p><ul><li>修改sentinel.conf配置文件<ul><li>修改69行的监视窗口 跟上票数</li><li>98行master的死亡时间设置<ul><li>在规定的时间回来了，还是master，没回来就重选</li></ul></li><li>131行的意思：master在3分钟内回来，也只能当奴隶，没回来，就直接杀死</li></ul></li><li>redis-server sentinel.conf –sentinel ——– 启动哨兵文件</li></ul><h3 id="MySQL-MongoDB"><a href="#MySQL-MongoDB" class="headerlink" title="MySQL / MongoDB"></a>MySQL / MongoDB</h3><ul><li><p>热（点）数据 —- 经常被访问的数据</p></li><li><p>redis放的应该是体量不大的热点数据</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> databases </category>
          
      </categories>
      
      
        <tags>
            
            <tag> order </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库</title>
      <link href="/2018/08/15/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2018/08/15/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>​        数据库（Database）是按照数据结构来组织、存储和管理数据的仓库，</p><p>每个数据库都有一个或多个不同的API用于创建，访问，管理，搜索和复制所保存的数据。</p><p>—– 从删库，到跑路额！</p><ul><li>数据库 —– database - 数据的仓库（集散地）<ul><li>通过数据库可以实现数据的持久化</li><li>数据持久化：文件操作（读写文件）-文本文件 / Excel</li><li>使用数据库的原因：当我们做数据持久化操作时不仅仅是希望能够把数据长久的保存下来，更为重要的是我们很方便的管理数据，在需要数据的时候能够很方便的把需要的数据取出来</li></ul></li><li>1907s IBM - 关系型数据库<ul><li>理论基础：关系代数和集合论</li><li>具体表象：用二维表（行，列）来组织数据<ul><li>行：记录（1212 电脑城 男） - 实体的具体记录</li><li>列：字段（学号，姓名，性别） - 实体的属性</li></ul></li><li>关系型数据库自己的编程语言 - SQL（结构化查询语言）</li><li>DDL（数据定义语言）：create / drop / alter(修改）</li><li>DML（数据操作语言）: insert / delete /update / select</li><li>DCL（数据控制语言）: grant(授权）/ revoke(撤销）</li><li>关系型数据库产品：<ul><li>Oracle - Oracle 12c</li><li>MySQL -Oracle</li><li>SQLServer</li><li>PostgreSQl</li><li>DB2<h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4></li></ul></li></ul></li><li>SQL （Structred Query Language)</li><li>DDL（数据定义语言）：create / drop / alter(修改）</li><li>DML（数据操作语言）: insert / delete /update / select</li><li>DCL（数据控制语言）: grant(授权）/ revoke(撤销)</li><li>DDL(Data Default Language)</li></ul><h2 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h2><h3 id="创建数据库-1"><a href="#创建数据库-1" class="headerlink" title="创建数据库"></a>创建数据库</h3><p><code>create database school default charset utf8;</code></p><h4 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h4><p><code>drop database if exists school;</code></p><h4 id="切换到数据库school"><a href="#切换到数据库school" class="headerlink" title="切换到数据库school"></a>切换到数据库school</h4><p><code>use school;</code></p><h4 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h4><p><code>drop table if exists tb_student;</code></p><h4 id="创建二维表保存数据"><a href="#创建二维表保存数据" class="headerlink" title="创建二维表保存数据"></a>创建二维表保存数据</h4><ul><li>列名 数据类型 约束条件</li><li>非空约束 —- not null</li><li>默认值约束 —– default</li><li>主键 ——- 表中能够唯一标识一条记录的列</li><li>主键约束 —— primary key<pre><code class="mysql">create table tb_student(stuid int not null,stuname varchar(4) not null,gender bit default 1,brith date,addr varchar(50),primary key (stuid));</code></pre></li><li>修改表<pre><code class="mysql">alter table tb_student add column tel char(11) not null;alter table tb_student drop column brith;alter table tb_student add score int not null;</code></pre></li><li>插入数据<br>– DMl (Data Manipulation Language)<pre><code class="mysql">insert into tb_student values (1001, &#39;天明&#39;, 0, &#39;四川&#39;, &#39;17640141329&#39;, 90);insert into tb_student values (1002, &#39;王大锤&#39;, 1, &#39;四川&#39;, &#39;17640141329&#39;,80);insert into tb_student (stuid, tel, stuname, score, addr) values(1003, &#39;17640141329&#39;, &#39;盖聂&#39;, 100, &#39;四川成都&#39;);insert into tb_student (stuid, tel, stuname, score) values(1004, &#39;17640141329&#39;, &#39;张三&#39;, 60),(1005, &#39;17640141329&#39;, &#39;豆丁&#39;, 85),(1006, &#39;17640141329&#39;, &#39;小明&#39;, 55);</code></pre></li><li>删除数据<pre><code class="mysql">delete from tb_student where stuid=1006;delete from tb_student where stuname=&#39;天明&#39;;delete from tb_student where stuid in (1004, 1006, 2000);</code></pre></li><li>截断数据（删除全表）<br><code>truncate table tb_student;</code></li><li>更新数据<pre><code class="mysql">update tb_student set addr=&#39;四川绵阳&#39;, gender=0 where stuid in (1003, 1004);</code></pre></li><li>查询数据<pre><code class="mysql">select * from tb_student;-- 投影select stuname, gender from tb_student;-- 别名（alias --- as）select stuname as 姓名,gender 性别 from tb_student;select stuname as 姓名,if(gender, &#39;男&#39;, &#39;女&#39;) as 性别 from tb_student;select stuname as 姓名,case gender when 1 then &#39;男&#39; else &#39;女&#39; end as 性别 from tb_student;</code></pre></li><li>对列做运算<br>select concat(stuname, ‘: ‘, tel) as 信息 from tb_student;</li><li>筛选<br>select * from tb_student where stuid=1001;</li><li>不等号用&lt;&gt;表示<br><code>`</code>mysql<br>select <em> from tb_student where stuid&lt;&gt;1001;<br>select </em> from tb_student where stuid in (1001, 1003, 1005);<br>select stuid, stuname, gender from tb_student where stuid&gt;1002;<br>select stuid, stuname, gender from tb_student where stuid&lt;=1002;<br>select stuid, stuname, gender from tb_student where gender=0;<br>select <em> from tb_student where stuid between 1002 and 1004;<br>select </em> from tb_student where stuid&gt;1004 and gender=0;<br>select * from tb_student where stuid&gt;1004 or gender=0;</li><li>注意：判断一个字段是否为null不能用=和&lt;&gt;<br>select <em> from tb_student where addr is null;<br>select </em> from tb_student where addr is not null;<br><code>`</code></li><li>%是一个通配符表示零个或任意多个字符<pre><code class="mysql">select * from tb_student where stuname like &#39;张%&#39;;select * from tb_student where stuname like &#39;%三%&#39;;</code></pre></li><li>_也是一个通配符，它表示一个字符<pre><code class="mysql">select * from tb_student where stuname like &#39;张_&#39;;select * from tb_student where stuname like &#39;张__&#39;;</code></pre></li><li>排序——order by </li><li>默认升序（ascending）可以不写，降序descending必须写<pre><code class="mysql">select * from tb_student order by stuid desc;select * from tb_student order by tel asc;select * from tb_student order by gender asc, stuid desc;select * from tb_student where gender=0 order by stuid desc;</code></pre></li><li>分页（限制）<pre><code class="mysql">select * from tb_student limit 3;select * from tb_student limit 3 offset 3;</code></pre></li><li><p>跳过6条信息，查3条信息<br><code>select * from tb_student limit 3 offset 6;</code></p></li><li><p>跳过2条信息，查4条信息</p><pre><code class="mysql">select * from tb_student limit 2,4;select * from tb_student where gender=1 order by stuid desc limit 0, 3;</code></pre></li></ul><h2 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h2><ul><li><p>创建hellokitty用户并设置口令</p><pre><code class="mysql">create user &#39;hellokitty&#39;@&#39;%&#39;identified by &#39;123123&#39;;</code></pre></li><li><p>给hellokitty授权</p><pre><code class="mysql">grant select on srs.* to &#39;hellokitty&#39;@&#39;%&#39;;grant insert, delete, update on srs.* to &#39;hellokitty&#39;@&#39;%&#39;;grant create, drop, alter on srs.* to &#39;hellokitty&#39;@&#39;%&#39;;</code></pre></li><li><p>获得srs的所有权限，但不能授权给别人</p><pre><code class="mysql">grant all privileges on srs.* to &#39;hellokitty&#39;@&#39;%&#39;;grant all privileges on *.* to &#39;hellokitty&#39;@&#39;%&#39;;</code></pre></li><li><p>将hellokitty自己得到的权限再授权给别人</p><pre><code class="mysql">grant all privileges on srs.* to &#39;hellokitty&#39;@&#39;%&#39; with grant option;</code></pre></li><li><p>召回权限</p><pre><code class="mysql">revoke all privileges on srs.* from &#39;hellokitty&#39;@&#39;%&#39;;</code></pre></li></ul><h5 id="事务控制"><a href="#事务控制" class="headerlink" title="事务控制"></a>事务控制</h5><ul><li><p>创建hellokitty用户并设置口令</p><pre><code class="mysql">create user &#39;hellokitty&#39;@&#39;%&#39;identified by &#39;123123&#39;;</code></pre></li><li><p>给hellokitty授权</p><pre><code class="mysql">grant select on srs.* to &#39;hellokitty&#39;@&#39;%&#39;;grant insert, delete, update on srs.* to &#39;hellokitty&#39;@&#39;%&#39;;grant create, drop, alter on srs.* to &#39;hellokitty&#39;@&#39;%&#39;;</code></pre></li><li><p>获得srs的所有权限，但不能授权给别人</p><pre><code class="mysql">grant all privileges on srs.* to &#39;hellokitty&#39;@&#39;%&#39;;grant all privileges on *.* to &#39;hellokitty&#39;@&#39;%&#39;;</code></pre></li><li><p>将hellokitty自己得到的权限再授权给别人</p><pre><code class="mysql">grant all privileges on srs.* to &#39;hellokitty&#39;@&#39;%&#39; with grant option;</code></pre></li><li><p>召回权限</p><pre><code class="mysql">revoke all privileges on srs.* from &#39;hellokitty&#39;@&#39;%&#39;;</code></pre></li></ul><h6 id="事务控制-1"><a href="#事务控制-1" class="headerlink" title="事务控制"></a>事务控制</h6><ul><li><p>开启事务环境</p><pre><code class="mysql">begin-- start transactionupdate tb_score set mark=mark-2 where sid=1001 and mark is not null;update tb_score set mark=mark+2 where sid=1002 and mark is not null;</code></pre></li><li><p>事务提交<br><code>commit；</code></p></li><li>事务回滚<br><code>rollback；</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> databases </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> 表格 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>databases</title>
      <link href="/2018/07/24/%E5%89%8D%E7%AB%AF/daythird/"/>
      <url>/2018/07/24/%E5%89%8D%E7%AB%AF/daythird/</url>
      
        <content type="html"><![CDATA[<h4 id="查询表格中的数据（2）："><a href="#查询表格中的数据（2）：" class="headerlink" title="查询表格中的数据（2）："></a>查询表格中的数据（2）：</h4><pre><code class="python">from django.http import HttpResponse1.或条件（引入函数模块Q）# Q(),alt+enter ----- 引入模块的快捷键 ------- from django.db.models import Q, Fstus = Student.objects.filter(Q(s_age=20) | Q(s_gender=1))2.且条件stus = Student.objects.filter(Q(s_age=20) &amp; Q(s_gender=1))3.非条件stus = Student.objects.filter(~Q(s_age=20))4.查询表中数据的大小stus = Student.objects.filter(字段__gt=F(&#39;另一个字段&#39;))5.查询语文比数学多10分的同学stus = Student.objects.filter(yuwen__gt=F(&#39;math&#39;) + 10)stu_names = [stu.s_name for stu in stus]    # 将stus这个字典变成一个生成器，取出每个同学的名字return HttpResponse(&#39;查询成功&#39;)</code></pre><h4 id="删除列表中的数据："><a href="#删除列表中的数据：" class="headerlink" title="删除列表中的数据："></a>删除列表中的数据：</h4><pre><code class="python">def del_stu(request):    # 实现删除    Student.objects.filter(s_name=&#39;旺财&#39;).delete()    return HttpResponse(&#39;删除成功&#39;)</code></pre><h4 id="更新列表中的数据"><a href="#更新列表中的数据" class="headerlink" title="更新列表中的数据"></a>更新列表中的数据</h4><pre><code class="python">方法一：def update_stu(request)：    # 实现更新    stu = Student.objects.filter(s_name&#39;旺财&#39;).first()   # 取到的是一个字典，所以可以用first（）或者last（）    # Student.objects.get(s_name=&#39;李哥&#39;)    # 从页面上获取s_name，也可以进行数据的更新    stu.s_name = &#39;王老五&#39;    stu.save()    # 保存更新后的信息    return HttpResponse(&#39;修改成功&#39;)      # 返回一个提示语方法二：def update_stu(request):    Student.objects.filter(s_name=&#39;被修改内容&#39;).update(s_name=&#39;修改内容&#39;)    return HttpResponse(&#39;修改成功&#39;)</code></pre><h3 id="在页面上获取所有学生的信息"><a href="#在页面上获取所有学生的信息" class="headerlink" title="在页面上获取所有学生的信息"></a>在页面上获取所有学生的信息</h3><pre><code class="python">from django.shortcuts import render# 1.在文件中新建一个Directory,命名为templates，在templates文件中，新建一个HTML文件，就是网页文件名# 2.在views.py中创建一个函数def all_stu(request):    # 获取所有学生的信息    stus = Student.objects.all()    # 返回页面    return render(request, &#39;页面文件名&#39;, 数据内容)# 3.页面内容&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;table&gt;        &lt;thead&gt;        &lt;th&gt;姓名&lt;/th&gt;        &lt;th&gt;年龄&lt;/th&gt;        &lt;th&gt;数学成绩&lt;/th&gt;        &lt;th&gt;语文成绩&lt;/th&gt;        &lt;th&gt;操作&lt;/th&gt;        &lt;/thead&gt;        {% for stu in students %}        <tbody>            <!--解析变量-->            <td>{{ stu.s_name }}</td>            <td>{{ stu.s_age }}</td>            <td>{{ stu.math }}</td>            <td>{{ stu.yuwen }}</td>            <td>                <a href="/add_info/?stu_id={{ stu.id }}">添加拓展信息</a>            </td>        </tbody>        {% endfor %}    &lt;/table&gt;&lt;/body&gt;&lt;/html&gt;# 4.在urls.py文件urlpatterns中添加访问的路由地址# url(正则表达式，views.创建的函数名)url(r&#39;^all_stu/&#39;, views.all_stu)</code></pre><h3 id="一对一的搜索"><a href="#一对一的搜索" class="headerlink" title="一对一的搜索"></a>一对一的搜索</h3><pre><code class="python"># 1.先创建一个一对一的类class StudentInfo(models.Model):    phone = models.CharField(max_length=11, null=True)    address = models.CharField(max_length=100)    # OneToOneField  指定一对一的关系    stu = models.OneToOneField(Student)    class Meat        db_table = &#39;student_info&#39;   # 对这个表格命名# 2.创建一个函数def add_info (request):    # method 获取请求Http方式    if request.method = &#39;GET&#39;:        return render(request, &#39;info.html&#39;)    if request.method = &#39;POST&#39;:        # 获取页面中提交的手机号码和地址，并保存        phone = request.POST.get(&#39;phone&#39;)        address = request.POST.get(&#39;address&#39;)        stu_id = request.GET.get(&#39;stu_id&#39;)        # 保存        StudentInfo.objects.create(phone=phone, address=address, stu_id=stu_id)        return HttpResponse(&#39;创建拓展表成功&#39;)# 3.在templates文件中创建一个info的HTML文件# 内容：&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;form action=&quot;&quot; method=&quot;post&quot;&gt;        电话号码：&lt;input type=&quot;text&quot; name=&quot;phone&quot;&gt;        地址：&lt;input type=&quot;text&quot; name=&quot;address&quot;&gt;        &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;    &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;# 4.设置路由地址url(r&#39;^sel_info/&#39;, views.sel_info)</code></pre><h3 id="一对多的搜索"><a href="#一对多的搜索" class="headerlink" title="一对多的搜索"></a>一对多的搜索</h3><pre><code class="python"># 1.创建一个Grade的类class Grade(models.Model):    g_name = models.CharField(max_length=10, unique=True)    class Meat:        db_table = &#39;grade&#39;# 2.一个班级有多个学生，所以在学生类中添加主键class Student(models.Model):    # 定义s_name字段，varchar类型，最长不超过6字符，唯一    s_name = models.CharField(max_length=6, unique=True)    # 定义s_age字段，int类型    s_age = models.IntegerField(default=18)    # 定义s_gender字段，bool型    s_gender = models.BooleanField(default=1)    # 定义create_time字段，创建时间    create_time = models.DateTimeField(auto_now_add=True, null=True)    # 定义operate_time字段，修改时间    operate_time = models.DateTimeField(auto_now=True, null=True)    # 定义yuwen字段，语文成绩    yuwen = models.DecimalField(decimal_places=1, max_digits=4, null=True)    #     # 定义math，数学成绩    math = models.DecimalField(decimal_places=1, max_digits=4, null=True)    grade = models.ForeignKey(Grade, null=True)      #  添加的主键# 3.创建一个查询的函数def sel_info_by_stu(request):    if request.method == &#39;GET&#39;:        # 通过学生查询拓展信息        # 第一种方法        stu = Student.objects.get(s_name=&#39;小明&#39;)        info = StudentInfo.objects.filter(stu_id=stu.id)        info = StudentInfo.objects.filter(stu=stu)        # 第二种方法 ,学生对象，关联的模型名的小写（一对多）        info = stu.studentinfo        return HttpResponse(&#39;通过学生查找拓展表信息&#39;)# 4.创建路由地址url(r&#39;^sel_info_by_stu/&#39;, views.sel_info_by_stu),# 5.创建一个通过电话号码查找的函数def sel_stu_by_info(request):    if request.method == &#39;GET&#39;:        # 知道手机号码，找人        info = StudentInfo.objects.get(phone=&#39;12536524521&#39;)        student = info.stu        print(student)        return HttpResponse(&#39;通过手机号码查找学生信息&#39;)url(r&#39;^sel_stu_by_info/&#39;, views.sel_stu_by_info),# 6.通过班级查找def add_grade(request):    if request.method == &#39;GET&#39;:        names = [&#39;物联网&#39;, &#39;python&#39;, &#39;外语&#39;]        for name in names:            Grade.objects.create(g_name=name)        return HttpResponse(&#39;创建班级成功&#39;)url(r&#39;^add_grade/&#39;, views.add_grade),def sel_stu_grade(request):    if request.method == &#39;GET&#39;:        # 通过学生查找班级        stu = Student.objects.filter(s_name=&#39;小明&#39;).first()        gradec = stu.grade        # 通过班级查找学生        grade = Grade.objects.get(g_name=&#39;物联网&#39;)        student = grade.student_set.filter(s_gender=0).all()        return HttpResponse(&#39;查询学生和班级信息&#39;)url(r&#39;^sel_stu_grade/&#39;, views.sel_stu_grade),</code></pre>]]></content>
      
      
      <categories>
          
          <category> databases </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 查 </tag>
            
            <tag> 删 </tag>
            
            <tag> 改 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim</title>
      <link href="/2018/06/15/Linux/vim/"/>
      <url>/2018/06/15/Linux/vim/</url>
      
        <content type="html"><![CDATA[<h3 id="vimrc-——————-保存格式的文件"><a href="#vimrc-——————-保存格式的文件" class="headerlink" title="vimrc ——————- 保存格式的文件"></a>vimrc ——————- 保存格式的文件</h3><h2 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h2><ul><li>文件意外中断，r恢复，b删除</li><li>vim 文件1 文件2 ———– 同时打开多个文件</li><li>vim -d 文件1 文件2 ———— 比较文件1和文件2<h5 id="如果vim打开了多个文件，可以在末行模式中"><a href="#如果vim打开了多个文件，可以在末行模式中" class="headerlink" title="如果vim打开了多个文件，可以在末行模式中"></a>如果vim打开了多个文件，可以在末行模式中</h5></li><li>：ls ——— 查看多个文件的编号</li><li>：b 编号 ——— 跳转文件</li><li>：vs —————- 垂直拆分成两个窗口</li><li>：sp —————- 水平拆分成两个窗口</li><li>Ctrl + w Ctrl + w ————— 将光标移到另一个窗口</li><li>：qa —————– 关闭全部窗口</li></ul><h4 id="vim-文件名-————-进入Linux编辑框"><a href="#vim-文件名-————-进入Linux编辑框" class="headerlink" title="vim 文件名 ———— 进入Linux编辑框"></a>vim 文件名 ———— 进入Linux编辑框</h4><h5 id="刚进入是在命令模式下"><a href="#刚进入是在命令模式下" class="headerlink" title="刚进入是在命令模式下"></a>刚进入是在命令模式下</h5><ul><li>i / a ———- 进入编辑模式或者插入模式</li><li><p>（Esc ——— 退出编辑模式）</p></li><li><p>：/ ?/ /————– 进入末行编辑格式</p><ul><li>set nu / nonu ———— 打开/关闭行号</li><li>set autoindent ———— 保存缩进</li><li>syntax on / off ———- 打开/关闭高量语法</li><li>shift + zz ————– 保存</li><li>wq ————— 保存退出</li><li>q! —————- 强制退出，不保存</li><li>w! —————- 强制保存</li><li>map ———— 映射 快捷键</li><li>imap ————– 在插入模式下映射快捷键</li><li>inoremap ————– 在插入模式下不要递归的映射快捷键</li></ul></li></ul><h5 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h5><ul><li>/正则表达式</li><li>n ——— 正向搜索</li><li>N ——— 反向搜索</li><li>？正则表达式 ——– 反向搜索</li><li>：1,100s/查找内容（正则表达式）/替换内容<br>替换范围substitute/正则表达式/替换内容</li><li>：1,$s/查找内容（正则表达式）/替换内容/gice<ul><li>-g:全局模式</li><li>-i:忽略大小写</li><li>-c:确认模式</li><li>-e:忽略错误</li></ul></li></ul><h5 id="检查工具"><a href="#检查工具" class="headerlink" title="检查工具"></a>检查工具</h5><ul><li>pip3 install pycodestyle —– 初步的代码格式检查工具</li><li>pip3 install pylint ——- 高级代码格式检查</li></ul><h5 id="修改操作权限"><a href="#修改操作权限" class="headerlink" title="修改操作权限"></a>修改操作权限</h5><ul><li>ll ——– 查看模式</li><li>chmod ———— 修改读写模式 </li><li>chmod 数字 ———– 修改模式</li><li>chmod a+x ———— 所有用户都添加操作权限</li><li>chmod u+x g+x o+x ———- 添加执行操作</li><li>Ctrl x &amp; Ctrl o ———– 代码提示并补全</li></ul><h5 id="编辑器操作："><a href="#编辑器操作：" class="headerlink" title="编辑器操作："></a>编辑器操作：</h5><ul><li>在命令模式下：都可以配合数字使用<ul><li>光标移动<ul><li>H ———— 左</li><li>J ————- 下</li><li>K ————- 上</li><li>L ————- 右</li><li>HML ————第一行的第一列/页面中间行的第一列/页面最后一行的第一列</li><li>w ————– 移动一个单词</li><li>gg/1G ——— 到第一行</li><li>G ————- 到最后一行</li><li>$ ———– 行末</li><li>0 ———– 行首</li><li>dd ———– 删掉一行代码</li><li>dw ———- 删一个单词</li><li>Ctrl + e ————- 往下翻一行</li><li>Ctrl + y ————- 往上翻一行</li><li>Ctrl + f ————- 往上翻一页</li><li>Ctrl + b ————- 往下翻一页</li><li>数字 + yy ———- 复制多少行</li><li>p ———- 粘贴</li><li>u ————– 撤销</li><li>Ctrl + r ————- 反撤销</li></ul></li></ul></li></ul><h2 id="vim模式下的Python"><a href="#vim模式下的Python" class="headerlink" title="vim模式下的Python"></a>vim模式下的Python</h2><h4 id="三元运算："><a href="#三元运算：" class="headerlink" title="三元运算："></a>三元运算：</h4><ul><li>if成立取前面，不成立取后面</li></ul><p><code>y = year if month &gt;= 3 else year - 1</code></p><h4 id="占位"><a href="#占位" class="headerlink" title="占位"></a>占位</h4><ul><li>{} ————— 占位符，与%d的作用一样</li></ul><p><code>print(f&#39;{month_names[month]} {year}&#39;.center(20))</code></p><h4 id="字符居中"><a href="#字符居中" class="headerlink" title="字符居中"></a>字符居中</h4><p><code>print（f&#39;{}&#39;.center(num))</code></p><h4 id="取命令行参数："><a href="#取命令行参数：" class="headerlink" title="取命令行参数："></a>取命令行参数：</h4><p>从标准输入读取数据</p><pre><code>调用函数 import sys if len(sys.argv) == 3:     year = int(sys.argv[2])     month = int(sys.argv[1])</code></pre><h4 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h4><p>&emsp;&emsp;在某个时候必须给一个确定的结果，递归函数必须要有一个出口；然后必须要有一个递归公式，在函数中调用函数的部分</p><h4 id="动态规划：牺牲空间，减少时间"><a href="#动态规划：牺牲空间，减少时间" class="headerlink" title="动态规划：牺牲空间，减少时间"></a>动态规划：牺牲空间，减少时间</h4><p>优化重复计算的过程，用一个字典保存要重复计算的值，当需要时直接查找字典</p><pre><code>if num &lt;= 0:     return 1 if num == 0 else 0  try:     return temp[num]  except KeyError:     temp[num] = walk(num - 1) + walk(num - 2) + walk(num - 3)     return temp[num]</code></pre><h4 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h4><p>终极原则：高内聚 低耦合(一个函数或者一个类只做一个事情，一个函数或者一个类只表示自己，不与其他关联)【high cohesion low coupling】</p><h6 id="在Python中函数是一等公民"><a href="#在Python中函数是一等公民" class="headerlink" title="在Python中函数是一等公民"></a>在Python中函数是一等公民</h6><h6 id="函数可以赋值给变量，可以作为方法的参数和返回值"><a href="#函数可以赋值给变量，可以作为方法的参数和返回值" class="headerlink" title="函数可以赋值给变量，可以作为方法的参数和返回值"></a>函数可以赋值给变量，可以作为方法的参数和返回值</h6><pre><code>def calc(items, fn=lambda x, y: x - y):     result = items[0]    for index in range(1, len(items)):        result = fn(result,items[index])    return resultitems = [1, 2, 3, 4, 5]    print(calc(items, lambda x, y: x + y))    print(calc(items, lambda x, y: x * y))</code></pre><h4 id="类"><a href="#类" class="headerlink" title="类"></a>类</h4><p>面向对象的程序设计基本上就是三步走：</p><ol><li>定义类<br>-数据抽象：找属性（名词）<br>-行为抽象：找方法（动词）</li><li>创建对象</li><li>给对象发消息</li></ol><h4 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h4><pre><code>def foo(*args, **kwargs)*args ------- 可变参数（不知道有多少个参数，可以通过*号表示）**kwargs --------- 关键字参数（给了参数名的参数，会被打包成一个字典传入函数）默认参数 ----------- 不传入参数def foo1(a, *, b, c)*前面的参数是位置参数在传参的时候可以不用指定参数名*后面的参数是命名关键字参数在传参的时候必须指定参数名否则报错解包items = [1, 2, 3, 4, 5]start， *_ ， end = items（取列表的第一个数和最后一个数）</code></pre><h4 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h4><ul><li>a.装饰器函数：用一个函数装饰另一个函数，给它增加额外的功能</li><li>b.装饰器函数的参数是被装饰的函数，返回的是起装饰作用的函数</li><li>c.当调用被装饰的函数时，其实是执行装饰器中返回的那个函数</li><li>d.凡是需要这个额外功能的函数，只需要加上装饰器即可，而不需要书写重复的代码</li><li>e.给函数添加装饰器的语法就是在函数前写上  @装饰器函数</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VIM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux_vim</title>
      <link href="/2018/06/03/Linux/Linux-vim/"/>
      <url>/2018/06/03/Linux/Linux-vim/</url>
      
        <content type="html"><![CDATA[<h3 id="分鱼"><a href="#分鱼" class="headerlink" title="分鱼"></a>分鱼</h3><pre><code class="python">#!/usr/bin/python3&quot;&quot;&quot;穷举法:穷尽所有可能直到找到正确答案&quot;&quot;&quot;def main():   &quot;&quot;&quot;分鱼&quot;&quot;&quot;   fish = 1   while True:         enough = True         total = fish         for _ in range(5):             if (total - 1) % 5 == 0:                 total = (total - 1) // 5 *4             else:                 enough = False                 break         if enough:             print(fish)             break         fish += 1 if __name__ == &quot;__main__&quot;:     main()</code></pre><h3 id="穷举法"><a href="#穷举法" class="headerlink" title="穷举法"></a>穷举法</h3><pre><code class="python">#!/usr/bin/python3&quot;&quot;&quot;穷举法&quot;&quot;&quot;def main():   &quot;&quot;&quot;主函数&quot;&quot;&quot;   for cock in range(0, 21):       for hen in range(0, 34):           chick = 100 - cock - hen           if chick % 3 == 0 and cock * 5 + hen * 3 + chick // 3 == 100:                 print(f&quot;公鸡: {cock}只, 母鸡: {hen}只, 小鸡: {chick}只&quot;)if __name__ == &quot;__main__&quot;:    main()</code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim-practice </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>展示数据</title>
      <link href="/2018/05/27/spider/spider_databases/"/>
      <url>/2018/05/27/spider/spider_databases/</url>
      
        <content type="html"><![CDATA[<h3 id="创建一个有个youyaoqi项目"><a href="#创建一个有个youyaoqi项目" class="headerlink" title="创建一个有个youyaoqi项目"></a>创建一个有个youyaoqi项目</h3><ul><li>项目自带文件<ul><li>scrapy.cfg</li><li>youyaoqi<ul><li><strong> init</strong>.py</li><li>items.py</li><li>middlewares.py</li><li>pipelines.py</li><li>settings.py</li><li>spiders<ul><li><code>__ init __.py</code></li><li>cartoon.py</li></ul></li></ul></li></ul></li></ul><p><strong>items</strong></p><pre><code class="python"># -*- coding: utf-8 -*-# Define here the models for your scraped items## See documentation in:# https://doc.scrapy.org/en/latest/topics/items.htmlimport scrapyclass YouyaoqiItem(scrapy.Item):    # define the fields for your item here like:    comic_id = scrapy.Field()    name = scrapy.Field()    cover = scrapy.Field()    update_type = scrapy.Field()    line1 = scrapy.Field()    line2 = scrapy.Field()class U17DetailItem(scrapy.Item):    name = scrapy.Field()    # u_id = scrapy.Field()</code></pre><p><strong>pipelines.py</strong></p><pre><code class="python"># -*- coding: utf-8 -*-# Define your item pipelines here## Don&#39;t forget to add your pipeline to the ITEM_PIPELINES setting# See: https://doc.scrapy.org/en/latest/topics/item-pipeline.htmlimport pymysqlfrom scrapy import Requestfrom scrapy.exceptions import DropItemfrom scrapy.pipelines.images import ImagesPipelineclass ImagePipeline(ImagesPipeline):    def file_path(self, request, response=None, info=None):        url = request.url        file_name = url.split(&#39;/&#39;)[-1]        return file_name    def item_completed(self, results, item, info):        image_paths = [x[&#39;path&#39;] for ok, x in results if ok]        if not image_paths:            raise DropItem(&#39;Image Downloaded Failed&#39;)        return item    def get_media_requests(self, item, info):        yield Request(item[&#39;cover&#39;])class YouyaoqiMysqlPipeline(object):    def __init__(self, host, port, database, username, password):        self.host = host        self.port = port        self.database = database        self.username = username        self.password = password    @classmethod    def from_crawler(cls, crawler):        return cls(            host=crawler.settings.get(&#39;MYSQL_HOST&#39;),            port=crawler.settings.get(&#39;MYSQL_PORT&#39;),            database=crawler.settings.get(&#39;MYSQL_DATABASE&#39;),            username=crawler.settings.get(&#39;MYSQL_USERNAME&#39;),            password=crawler.settings.get(&#39;MYSQL_PASSWORD&#39;),        )    def open_spider(self, spider):        # 获取数据库连接        self.db = pymysql.connect(self.host, self.username, self.password, self.database, charset=&#39;utf8&#39;,                                  port=self.port)        self.cursor = self.db.cursor()    def close_spider(self, spider):        # 释放数据库连接        self.db.close()    def process_item(self, item, spider):        # 插入item数据        sql = &#39;insert into company (comic_id, name, cover, update_type, line1, line2) values (%s, %s, %s, %s, %s, %s)&#39;        self.cursor.execute(sql, (item[&#39;comic_id&#39;], item[&#39;name&#39;], item[&#39;cover&#39;], item[&#39;update_type&#39;], item[&#39;line1&#39;], item[&#39;line2&#39;]))        self.db.commit()        return item</code></pre><p><strong>settings.py</strong></p><pre><code class="python"># -*- coding: utf-8 -*-# Scrapy settings for youyaoqi project## For simplicity, this file contains only settings considered important or# commonly used. You can find more settings consulting the documentation:##     https://doc.scrapy.org/en/latest/topics/settings.html#     https://doc.scrapy.org/en/latest/topics/downloader-middleware.html#     https://doc.scrapy.org/en/latest/topics/spider-middleware.htmlBOT_NAME = &#39;youyaoqi&#39;SPIDER_MODULES = [&#39;youyaoqi.spiders&#39;]NEWSPIDER_MODULE = &#39;youyaoqi.spiders&#39;# Crawl responsibly by identifying yourself (and your website) on the user-agent#USER_AGENT = &#39;youyaoqi (+http://www.yourdomain.com)&#39;# Obey robots.txt rulesROBOTSTXT_OBEY = False# Configure maximum concurrent requests performed by Scrapy (default: 16)#CONCURRENT_REQUESTS = 32# Configure a delay for requests for the same website (default: 0)# See https://doc.scrapy.org/en/latest/topics/settings.html#download-delay# See also autothrottle settings and docs#DOWNLOAD_DELAY = 3# The download delay setting will honor only one of:#CONCURRENT_REQUESTS_PER_DOMAIN = 16#CONCURRENT_REQUESTS_PER_IP = 16# Disable cookies (enabled by default)#COOKIES_ENABLED = False# Disable Telnet Console (enabled by default)#TELNETCONSOLE_ENABLED = False# Override the default request headers:#DEFAULT_REQUEST_HEADERS = {#   &#39;Accept&#39;: &#39;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&#39;,#   &#39;Accept-Language&#39;: &#39;en&#39;,#}# Enable or disable spider middlewares# See https://doc.scrapy.org/en/latest/topics/spider-middleware.html#SPIDER_MIDDLEWARES = {#    &#39;youyaoqi.middlewares.YouyaoqiSpiderMiddleware&#39;: 543,#}# Enable or disable downloader middlewares# See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html#DOWNLOADER_MIDDLEWARES = {#    &#39;youyaoqi.middlewares.YouyaoqiDownloaderMiddleware&#39;: 543,#}# Enable or disable extensions# See https://doc.scrapy.org/en/latest/topics/extensions.html#EXTENSIONS = {#    &#39;scrapy.extensions.telnet.TelnetConsole&#39;: None,#}# Configure item pipelines# See https://doc.scrapy.org/en/latest/topics/item-pipeline.htmlITEM_PIPELINES = {   # &#39;youyaoqi.pipelines.YouyaoqiMysqlPipeline&#39;: 300,   # &#39;youyaoqi.pipelines.ImagePipeline&#39;: 300,}# Enable and configure the AutoThrottle extension (disabled by default)# See https://doc.scrapy.org/en/latest/topics/autothrottle.html#AUTOTHROTTLE_ENABLED = True# The initial download delay#AUTOTHROTTLE_START_DELAY = 5# The maximum download delay to be set in case of high latencies#AUTOTHROTTLE_MAX_DELAY = 60# The average number of requests Scrapy should be sending in parallel to# each remote server#AUTOTHROTTLE_TARGET_CONCURRENCY = 1.0# Enable showing throttling stats for every response received:#AUTOTHROTTLE_DEBUG = False# Enable and configure HTTP caching (disabled by default)# See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html#httpcache-middleware-settings#HTTPCACHE_ENABLED = True#HTTPCACHE_EXPIRATION_SECS = 0#HTTPCACHE_DIR = &#39;httpcache&#39;#HTTPCACHE_IGNORE_HTTP_CODES = []#HTTPCACHE_STORAGE = &#39;scrapy.extensions.httpcache.FilesystemCacheStorage&#39;FEED_EXPORT_ENCODING = &#39;utf-8&#39;MAX_PAGE = 500# IMAGES_STORE = &#39;./images&#39;# mysql settingsMYSQL_HOST = &#39;127.0.0.1&#39;MYSQL_PORT = 3306MYSQL_USERNAME = &#39;root&#39;MYSQL_PASSWORD = &#39;123456&#39;MYSQL_DATABASE = &#39;u17&#39;</code></pre><p><strong>cartoon.py</strong></p><pre><code class="python"># -*- coding: utf-8 -*-import jsonimport scrapyfrom youyaoqi.items import YouyaoqiItem, U17DetailItemclass CartoonSpider(scrapy.Spider):    name = &#39;cartoon&#39;    allowed_domains = [&#39;www.u17.com&#39;]    start_urls = [&#39;http://www.u17.com/&#39;]    def start_requests(self):        data = {&#39;data[group_id]&#39;: &#39;no&#39;, &#39;data[theme_id]&#39;: &#39;no&#39;, &#39;data[is_vip]&#39;: &#39;no&#39;, &#39;data[accredit]&#39;: &#39;no&#39;, &#39;data[color]&#39;: &#39;no&#39;, &#39;data[comic_type]&#39;: &#39;no&#39;, &#39;data[series_status]&#39;: &#39;no&#39;, &#39;data[order]&#39;: &#39;2&#39;, &#39;data[page_num]&#39;: &#39;1&#39;, &#39;data[read_mode]&#39;: &#39;no&#39; }        headers = {            &#39;Referer&#39;: &#39;http://www.u17.com/comic_list/th99_gr99_ca99_ss99_ob0_ac0_as0_wm0_co99_ct99_p1.html?order=2&#39;,            &#39;User-Agent&#39;: &#39;Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko&#39;,            &#39;Host&#39;: &#39;www.u17.com&#39;,            &#39;Accept&#39;: &#39;application/json, text/plain, */*&#39;,            &#39;Accept-Encoding&#39;: &#39;gzip, deflate, sdch&#39;,            &#39;Accept-Language&#39;: &#39;zh-CN,zh;q=0.8,en;q=0.6,ja;q=0.4,zh-TW;q=0.2,mt;q=0.2&#39;,            &#39;Connection&#39;: &#39;keep-alive&#39;,            &#39;X-Requested-With&#39;: &#39;XMLHttpRequest&#39;,        }        max_page = self.settings.get(&#39;MAX_PAGE&#39;)        base_url = &#39;http://www.u17.com/comic/ajax.php?mod=comic_list&amp;act=comic_list_new_fun&amp;a=get_comic_list&#39;        for page in range(2, max_page):            data[&#39;data[page_num]&#39;] = str(page)            yield scrapy.FormRequest(url=base_url, headers=headers, method=&#39;POST&#39;, formdata=data, callback=self.parse)    def get_headers(self):        headers = {            &#39;User-Agent&#39;: &#39;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; 360SE)&#39;,            &#39;Host&#39;: &#39;www.u17.com&#39;,            &#39;Accept&#39;: &#39;application/json, text/plain, */*&#39;,            &#39;Accept-Encoding&#39;: &#39;gzip, deflate, sdch&#39;,            &#39;Accept-Language&#39;: &#39;zh-CN,zh;q=0.8,en;q=0.6,ja;q=0.4,zh-TW;q=0.2,mt;q=0.2&#39;,            &#39;Connection&#39;: &#39;keep-alive&#39;,            &#39;X-Requested-With&#39;: &#39;XMLHttpRequest&#39;,            &#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded; charset=UTF-8&#39;,        }        return headers    def parse(self, response):        result_json = json.loads(response.text)        data_list = result_json[&#39;comic_list&#39;]        for data in data_list:            item = YouyaoqiItem()            item[&#39;comic_id&#39;] = data[&#39;comic_id&#39;]            item[&#39;name&#39;] = data[&#39;name&#39;]            item[&#39;cover&#39;] = data[&#39;cover&#39;]            item[&#39;update_type&#39;] = data[&#39;update_type&#39;]            item[&#39;line1&#39;] = data[&#39;line1&#39;]            item[&#39;line2&#39;] = data[&#39;line2&#39;]            yield item            detail_url = &#39;http://www.u17.com/comic/%s.html&#39; % item[&#39;comic_id&#39;]            yield scrapy.Request(url=detail_url, headers=self.get_headers(), callback=self.parse_detail)    def parse_detail(self, response):        results = response.css(&#39;#chapter li&#39;)        for item in results:            detail_item = U17DetailItem()            name_list = item.xpath(&#39;./a/text()&#39;).extract()            for name in name_list:                detail_item[&#39;name&#39;] = name.replace(&#39;&quot;&#39;, &#39;&#39;).strip()            # detail_item[&#39;u_id&#39;] = title.replace            # detail_item[&#39;name&#39;] = item.replace(&#39;&quot;&#39;, &#39;&#39;).strip()                yield detail_item            # a_url_list = item.css(&#39;./a::attr(href)&#39;).extract()            # for a_url in a_url_list:            #     detail_item[&#39;url&#39;] = a_url            #     yield detail_item</code></pre>]]></content>
      
      
      <categories>
          
          <category> spider </category>
          
      </categories>
      
      
        <tags>
            
            <tag> databases </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BeautifulSoup相关</title>
      <link href="/2018/05/24/spider/BeautifulSoup/"/>
      <url>/2018/05/24/spider/BeautifulSoup/</url>
      
        <content type="html"><![CDATA[<pre><code class="python">#获取直接子节点：contents、children#获取父节点：parent#获取兄弟节点：next_siblings、next_sibling、previous_siblings、previous_sibling&#39;&#39;&#39;&lt;html&gt;    &lt;head&gt;        &lt;title&gt;The Dormouse&#39;s story&lt;/title&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;p class=&quot;story&quot;&gt;            Once upon a time there were three little sisters; and their names were            &lt;a href=&quot;http://example.com/elsie&quot; class=&quot;sister&quot; id=&quot;link1&quot;&gt;                &lt;span&gt;Elsie&lt;/span&gt;            &lt;/a&gt;            &lt;a href=&quot;http://example.com/lacie&quot; class=&quot;sister&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;            and            &lt;a href=&quot;http://example.com/tillie&quot; class=&quot;sister&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;            and they lived at the bottom of a well.        &lt;/p&gt;        &lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;                                                                           &#39;&#39;&#39;from bs4 import BeautifulSoupsoup=BeautifulSoup(html,&#39;html.parser&#39;)# contents:获取直接子节点，返回list类型print(soup.p.contents)# children,返回的是可以迭代的，直接打印输出Nonefor i in soup.p.children:    print(i)print(soup.p.childrensoup)#获取 父节点print(soup.a.parent)# 获取兄弟节点for i in soup.a.next_siblings:#获取a标签后面的所有兄弟节点    print(i)</code></pre><pre><code class="python">html = &#39;&#39;&#39;&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse&#39;s story&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;p class=&quot;title&quot;&gt;&lt;b&gt;The Dormouse&#39;s story&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;story&quot;&gt;Once upon a time there were three little sisters; and their names were&lt;a href=&quot;http://example.com/elsie&quot; class=&quot;sister&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;,&lt;a href=&quot;http://example.com/lacie&quot; class=&quot;sister&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt; and&lt;a href=&quot;http://example.com/tillie&quot; class=&quot;sister&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;;and they lived at the bottom of a well.&lt;/p&gt;&lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;&#39;&#39;&#39;import lxmlfrom bs4 import BeautifulSoup#创建bs对象 bs是使用的python默认的解析器，lxml也是解析器soup = BeautifulSoup(html,&#39;lxml&#39;)#prettify实现格式化的输出print(soup.prettify())#通过soup标签名，获取这个标签的内容。注意：通过这种方式获取标签，如果文档中有多个这样的标签，返回的结果是第一个标签内容print(soup.a)print(soup.p)#获取名称nameprint(soup.title.name)print(soup.p.name)#获取属性print(soup.a[&#39;href&#39;])#获取文本内容-string、textprint(soup.a.string)print(soup.a.text)print(soup.title.string)print(soup.title.text)#嵌套选择,直接通过嵌套的方式获取print(soup.p.b.string)print(soup.head.title.text)</code></pre><h3 id="lxml解析器标准选择器、find-all的使用"><a href="#lxml解析器标准选择器、find-all的使用" class="headerlink" title="lxml解析器标准选择器、find_all的使用"></a>lxml解析器标准选择器、find_all的使用</h3><p>搜索文档树：</p><p>(1)find_all():可以根据标签名、属性、内容查找文档</p><p>(2)find():返回匹配结果的第一个元素</p><p>(3)find_parents() find_parent()</p><p>(4)find_next_siblings() find_next_sibling()</p><p>(5)find_previous_siblings() find_previous_sibling()</p><p>(6)find_all_next() find_next()</p><p>(7)find_all_previous() 和 find_previous()</p><pre><code class="python">&lt;div class=&quot;panel&quot;&gt;    &lt;div class=&quot;panel-heading&quot;&gt;        &lt;h4&gt;Hello&lt;/h4&gt;    &lt;/div&gt;    &lt;div class=&quot;panel-body&quot;&gt;        &lt;ul class=&quot;list&quot; id=&quot;list-1&quot;&gt;            &lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;            &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;            &lt;li class=&quot;element&quot;&gt;Jay&lt;/li&gt;        &lt;/ul&gt;        &lt;ul class=&quot;list list-small&quot; id=&quot;list-2&quot;&gt;            &lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;            &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;        &lt;/ul&gt;    &lt;/div&gt;&lt;/div&gt;from bs4 import BeautifulSoupsoup = BeautifulSoup(html, &#39;lxml&#39;)print(soup.find_all(&#39;ul&#39;))print(type(soup.find_all(&#39;ul&#39;)[0]))</code></pre><pre><code class="python">&lt;div class=&quot;panel&quot;&gt;    &lt;div class=&quot;panel-heading&quot;&gt;        &lt;h4&gt;Hello&lt;/h4&gt;    &lt;/div&gt;    &lt;div class=&quot;panel-body&quot;&gt;        &lt;ul class=&quot;list&quot; id=&quot;list-1&quot;&gt;            &lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;            &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;            &lt;li class=&quot;element&quot;&gt;Jay&lt;/li&gt;        &lt;/ul&gt;        &lt;ul class=&quot;panel-body&quot; id=&quot;list-2&quot;&gt;            &lt;li class=&quot;element&quot;&gt;年后中好说歹说开发，什么才能伤风胶囊&lt;/li&gt;            &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;        &lt;/ul&gt;         &lt;a href=&quot;link1.html&quot;&gt;first item&lt;/a&gt;         &lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;         &lt;li class=&quot;item-inactive&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;     &lt;/ul&gt;    &lt;/div&gt;&lt;/div&gt;from bs4 import BeautifulSoupsoup=BeautifulSoup(html,&quot;lxml&quot;)import re # 1、name参数# 查找所有名字为name的tag,搜索 name 参数的值可以使任一类型的 过滤器 ,字符窜,正则表达式,列表,方法或是 True print(soup.find_all(&#39;li&#39;))# 使用列表print(soup.find_all([&#39;li&#39;,&#39;a&#39;]))print(soup.find_all(True))print(soup.find_all(re.compile(&#39;h4&#39;)))# 2、keyword关键字参数# 关键字是指tag的属性：id、title、href等,注意：使用class时要加上&#39;_&#39;print(soup.find_all(&#39;a&#39;,href=&quot;link1.html&quot;))print(soup.find_all(id=&quot;list-1&quot;))print(soup.find_all(&#39;ul&#39;,class_=&quot;list&quot;))# 使用正则print(soup.find_all(href=re.compile(&#39;3.html&#39;)))# 3、text# 一般与name一起使用，通过 text 参数可以搜搜文档中的字符串内容.与 name 参数的可选值一样, text 参数接受 字符串 , 正则表达式 , 列表, True print(soup.find_all(text=re.compile(&#39;好&#39;)))print(soup.find_all(&#39;li&#39;,text=re.compile(&#39;好&#39;)))# 使用多个属性print(soup.find_all(class_=&quot;panel-body&quot;,id=&quot;list-2&quot;))# 3、string# 一般与name一起使用，通过 string 参数可以搜搜文档中的字符串内容.与 name 参数的可选值一样, string 参数接受 字符串 , 正则表达式 , 列表, True;print(soup.find_all(&quot;a&quot;, string=&quot;first item&quot;))print(soup.find_all(string=&quot;first item&quot;))# 4、limit参数# 这个参数其实就是控制我们获取数据的数量，效果和SQL语句中的limit一样；print(soup.find_all(&quot;a&quot;,limit=2))# 5、recursive参数# 调用tag的 find_all() 方法时,Beautiful Soup会检索当前tag的所有子孙节点,如果只想搜索tag的直接子节点,可以使用参数 recursive=False; </code></pre><h3 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h3><pre><code class="python"># select()直接传入CSS选择器完成选择# .表示class ，#表示id# 标签1，标签2# 标签1 标签2# [attr]可以通过这种方式找到具有某个属性值的所有标签# [attr=value]例子：[target=blank]&lt;div class=&quot;panel&quot;&gt;    &lt;div class=&quot;panel-heading&quot;&gt;        &lt;h4&gt;Hello&lt;/h4&gt;    &lt;/div&gt;    &lt;div class=&quot;panel-body&quot;&gt;        &lt;ul class=&quot;list&quot; id=&quot;list-1&quot;&gt;            &lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;            &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;            &lt;li class=&quot;element&quot;&gt;Jay&lt;/li&gt;        &lt;/ul&gt;        &lt;ul class=&quot;list list-small&quot; id=&quot;list-2&quot;&gt;            &lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;            &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;        &lt;/ul&gt;    &lt;/div&gt;&lt;/div&gt;from bs4 import BeautifulSoupsoup=BeautifulSoup(html,&quot;lxml&quot;)# 找到class属性是panel的标签内的class属性是panel-heading的标签内容print(soup.select(&quot;.panel .panel-heading&quot;))# 找id属性为list-1和id属性为list-2的所有标签print(soup.select(&#39;#list-1,#list-2&#39;))# 找到ul标签下的li标签print(soup.select(&#39;ul li&#39;))# 找到id属性值为list-2内部class属性是element的所有标签print(soup.select(&#39;#list-2 .element&#39;))# get_text()：拿到标签文本值# 所有li标签下的文本值for i in soup.select(&#39;li&#39;):    print(i.get_text())# 获取属性值for i in soup.select(&#39;ul&#39;):    print(i[&quot;id&quot;])</code></pre>]]></content>
      
      
      <categories>
          
          <category> spider </category>
          
      </categories>
      
      
        <tags>
            
            <tag> beautifulSoup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>超级鹰</title>
      <link href="/2018/05/24/spider/auth_code/"/>
      <url>/2018/05/24/spider/auth_code/</url>
      
        <content type="html"><![CDATA[<h2 id="使用验证平台-超级鹰-https-www-chaojiying-com"><a href="#使用验证平台-超级鹰-https-www-chaojiying-com" class="headerlink" title="使用验证平台   超级鹰(https://www.chaojiying.com/)"></a>使用验证平台   超级鹰(<a href="https://www.chaojiying.com/" target="_blank" rel="noopener">https://www.chaojiying.com/</a>)</h2><h3 id="字母数字验证码"><a href="#字母数字验证码" class="headerlink" title="字母数字验证码"></a>字母数字验证码</h3><p>code</p><pre><code class="python">import timefrom io import BytesIOfrom PIL import Imagefrom selenium import webdriverfrom selenium.common.exceptions import TimeoutExceptionfrom selenium.webdriver.common.by import Byfrom selenium.webdriver.support.ui import WebDriverWaitfrom selenium.webdriver.support import expected_conditions as ECfrom chaojiying import main1chrome_options = webdriver.ChromeOptions()# chrome_options.add_argument(&#39;--headless&#39;)browser = webdriver.Chrome(chrome_options=chrome_options)# browser = webdriver.Chrome()browser.set_window_size(1200, 700)# 显式等待 针对某个节点的等待wait = WebDriverWait(browser, 10)def get_big_image():    browser.execute_script(&#39;window.scrollTo(0, 300)&#39;)    screenshot = browser.get_screenshot_as_png()    screenshot = Image.open(BytesIO(screenshot))    return screenshotdef get_captcha_position():    captcha = wait.until(EC.presence_of_element_located                         ((By.CSS_SELECTOR, &#39;#captchaImg&#39;)))    location = captcha.location    size = captcha.size    x1 = location[&#39;x&#39;]    y1 = location[&#39;y&#39;] - 130    width = size[&#39;width&#39;]    height = size[&#39;height&#39;]    x2 = x1 + width    y2 = y1 + height    print(x1, y1, x2, y2)    return (x1, y1, x2, y2)def get_page():    url = &#39;https://login.10086.cn/html/login/login.html?channelID=12002&amp;backUrl=https%3A%2F%2Fshop.10086.cn%2Fmall_280_280.html%3Fforcelogin%3D1&#39;    browser.get(url)    button = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, &#39;#mail_login_2&#39;)))    button.click()    username = &#39;1484815087@qq.com&#39;    password = &#39;518420..&#39;    input_username = wait.until(EC.presence_of_element_located                                ((By.CSS_SELECTOR, &#39;#e_name&#39;)))    input_password = wait.until(EC.presence_of_element_located                                ((By.CSS_SELECTOR, &#39;#e_pwd&#39;)))    input_username.clear()    input_username.send_keys(username)    input_password.clear()    input_password.send_keys(password)    time.sleep(3)    full_screen_img = get_big_image()    full_screen_img.save(&#39;mobile_login.png&#39;)    # 获取验证码左上角和右下角的坐标    x1, y1, x2, y2 = get_captcha_position()    captcha_img = full_screen_img.crop((x1, y1, x2, y2))    captcha_img.save(&#39;mobile_captcha.png&#39;)    captcha_str = main1(&#39;mobile_captcha.png&#39;)    print(captcha_str)    input_code = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, &#39;#inputCode&#39;)))    input_code.clear()    input_code.send_keys(captcha_str)    button = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, &#39;#submit_bt&#39;)))    button.click()    # return htmldef main():    html = get_page()    # parse_html(html)if __name__ == &#39;__main__&#39;:    main()</code></pre><p>验证方式的平台</p><pre><code class="python">import requestsfrom hashlib import md5class Chaojiying_Client(object):    def __init__(self, username, password, soft_id):        self.username = username        password =  password.encode(&#39;utf8&#39;)        self.password = md5(password).hexdigest()        self.soft_id = soft_id        self.base_params = {            &#39;user&#39;: self.username,            &#39;pass2&#39;: self.password,            &#39;softid&#39;: self.soft_id,        }        self.headers = {            &#39;Connection&#39;: &#39;Keep-Alive&#39;,            &#39;User-Agent&#39;: &#39;Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0)&#39;,        }    def PostPic(self, im, codetype):        &quot;&quot;&quot;        im: 图片字节        codetype: 题目类型 参考 http://www.chaojiying.com/price.html        &quot;&quot;&quot;        params = {            &#39;codetype&#39;: codetype,        }        params.update(self.base_params)        files = {&#39;userfile&#39;: (&#39;ccc.jpg&#39;, im)}        r = requests.post(&#39;http://upload.chaojiying.net/Upload/Processing.php&#39;, data=params, files=files, headers=self.headers)        return r.json()    def ReportError(self, im_id):        &quot;&quot;&quot;        im_id:报错题目的图片ID        &quot;&quot;&quot;        params = {            &#39;id&#39;: im_id,        }        params.update(self.base_params)        r = requests.post(&#39;http://upload.chaojiying.net/Upload/ReportError.php&#39;, data=params, headers=self.headers)        return r.json()def main1(urlstr):    chaojiying = Chaojiying_Client(&#39;carmack&#39;, &#39;Vff635241&#39;, &#39;96001&#39;)     im = open(urlstr, &#39;rb&#39;).read()                                                     return chaojiying.PostPic(im, 1902)[&#39;pic_str&#39;]                                           if __name__ == &#39;__main__&#39;:    chaojiying = Chaojiying_Client(&#39;carmack&#39;, &#39;Vff635241&#39;, &#39;96001&#39;)        im = open(&#39;CaptchaImg.png&#39;, &#39;rb&#39;).read()                                                        print(chaojiying.PostPic(im, 1902))                                                </code></pre><h3 id="滑动图片验证码"><a href="#滑动图片验证码" class="headerlink" title="滑动图片验证码"></a>滑动图片验证码</h3><p>step1. 模拟点击验证按钮</p><p>step2. 识别滑动缺⼝位置<br>遍历没有缺⼝和有缺⼝的两张图⽚，找出相同位置像素差距超过指定值的像素点，即缺⼝位置<br>（⽬前极验已经改进了算法）</p><p>step3. 模拟拖动滑块</p><pre><code class="python">import timefrom io import BytesIOfrom PIL import Imagefrom selenium import webdriverfrom selenium.webdriver import ActionChainsfrom selenium.webdriver.common.by import Byfrom selenium.webdriver.support.ui import WebDriverWaitfrom selenium.webdriver.support import expected_conditions as ECEMAIL = &#39;1963298993@qq.com&#39;PASSWORD = &#39;yicijiuhao0&#39;BORDER = 6INIT_LEFT = 60class CrackBilibili():    def __init__(self):        self.url = &#39;https://passport.bilibili.com/login&#39;        self.browser = webdriver.Chrome()        self.wait = WebDriverWait(self.browser, 10)        self.email = EMAIL        self.password = PASSWORD    def __del__(self):        self.browser.close()    def get_geetest_button(self):        &quot;&quot;&quot;        获取初始验证按钮        :return:        &quot;&quot;&quot;        button = self.wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, &#39;.gt_slider_knob.gt_show&#39;)))        return button    def get_position(self):        &quot;&quot;&quot;        获取验证码位置        :return: 验证码位置元组        &quot;&quot;&quot;        img = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, &#39;.gt_cut_fullbg.gt_show&#39;)))        time.sleep(2)        location = img.location        size = img.size        top, bottom, left, right = location[&#39;y&#39;], location[&#39;y&#39;] + size[&#39;height&#39;], location[&#39;x&#39;], location[&#39;x&#39;] + size[            &#39;width&#39;]        return (top, bottom, left, right)    def get_screenshot(self):        &quot;&quot;&quot;        获取网页截图        :return: 截图对象        &quot;&quot;&quot;        screenshot = self.browser.get_screenshot_as_png()        screenshot = Image.open(BytesIO(screenshot))        return screenshot    def get_slider(self):        &quot;&quot;&quot;        获取滑块        :return: 滑块对象        &quot;&quot;&quot;        slider = self.wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, &#39;.gt_slider_knob.gt_show&#39;)))        return slider    def get_geetest_image(self, name=&#39;captcha.png&#39;):        &quot;&quot;&quot;        获取验证码图片        :return: 图片对象        &quot;&quot;&quot;        top, bottom, left, right = self.get_position()        print(&#39;验证码位置&#39;, top, bottom, left, right)        screenshot = self.get_screenshot()        captcha = screenshot.crop((left, top, right, bottom))        captcha.save(name)        return captcha    def open(self):        &quot;&quot;&quot;        打开网页输入用户名密码        :return: None        &quot;&quot;&quot;        self.browser.get(self.url)        email = self.wait.until(EC.presence_of_element_located((By.ID, &#39;login-username&#39;)))        password = self.wait.until(EC.presence_of_element_located((By.ID, &#39;login-passwd&#39;)))        email.clear()        password.clear()        email.send_keys(self.email)        password.send_keys(self.password)    def get_gap(self, image1, image2):        &quot;&quot;&quot;        获取缺口偏移量        :param image1: 不带缺口图片        :param image2: 带缺口图片        :return:        &quot;&quot;&quot;        left = 60        print(&#39;******大小*****&#39;)        print(image1.size)        for i in range(left, image1.size[0]):            for j in range(image1.size[1]):                if not self.is_pixel_equal(image1, image2, i, j):                    left = i                    return left        return left    def is_pixel_equal(self, image1, image2, x, y):        &quot;&quot;&quot;        判断两个像素是否相同        :param image1: 图片1        :param image2: 图片2        :param x: 位置x        :param y: 位置y        :return: 像素是否相同        &quot;&quot;&quot;        # 取两个图片的像素点        pixel1 = image1.load()[x, y]        pixel2 = image2.load()[x, y]        threshold = 60        if abs(pixel1[0] - pixel2[0]) &lt; threshold and abs(pixel1[1] - pixel2[1]) &lt; threshold and abs(                pixel1[2] - pixel2[2]) &lt; threshold:            return True        else:            return False    def get_track(self, distance):        &quot;&quot;&quot;        根据偏移量获取移动轨迹        :param distance: 偏移量        :return: 移动轨迹        &quot;&quot;&quot;        # 移动轨迹        track = []        # 当前位移        current = 0        # 减速阈值        mid = distance * 3 / 5        # 计算间隔        t = 0.5        # 初速度        v = 0        while current &lt; distance:            if current &lt; mid:                # 加速度为正2                a = 2            else:                # 加速度为负3                a = -3            # 初速度v0            v0 = v            # 当前速度v = v0 + at            v = v0 + a * t            # 移动距离x = v0t + 1/2 * a * t^2            move = v0 * t + 1 / 2 * a * t * t            # 当前位移            current += move            # 加入轨迹            track.append(round(move))        return track    def move_to_gap(self, slider, track):        &quot;&quot;&quot;        拖动滑块到缺口处        :param slider: 滑块        :param track: 轨迹        :return:        &quot;&quot;&quot;        ActionChains(self.browser).click_and_hold(slider).perform()        for x in track:            ActionChains(self.browser).move_by_offset(xoffset=x, yoffset=0).perform()        time.sleep(0.5)        ActionChains(self.browser).release().perform()    def login(self):        &quot;&quot;&quot;        登录        :return: None        &quot;&quot;&quot;        submit = self.wait.until(EC.element_to_be_clickable((By.CLASS_NAME, &#39;login-btn&#39;)))        submit.click()        time.sleep(10)        print(&#39;登录成功&#39;)    def crack(self):        # 输入用户名密码        self.open()        # 点击验证按钮        button = self.get_geetest_button()        print(button)        time.sleep(2)        ActionChains(self.browser).move_to_element(button).perform()        time.sleep(2)        # # 获取验证码图片(没有缺口的图)        image1 = self.get_geetest_image(&#39;captcha1.png&#39;)        # 点按呼出缺口        slider = self.get_slider()        slider.click()        time.sleep(2)        # 获取带缺口的验证码图片        image2 = self.get_geetest_image(&#39;captcha2.png&#39;)        # 获取缺口位置        gap = self.get_gap(image1, image2)        print(&#39;缺口位置&#39;, gap)        # 减去缺口位移        gap -= BORDER        # 获取移动轨迹        track = self.get_track(gap)        print(&#39;滑动轨迹&#39;, track)        # 拖动滑块        self.move_to_gap(slider, track)        # 验证结点里面是否包含此文字        success = self.wait.until(            EC.text_to_be_present_in_element((By.CLASS_NAME, &#39;gt_info_type&#39;), &#39;验证通过&#39;))        print(success)        time.sleep(5)        # 失败后重试        if not success:            self.crack()        # else:        #     self.login()if __name__ == &#39;__main__&#39;:    crack = CrackBilibili()    crack.crack()</code></pre>]]></content>
      
      
      <categories>
          
          <category> spider </category>
          
      </categories>
      
      
        <tags>
            
            <tag> code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>selenium</title>
      <link href="/2018/05/22/spider/selenium/"/>
      <url>/2018/05/22/spider/selenium/</url>
      
        <content type="html"><![CDATA[<pre><code class="python">from selenium import webdriverfrom selenium.common.exceptions import TimeoutExceptionfrom selenium.webdriver.common.by import Byfrom selenium.webdriver.support.ui import WebDriverWaitfrom selenium.webdriver.support import expected_conditions as ECfrom selenium.webdriver import ActionChainsdef f1(browser):    # 访问页面    browser.get(&#39;https://www.mkv99.com/vod-detail-id-9462.html&#39;)    # # 获取渲染后的页面内容    # print(browser.page_source)    # # 获取当前网址    # print(browser.current_url)    # # 获取浏览器cookie    # print(browser.get_cookies())    # # 根据id获取单个节点    input1 = browser.find_element_by_id(&#39;1thUrlid第01集&#39;)    print(input1)    # # # 获取节点属性    # print(input1.get_attribute(&#39;href&#39;))    # # 用css选择器获取单个节点    # input_list = browser.find_elements_by_css_selector(&#39;.dwon2&#39;)    # for item in input_list:    #     print(item.get_attribute(&#39;href&#39;))    # print(input2.get_attribute(&#39;href&#39;))    # # # 获取节点的坐标    print(input1.location)    # # # 获取节点的宽高    print(input1.size)    # # 用xpath方法获取单个节点    # input3 = browser.find_element_by_xpath(&#39;//*[@class=&quot;dwon2&quot;]&#39;)    # print(input3.get_attribute(&#39;id&#39;))    # # 根据name获取单个节点    # input4 = browser.find_element_by_name(&#39;CopyAddr1&#39;)    # print(input4.tag_name)    # # 根据链接文字获取单个节点    # input5 = browser.find_element_by_link_text(&#39;今日更新&#39;)    # input6 = browser.find_element_by_partial_link_text(&#39;教程&#39;)    # # 获取节点文本值    # print(input5.text)    # print(input6.text)def f2(browser):    browser.get(&#39;http://www.runoob.com/try/try.php?filename=jqueryui-api-droppable&#39;)    # 切换爬虫到指定iframe（里面是嵌套的一个新网页）    browser.switch_to.frame(&#39;iframeResult&#39;)        source = browser.find_element_by_css_selector(&#39;#draggable&#39;)    target = browser.find_element_by_css_selector(&#39;#droppable&#39;)    # 动作链    actions = ActionChains(browser)    # 将选定的源移动到目标的位置    actions.drag_and_drop(source, target)    actions.perform()def main():    # 使用chrome浏览器    browser = webdriver.Chrome()    # 使用Firefox浏览器    # browser = webdriver.Firefox()    # 使用Edge浏览器    # browser = webdriver.Edge()    # 使用Phantom浏览器    # PhatomJS无头浏览器    # browser = webdriver.PhatomJS()    # 使用Safari浏览器    # browser = webdriver.Safari()    try:        f1(browser)    finally:        # 关闭浏览器        browser.close()if __name__ == &#39;__main__&#39;:    main()</code></pre>]]></content>
      
      
      <categories>
          
          <category> spider </category>
          
      </categories>
      
      
        <tags>
            
            <tag> selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>youyaoqi</title>
      <link href="/2018/05/21/spider/u17/"/>
      <url>/2018/05/21/spider/u17/</url>
      
        <content type="html"><![CDATA[<h3 id="创建一个有个youyaoqi项目"><a href="#创建一个有个youyaoqi项目" class="headerlink" title="创建一个有个youyaoqi项目"></a>创建一个有个youyaoqi项目</h3><ul><li>项目自带文件<ul><li>scrapy.cfg</li><li>youyaoqi<ul><li><strong> init</strong>.py</li><li>items.py</li><li>middlewares.py</li><li>pipelines.py</li><li>settings.py</li><li>spiders<ul><li><code>__ init __.py</code></li><li>cartoon.py</li></ul></li></ul></li></ul></li></ul><p><strong>items</strong></p><pre><code class="python"># -*- coding: utf-8 -*-# Define here the models for your scraped items## See documentation in:# https://doc.scrapy.org/en/latest/topics/items.htmlimport scrapyclass YouyaoqiItem(scrapy.Item):    # define the fields for your item here like:    comic_id = scrapy.Field()    name = scrapy.Field()    cover = scrapy.Field()    update_type = scrapy.Field()    line1 = scrapy.Field()    line2 = scrapy.Field()class U17DetailItem(scrapy.Item):    name = scrapy.Field()    # u_id = scrapy.Field()</code></pre><p><strong>pipelines.py</strong></p><pre><code class="python"># -*- coding: utf-8 -*-# Define your item pipelines here## Don&#39;t forget to add your pipeline to the ITEM_PIPELINES setting# See: https://doc.scrapy.org/en/latest/topics/item-pipeline.htmlimport pymysqlfrom scrapy import Requestfrom scrapy.exceptions import DropItemfrom scrapy.pipelines.images import ImagesPipelineclass ImagePipeline(ImagesPipeline):    def file_path(self, request, response=None, info=None):        url = request.url        file_name = url.split(&#39;/&#39;)[-1]        return file_name    def item_completed(self, results, item, info):        image_paths = [x[&#39;path&#39;] for ok, x in results if ok]        if not image_paths:            raise DropItem(&#39;Image Downloaded Failed&#39;)        return item    def get_media_requests(self, item, info):        yield Request(item[&#39;cover&#39;])class YouyaoqiMysqlPipeline(object):    def __init__(self, host, port, database, username, password):        self.host = host        self.port = port        self.database = database        self.username = username        self.password = password    @classmethod    def from_crawler(cls, crawler):        return cls(            host=crawler.settings.get(&#39;MYSQL_HOST&#39;),            port=crawler.settings.get(&#39;MYSQL_PORT&#39;),            database=crawler.settings.get(&#39;MYSQL_DATABASE&#39;),            username=crawler.settings.get(&#39;MYSQL_USERNAME&#39;),            password=crawler.settings.get(&#39;MYSQL_PASSWORD&#39;),        )    def open_spider(self, spider):        # 获取数据库连接        self.db = pymysql.connect(self.host, self.username, self.password, self.database, charset=&#39;utf8&#39;,                                  port=self.port)        self.cursor = self.db.cursor()    def close_spider(self, spider):        # 释放数据库连接        self.db.close()    def process_item(self, item, spider):        # 插入item数据        sql = &#39;insert into company (comic_id, name, cover, update_type, line1, line2) values (%s, %s, %s, %s, %s, %s)&#39;        self.cursor.execute(sql, (item[&#39;comic_id&#39;], item[&#39;name&#39;], item[&#39;cover&#39;], item[&#39;update_type&#39;], item[&#39;line1&#39;], item[&#39;line2&#39;]))        self.db.commit()        return item</code></pre><p><strong>settings.py</strong></p><pre><code class="python"># -*- coding: utf-8 -*-# Scrapy settings for youyaoqi project## For simplicity, this file contains only settings considered important or# commonly used. You can find more settings consulting the documentation:##     https://doc.scrapy.org/en/latest/topics/settings.html#     https://doc.scrapy.org/en/latest/topics/downloader-middleware.html#     https://doc.scrapy.org/en/latest/topics/spider-middleware.htmlBOT_NAME = &#39;youyaoqi&#39;SPIDER_MODULES = [&#39;youyaoqi.spiders&#39;]NEWSPIDER_MODULE = &#39;youyaoqi.spiders&#39;# Crawl responsibly by identifying yourself (and your website) on the user-agent#USER_AGENT = &#39;youyaoqi (+http://www.yourdomain.com)&#39;# Obey robots.txt rulesROBOTSTXT_OBEY = False# Configure maximum concurrent requests performed by Scrapy (default: 16)#CONCURRENT_REQUESTS = 32# Configure a delay for requests for the same website (default: 0)# See https://doc.scrapy.org/en/latest/topics/settings.html#download-delay# See also autothrottle settings and docs#DOWNLOAD_DELAY = 3# The download delay setting will honor only one of:#CONCURRENT_REQUESTS_PER_DOMAIN = 16#CONCURRENT_REQUESTS_PER_IP = 16# Disable cookies (enabled by default)#COOKIES_ENABLED = False# Disable Telnet Console (enabled by default)#TELNETCONSOLE_ENABLED = False# Override the default request headers:#DEFAULT_REQUEST_HEADERS = {#   &#39;Accept&#39;: &#39;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&#39;,#   &#39;Accept-Language&#39;: &#39;en&#39;,#}# Enable or disable spider middlewares# See https://doc.scrapy.org/en/latest/topics/spider-middleware.html#SPIDER_MIDDLEWARES = {#    &#39;youyaoqi.middlewares.YouyaoqiSpiderMiddleware&#39;: 543,#}# Enable or disable downloader middlewares# See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html#DOWNLOADER_MIDDLEWARES = {#    &#39;youyaoqi.middlewares.YouyaoqiDownloaderMiddleware&#39;: 543,#}# Enable or disable extensions# See https://doc.scrapy.org/en/latest/topics/extensions.html#EXTENSIONS = {#    &#39;scrapy.extensions.telnet.TelnetConsole&#39;: None,#}# Configure item pipelines# See https://doc.scrapy.org/en/latest/topics/item-pipeline.htmlITEM_PIPELINES = {   # &#39;youyaoqi.pipelines.YouyaoqiMysqlPipeline&#39;: 300,   # &#39;youyaoqi.pipelines.ImagePipeline&#39;: 300,}# Enable and configure the AutoThrottle extension (disabled by default)# See https://doc.scrapy.org/en/latest/topics/autothrottle.html#AUTOTHROTTLE_ENABLED = True# The initial download delay#AUTOTHROTTLE_START_DELAY = 5# The maximum download delay to be set in case of high latencies#AUTOTHROTTLE_MAX_DELAY = 60# The average number of requests Scrapy should be sending in parallel to# each remote server#AUTOTHROTTLE_TARGET_CONCURRENCY = 1.0# Enable showing throttling stats for every response received:#AUTOTHROTTLE_DEBUG = False# Enable and configure HTTP caching (disabled by default)# See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html#httpcache-middleware-settings#HTTPCACHE_ENABLED = True#HTTPCACHE_EXPIRATION_SECS = 0#HTTPCACHE_DIR = &#39;httpcache&#39;#HTTPCACHE_IGNORE_HTTP_CODES = []#HTTPCACHE_STORAGE = &#39;scrapy.extensions.httpcache.FilesystemCacheStorage&#39;FEED_EXPORT_ENCODING = &#39;utf-8&#39;MAX_PAGE = 500# IMAGES_STORE = &#39;./images&#39;# mysql settingsMYSQL_HOST = &#39;127.0.0.1&#39;MYSQL_PORT = 3306MYSQL_USERNAME = &#39;root&#39;MYSQL_PASSWORD = &#39;123456&#39;MYSQL_DATABASE = &#39;u17&#39;</code></pre><p><strong>cartoon.py</strong></p><pre><code class="python"># -*- coding: utf-8 -*-import jsonimport scrapyfrom youyaoqi.items import YouyaoqiItem, U17DetailItemclass CartoonSpider(scrapy.Spider):    name = &#39;cartoon&#39;    allowed_domains = [&#39;www.u17.com&#39;]    start_urls = [&#39;http://www.u17.com/&#39;]    def start_requests(self):        data = {&#39;data[group_id]&#39;: &#39;no&#39;, &#39;data[theme_id]&#39;: &#39;no&#39;, &#39;data[is_vip]&#39;: &#39;no&#39;, &#39;data[accredit]&#39;: &#39;no&#39;, &#39;data[color]&#39;: &#39;no&#39;, &#39;data[comic_type]&#39;: &#39;no&#39;, &#39;data[series_status]&#39;: &#39;no&#39;, &#39;data[order]&#39;: &#39;2&#39;, &#39;data[page_num]&#39;: &#39;1&#39;, &#39;data[read_mode]&#39;: &#39;no&#39; }        headers = {            &#39;Referer&#39;: &#39;http://www.u17.com/comic_list/th99_gr99_ca99_ss99_ob0_ac0_as0_wm0_co99_ct99_p1.html?order=2&#39;,            &#39;User-Agent&#39;: &#39;Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko&#39;,            &#39;Host&#39;: &#39;www.u17.com&#39;,            &#39;Accept&#39;: &#39;application/json, text/plain, */*&#39;,            &#39;Accept-Encoding&#39;: &#39;gzip, deflate, sdch&#39;,            &#39;Accept-Language&#39;: &#39;zh-CN,zh;q=0.8,en;q=0.6,ja;q=0.4,zh-TW;q=0.2,mt;q=0.2&#39;,            &#39;Connection&#39;: &#39;keep-alive&#39;,            &#39;X-Requested-With&#39;: &#39;XMLHttpRequest&#39;,        }        max_page = self.settings.get(&#39;MAX_PAGE&#39;)        base_url = &#39;http://www.u17.com/comic/ajax.php?mod=comic_list&amp;act=comic_list_new_fun&amp;a=get_comic_list&#39;        for page in range(2, max_page):            data[&#39;data[page_num]&#39;] = str(page)            yield scrapy.FormRequest(url=base_url, headers=headers, method=&#39;POST&#39;, formdata=data, callback=self.parse)    def get_headers(self):        headers = {            &#39;User-Agent&#39;: &#39;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; 360SE)&#39;,            &#39;Host&#39;: &#39;www.u17.com&#39;,            &#39;Accept&#39;: &#39;application/json, text/plain, */*&#39;,            &#39;Accept-Encoding&#39;: &#39;gzip, deflate, sdch&#39;,            &#39;Accept-Language&#39;: &#39;zh-CN,zh;q=0.8,en;q=0.6,ja;q=0.4,zh-TW;q=0.2,mt;q=0.2&#39;,            &#39;Connection&#39;: &#39;keep-alive&#39;,            &#39;X-Requested-With&#39;: &#39;XMLHttpRequest&#39;,            &#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded; charset=UTF-8&#39;,        }        return headers    def parse(self, response):        result_json = json.loads(response.text)        data_list = result_json[&#39;comic_list&#39;]        for data in data_list:            item = YouyaoqiItem()            item[&#39;comic_id&#39;] = data[&#39;comic_id&#39;]            item[&#39;name&#39;] = data[&#39;name&#39;]            item[&#39;cover&#39;] = data[&#39;cover&#39;]            item[&#39;update_type&#39;] = data[&#39;update_type&#39;]            item[&#39;line1&#39;] = data[&#39;line1&#39;]            item[&#39;line2&#39;] = data[&#39;line2&#39;]            yield item            detail_url = &#39;http://www.u17.com/comic/%s.html&#39; % item[&#39;comic_id&#39;]            yield scrapy.Request(url=detail_url, headers=self.get_headers(), callback=self.parse_detail)    def parse_detail(self, response):        results = response.css(&#39;#chapter li&#39;)        for item in results:            detail_item = U17DetailItem()            name_list = item.xpath(&#39;./a/text()&#39;).extract()            for name in name_list:                detail_item[&#39;name&#39;] = name.replace(&#39;&quot;&#39;, &#39;&#39;).strip()            # detail_item[&#39;u_id&#39;] = title.replace            # detail_item[&#39;name&#39;] = item.replace(&#39;&quot;&#39;, &#39;&#39;).strip()                yield detail_item            # a_url_list = item.css(&#39;./a::attr(href)&#39;).extract()            # for a_url in a_url_list:            #     detail_item[&#39;url&#39;] = a_url            #     yield detail_item</code></pre>]]></content>
      
      
      <categories>
          
          <category> spider </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cartoon </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>summary</title>
      <link href="/2018/05/19/spider/%E7%B1%BB%E9%80%89%E6%8B%A9%E5%99%A8/"/>
      <url>/2018/05/19/spider/%E7%B1%BB%E9%80%89%E6%8B%A9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><ul><li>一个标签有多个类属性时，取到这个标签的时候，多个类属性之间用不用空格隔开，正常表示<pre><code class="python">result = soup.select(&#39;.-live-layout-row.layout_sports_350_650&#39;)</code></pre></li></ul><h3 id="清除数据库"><a href="#清除数据库" class="headerlink" title="清除数据库"></a>清除数据库</h3><pre><code class="python">清除自增字段，下次创建的时候，id为1truncate table 名</code></pre>]]></content>
      
      
      <categories>
          
          <category> spider </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随机总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kaisha密码</title>
      <link href="/2018/05/15/spider/kaisha%E8%A7%A3%E7%A0%81%E7%A8%8B%E5%BA%8F/"/>
      <url>/2018/05/15/spider/kaisha%E8%A7%A3%E7%A0%81%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>用来破解一些加密文件</p><pre><code class="python">import urllibfrom urllib import parsedef str2url(s):    #s = &#39;9hFaF2FF%_Et%m4F4%538t2i%795E%3pF.265E85.%fnF9742Em33e162_36pA.t6661983%x%6%%74%2i2%22735&#39;    num_loc = s.find(&#39;h&#39;)    rows = int(s[0:num_loc])    strlen = len(s) - num_loc    cols = int(strlen/rows)    right_rows = strlen % rows    new_s = list(s[num_loc:])    output = &#39;&#39;    for i in range(len(new_s)):        x = i % rows        y = i / rows        p = 0        if x &lt;= right_rows:            p = x * (cols + 1) + y        else:            p = right_rows * (cols + 1) + (x - right_rows) * cols + y        output += new_s[int(p)]    return parse.unquote(output).replace(&#39;^&#39;, &#39;0&#39;)def main():    s = &quot;6hAFxn752E5F215234uy495-3741E8t%mie15F2E185E%6at%72E%7ba%13t21at27261734458%h3%%-5a885d5pF2m%%11799662E13_D55%E992E48%%8i222%4%59358.Fk1EE5-8bc%7632..FF%5%24_%9_mae58%E513e51&quot;    result_str = str2url(s)    print(result_str)main()</code></pre>]]></content>
      
      
      <categories>
          
          <category> spider </category>
          
      </categories>
      
      
        <tags>
            
            <tag> urllib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-vim-practice</title>
      <link href="/2018/05/14/Linux/vim_practice/"/>
      <url>/2018/05/14/Linux/vim_practice/</url>
      
        <content type="html"><![CDATA[<h4 id="practice1-fish"><a href="#practice1-fish" class="headerlink" title="practice1_fish"></a>practice1_fish</h4><pre><code class="python">#!/usr/bin/python3&quot;&quot;&quot;穷举法:穷尽所有可能直到找到正确答案&quot;&quot;&quot;def main():   &quot;&quot;&quot;分鱼&quot;&quot;&quot;   fish = 1   while True:         enough = True         total = fish         for _ in range(5):             if (total - 1) % 5 == 0:                 total = (total - 1) // 5 *4             else:                 enough = False                 break         if enough:             print(fish)             break         fish += 1 if __name__ == &quot;__main__&quot;:     main()</code></pre><h4 id="practice2-joseph"><a href="#practice2-joseph" class="headerlink" title="practice2_joseph"></a>practice2_joseph</h4><pre><code class="python">#!/usr/bin/python3&quot;&quot;&quot;约瑟夫环&quot;&quot;&quot;def main():   &quot;&quot;&quot;主函数&quot;&quot;&quot;   persons = [True] * 30   # 设置变量，计数，下标，报数   counter, index, number = 0, 0, 0   #  循环选出15个人     while counter &lt; 15:         if persons[index]:             # 每次数数加一             number += 1             # 数到9的人，弄死             if number == 9:                 # 把它的值变为False                 persons[index] = False                 # 每选出一个人，counter数量加一                 counter += 1                 # 弄死的人，后面人又从0开始数数                 number = 0         # 移动下标         index += 1         # 保证有效的下标         index %= len(persons)     for person in persons:         print(&quot;基&quot; if person else &quot;非&quot;, end = &quot;&quot;)     print() if __name__ == &quot;__main__&quot;:     main()</code></pre><p>####practice3_salary</p><pre><code class="python">#!/usr/bin/python3from abc import ABCMeta, abstractmethod&quot;&quot;&quot;面向对象的程序设计基本步骤：1. 定义类   - 数据抽象: 找到对象的静态特征-属性(名词)   - 行为抽象: 找到对象的动态特征-方法(动词)2. 创建对象(隐藏实现细节，暴露简单的调用接口)3. 给对象发消息 面向对象的四大支柱：抽象、封装、继承、多态 抽象：定义类的过程就是提取共性的抽象过程 封装：将数据和操作数据方法从逻辑上组成一个整体-对象 继承：从已有的类创建新类的过程     - 提供继承信息的称为父类     - 得到继承信息的称为子类 多态：调用相同的方法做了不同的事情     - 同样的方法在运行时表现出不同行为     - 子类重写父类的方法，不同的子类给出不同的实现版本 &quot;&quot;&quot; class Employee(metaclass=ABCMeta):     # metaclass=ABCMeta 原类，让子类不能再创建这个抽象对象，给别人继承     def __init__(self, name):         self.name = name     # 装饰器     @abstractmethod     def salary(self):         pass class Manager(Employee):     &quot;&quot;&quot;经理&quot;&quot;&quot;     @property     def salary(self):         return 15000 class Programmer(Employee):     &quot;&quot;&quot;程序员&quot;&quot;&quot;     def __init__(self, name):         super().__init__(name)         # self.name = name         self.working_hour = 0     @property     def salary(self):         return 200 * self.working_hour class Salesman(Employee):     &quot;&quot;&quot;销售员&quot;&quot;&quot;     def __init__(self, name):         self.name = name         self.sales = 0     @property     def salary(self):         return 1800 + self.sales * 0.05 &quot;&quot;&quot;工资结算&quot;&quot;&quot; def main():     &quot;&quot;&quot;主函数&quot;&quot;&quot;     emps = [         Manager(&quot;刘备&quot;), Manager(&quot;曹操&quot;),         Programmer(&quot;诸葛亮&quot;), Programmer(&quot;荀彧&quot;),         Salesman(&quot;貂蝉&quot;)     ]     for emp in emps:         # isinstance函数可以进行运行时类型识别，判断函数类型         if isinstance(emp, Programmer):             emp.working_hour = int(input(f&#39;请输入{emp.name}本月工作时间: &#39;))         elif isinstance(emp, Salesman):             emp.sales = float(input(f&#39;请输入{emp.name}本月销售额: &#39;))        #print(&#39;%s: %.2f元&#39; % (emp.name, emp.salary))         print(f&quot;{emp.name}本月的工资为: {emp.salary}元&quot;) if __name__ == &quot;__main__&quot;:     main()</code></pre><h4 id="practice-poker"><a href="#practice-poker" class="headerlink" title="practice_poker"></a>practice_poker</h4><pre><code class="python">#!/usr/bin/python3from enum import Enum, uniqueimport random# 定义花色的常量(尽量用符号常量代替字面常量)# 枚举类型是定义符号常量的最佳选择# @unique 类的装饰器，类里面的变量不能重复，独一无二的 &quot;&quot;&quot;花色枚举类，用来定义黑桃、红心、梅花、方块常量&quot;&quot;&quot; @unique class Suite(Enum):     SPADE = 0     HEART = 1     CLUB = 2     DIAMOND = 3 &quot;&quot;&quot;定义扑克类&quot;&quot;&quot; class Card(object):     def __init__(self, suite, face):         self.suite = suite         self.face = face     def show(self):         suites = [&quot;黑&quot;, &quot;红&quot;, &quot;梅&quot;, &quot;方&quot;]         faces = [             &quot;&quot;, &quot;A&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;,             &quot;7&quot;, &quot;8&quot;, &quot;9&quot;, &quot;10&quot;, &quot;J&quot;, &quot;Q&quot;, &quot;K&quot;         ]         return f&quot;{suites[self.suite.value]}{faces[self.face]}&quot;     &quot;&quot;&quot;     # 比较大小     def __lt__(self, other):         if self.suite == other.suite:             return self.face &lt; other.face         return self.suite.value &lt; other.suite.value     &quot;&quot;&quot;     # 把对象变成字符串（魔术方法）     def __str__(self):         return self.show()     # 把对象变成字符串（魔术方法）     def __repr__(self):         return self.show() &quot;&quot;&quot;牌类&quot;&quot;&quot; class Poker(object):     def __init__(self):         self.index = 0         # 生成一副牌，生成式         self.cards = [Card(suite, face)                       for suite in Suite                       for face in range(1, 14)         ]     def shuffle(self):         &quot;&quot;&quot;洗牌，调用随机乱序的函数&quot;&quot;&quot;         random.shuffle(self.cards)     def deal(self):         &quot;&quot;&quot;发牌&quot;&quot;&quot;         card = self.cards[self.index]         self.index += 1         return card     @property     def has_more(self):         &quot;&quot;&quot;判断是否有牌发&quot;&quot;&quot;         return self.index &lt; len(self.cards) class Player(object):     &quot;&quot;&quot;玩家&quot;&quot;&quot;     def __init__(self, name):         self.name = name         self.cards = []     def get_one(self, card):         &quot;&quot;&quot;摸一张牌&quot;&quot;&quot;         self.cards.append(card)     # *后面的是命名关键字参数，必须写参数名key     def sort_cards(self, *, key=lambda card:                       (card.suite.value, card.face)):         &quot;&quot;&quot; 整理手上的牌&quot;&quot;&quot;         self.cards.sort(key=key) def main():     poker = Poker()     poker.shuffle()     players = [                Player(&quot;东邪&quot;), Player(&quot;西毒&quot;), Player(&quot;南帝&quot;),                Player(&quot;北丐&quot;)     ]     for _ in range(13):         for player in players:             player.get_one(poker.deal())     for player in players:         player.sort_cards(key=lambda card: card.face)         print(player.name, end=&quot;: &quot;)         print(player.cards) if __name__ == &quot;__main__&quot;:     main()</code></pre><h4 id="practice-mycal"><a href="#practice-mycal" class="headerlink" title="practice_mycal"></a>practice_mycal</h4><pre><code class="python">#!/usr/bin/python3&quot;&quot;&quot;万年历&quot;&quot;&quot;from datetime import datetimeimport sysdef is_leap(year):     &quot;&quot;&quot;判断指定年份是否是闰年&quot;&quot;&quot;     return year % 4 == 0 and year % 100 != 0 or year % 400 == 0def get_month_days(year, month):     &quot;&quot;&quot;获得指定的月份的天数&quot;&quot;&quot;     days = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]     # 修改2月份的天数     if month == 2 and is_leap(year):         days[2] = 29     return days[month]def main():     # 通过sys模块的argv可以获取命令行参数     if len(sys.argv) == 3:         year = int(sys.argv[2])         month = int(sys.argv[1])     else:         # 拿到现在系统的时间和日期         now = datetime.now()         year = now.year         month = now.month     # 拿到年，月小于2，算到上一年     y = year if month &gt; 2 else year - 1     # 拿到月，月小于2，算到13月或者14月     m = month if month &gt; 2 else month + 12     # 取到世纪，年份的前两位数     c = y // 100     # 取到年的后两位     y = y % 100     # 计算每个月1号是星期几     w = y + y // 4 + c // 4 - 2 * c + 26 * (m + 1) // 10     # 对7求余数，0对应星期日     w %= 7     months = [         &quot;&quot;, &quot;January&quot;, &quot; February&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;, &quot; June&quot;,         &quot; July&quot;, &quot; August&quot;, &quot;September&quot;, &quot;October&quot;, &quot; November&quot;, &quot; December&quot;     ]     print(f&quot;{months[month]} {year}&quot;.center(20))     print(&quot;Su Mo Tu We Th Fr Sa&quot;)     print (&quot; &quot; * 3 * w,end=&quot;&quot;)     days = get_month_days(year, month)  # 遍历月份的天数，进行排版     for day in range(1, days + 1):         print(f&quot;{day}&quot;.rjust(2), end=&quot; &quot;)         w += 1         if w % 7 == 0:             print()     print() if __name__ == &quot;__main__&quot;:     main()</code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux-practice </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>movie</title>
      <link href="/2018/05/12/spider/%E7%88%AC%E7%94%B5%E5%BD%B1/"/>
      <url>/2018/05/12/spider/%E7%88%AC%E7%94%B5%E5%BD%B1/</url>
      
        <content type="html"><![CDATA[<h3 id="爬电影"><a href="#爬电影" class="headerlink" title="爬电影"></a>爬电影</h3><p>获取的是电影的种子，将这个链接发给迅雷，可以直接下载</p><pre><code class="python">import jsonimport reimport requestsdef parse_page(html):    patters = re.compile(&#39;var downurls=&quot;福.*?mp4$(.*?)/#&quot;&#39;, re.S)    patter = re.findall(patters, html)    print(patter)# 取页面HTMLdef get_one_page(url):    headers =  {        &quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:2.0b13pre) Gecko/20110307 Firefox/4.0b13pre&quot;    }    response = requests.get(url, headers=headers)    if response.status_code == 200:        text = response.content.decode(&#39;utf-8&#39;)        return text    return Nonedef main():    url = &quot;https://www.mkv99.com/vod-detail-id-12479.html&quot;    html = get_one_page(url)    movie = parse_page(html)if __name__ == &#39;__main__&#39;:    main()</code></pre>]]></content>
      
      
      <categories>
          
          <category> spider </category>
          
      </categories>
      
      
        <tags>
            
            <tag> movie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>practice——jd</title>
      <link href="/2018/05/11/spider/jd/"/>
      <url>/2018/05/11/spider/jd/</url>
      
        <content type="html"><![CDATA[<p>数据库字段创建</p><pre><code class="python">create database jddb default character set=utf8;use jddb;create table jd (    id integer auto_increment primary key,    title varchar(128),    img_src varchar(1024),    price varchar(128),    shop varchar(128),    commit_num varchar(100));</code></pre><p>模型设置</p><pre><code class="python">from sqlalchemy.ext.declarative import declarative_basefrom sqlalchemy import Column, Integer, Stringfrom sqlalchemy import create_engineengine = create_engine(&quot;mysql+pymysql://root:123456@127.0.0.1:3306/jd_db?charset=utf8&quot;, max_overflow=5,encoding=&#39;utf-8&#39;)Base = declarative_base()class JdProduct(Base):    __tablename__ = &#39;jd&#39;    id = Column(Integer, primary_key=True, autoincrement=True)    #主键，自增    title = Column(String(128))    img_src = Column(String(1024))    price = Column(String(128))    shop = Column(String(128))    commit_num = Column(String(100))</code></pre><p>运行程序</p><pre><code class="python">import timefrom lxml import etreefrom selenium import webdriverfrom selenium.webdriver.common.by import Byfrom selenium.webdriver.support.ui import WebDriverWaitfrom selenium.webdriver.support import expected_conditions as ECfrom sqlalchemy import create_enginefrom sqlalchemy.orm import sessionmakerfrom jd_model import JdProductengine = create_engine(&quot;mysql+pymysql://root:123456@127.0.0.1/jddb?charset=utf8&quot;, max_overflow=5)session_maker = sessionmaker(bind=engine)session = session_maker()# 打开一个浏览器browser = webdriver.Chrome()wait = WebDriverWait(browser, 5)def get_page(page):    if page == 1:        url = &quot;http://www.jd.com&quot;        # 访问网址        browser.get(url)        # 注意下面的presence_of_element_located，容易出错        input = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, &#39;#key&#39;)))        input.clear()        input.send_keys(&#39;围巾女&#39;)        button = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, &#39;#search button.button&#39;)))        button.click()        time.sleep(3)    # 滑动到页面底部,滑动指定次数    # for i in range(16):    #     i = i + 1    #     str_js = &#39;var scrollHeight = document.body.scrollHeight / 16;window.scrollTo(0, scrollHeight * (%d));&#39; % i    #     browser.execute_script(str_js)    #     time.sleep(1)    str_js = &#39;var scrollHeight = document.body.scrollHeight;window.scrollTo(0, scrollHeight);&#39;    browser.execute_script(str_js)    # 反向滑动    for i in range(16, 0, -1):        str_js = &#39;var scrollHeight = document.body.scrollHeight / 16;window.scrollTo(0, scrollHeight * (%d));&#39; % i        browser.execute_script(str_js)        time.sleep(5)    # 保存当前页面的内容    page_source = browser.page_source    # 下一页    # 滚动到页码部分    input = browser.find_element_by_css_selector(&#39;#J_bottomPage input.input-txt&#39;)    str_js = &#39;var scrollHeight = document.body.scrollHeight;window.scrollTo(0, %d);&#39; % (input.location[&#39;y&#39;] - 50)    browser.execute_script(str_js)    time.sleep(3)    input = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, &#39;#J_bottomPage input.input-txt&#39;)))    input.clear()    input.send_keys(page + 1)    # 点击下一页    submit = wait.until(        EC.element_to_be_clickable((By.CSS_SELECTOR, &#39;#J_bottomPage .btn-default&#39;))    )    submit.click()    time.sleep(3)    return page_sourcedef parse_page(html):    ehtml = etree.HTML(html)    gl_items = ehtml.xpath(&#39;//div[@id=&quot;J_goodsList&quot;]//li[@class=&quot;gl-item&quot;]&#39;)    print(len(gl_items))    for gl_item in gl_items:        jd = JdProduct()        img_src = &#39;&#39;.join(gl_item.xpath(&#39;.//div[@class=&quot;p-img&quot;]/a/img/@src&#39;))        title =  &#39;&#39;.join(gl_item.xpath(&#39;.//div[@class=&quot;p-name p-name-type-2&quot;]//em//text()&#39;))        price = gl_item.xpath(&#39;.//div[@class=&quot;p-price&quot;]//strong/i/text()&#39;)        shop = gl_item.xpath(&#39;.//div[@class=&quot;p-shop&quot;]//span/a/text()&#39;)        commit_num = gl_item.xpath(&#39;.//div[@class=&quot;p-commit&quot;]//strong/a//text()&#39;)        jd.title = title        jd.img_src = img_src        jd.price = price        jd.shop = shop        jd.commit_num = commit_num        try:            session.add(jd)            session.commit()        except Exception as e:            passdef main():    for page in range(100):        page = page + 1        print(page)        html = get_page(page)        parse_page(html)if __name__ == &#39;__main__&#39;:    main()</code></pre>]]></content>
      
      
      <categories>
          
          <category> spider </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sqlalchemy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>novel</title>
      <link href="/2018/05/11/spider/%E7%88%AC%E7%9F%AD%E8%A7%86%E9%A2%91/"/>
      <url>/2018/05/11/spider/%E7%88%AC%E7%9F%AD%E8%A7%86%E9%A2%91/</url>
      
        <content type="html"><![CDATA[<h3 id="novel"><a href="#novel" class="headerlink" title="novel"></a>novel</h3><h5 id="爬取到小说的具体内容，要进行滤除处理，完整的代码"><a href="#爬取到小说的具体内容，要进行滤除处理，完整的代码" class="headerlink" title="爬取到小说的具体内容，要进行滤除处理，完整的代码"></a>爬取到小说的具体内容，要进行滤除处理，完整的代码</h5><pre><code class="python"># -*- coding:UTF-8 -*-    from bs4 import BeautifulSoup    import requests    if __name__ == &quot;__main__&quot;:        target = &#39;http://www.biqukan.com/1_1094/5403177.html&#39;        req = requests.get(url = target)        html = req.text        bf = BeautifulSoup(html)        texts = bf.find_all(&#39;div&#39;, class_ = &#39;showtxt&#39;)        print(texts[0].text.replace(&#39;\xa0&#39;*8,&#39;\n\n&#39;))</code></pre><p>正文</p><pre><code class="python">import jsonfrom bs4 import BeautifulSoupimport requestsdef strips(contents):    result_list =  []    list1 = []    matter = contents[::2][::2]    for item in matter:        result_list.append(item)    for i in result_list:        list1.append(i.strip())    return list1# 保存json数据def save_json(article, num):    fiction_json_str = json.dumps(article, ensure_ascii=False)    with open(str(num)+&#39;.json&#39;, &#39;w&#39;, encoding=&#39;utf-8&#39;) as f:        f.write(fiction_json_str)# 取页面HTMLdef get_one_page(url):    headers =  {        &quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:2.0b13pre) Gecko/20110307 Firefox/4.0b13pre&quot;    }    response = requests.get(url, headers=headers)    if response.status_code == 200:        text = response.content.decode(&#39;utf-8&#39;)        return text    return Nonedef parse_with_bs4(html):    all_list = []    all_dic = {}    soup = BeautifulSoup(html, &#39;lxml&#39;)    title = soup.select(&#39;.content_read .box_con .bookname h1&#39;)[0].string    contents = soup.select(&#39;.content_read .box_con #content&#39;)[0].contents    content = strips(contents)    all_dic[&#39;title&#39;] = title    all_dic[&#39;content&#39;] = content    all_list.append(all_dic)    return all_listdef next_url(html):    soup = BeautifulSoup(html, &#39;lxml&#39;)    # 下一章的后缀路由    next_url = soup.select(&#39;.content_read .box_con .bookname .bottem1 a&#39;)[3][&#39;href&#39;]    nexts_url = &#39;http://www.xbiquge.la&#39; + next_url    return nexts_urldef main():    num = 1    url = &quot;http://www.xbiquge.la/2/2823/1790661.html&quot;    while True:        html = get_one_page(url)        article = parse_with_bs4(html)        save_json(article, num)        url = next_url(html)        if url == &#39;http://www.xbiquge.la/2/2823/&#39;:            break        num += 1if __name__ == &#39;__main__&#39;:    main()</code></pre>]]></content>
      
      
      <categories>
          
          <category> spider </category>
          
      </categories>
      
      
        <tags>
            
            <tag> novel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shop_mo</title>
      <link href="/2018/05/09/spider/%E7%88%AC%E5%8F%96%E6%95%B0%E6%8D%AE/"/>
      <url>/2018/05/09/spider/%E7%88%AC%E5%8F%96%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="蘑菇街"><a href="#蘑菇街" class="headerlink" title="蘑菇街"></a>蘑菇街</h3><p>agent_list.py</p><pre><code class="python">import randomdef get_random_agent():    agent_list = [    &quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; AcooBrowser; .NET CLR 1.1.4322; .NET CLR 2.0.50727)&quot;,        &quot;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; Acoo Browser; SLCC1; .NET CLR 2.0.50727; Media Center PC 5.0; .NET CLR 3.0.04506)&quot;,        &quot;Mozilla/4.0 (compatible; MSIE 7.0; AOL 9.5; AOLBuild 4337.35; Windows NT 5.1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)&quot;,        &quot;Mozilla/5.0 (Windows; U; MSIE 9.0; Windows NT 9.0; en-US)&quot;,        &quot;Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 2.0.50727; Media Center PC 6.0)&quot;,        &quot;Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 1.0.3705; .NET CLR 1.1.4322)&quot;,        &quot;Mozilla/4.0 (compatible; MSIE 7.0b; Windows NT 5.2; .NET CLR 1.1.4322; .NET CLR 2.0.50727; InfoPath.2; .NET CLR 3.0.04506.30)&quot;,        &quot;Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN) AppleWebKit/523.15 (KHTML, like Gecko, Safari/419.3) Arora/0.3 (Change: 287 c9dfb30)&quot;,        &quot;Mozilla/5.0 (X11; U; Linux; en-US) AppleWebKit/527+ (KHTML, like Gecko, Safari/419.3) Arora/0.6&quot;,        &quot;Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.2pre) Gecko/20070215 K-Ninja/2.1.1&quot;,        &quot;Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9) Gecko/20080705 Firefox/3.0 Kapiko/3.0&quot;,        &quot;Mozilla/5.0 (X11; Linux i686; U;) Gecko/20070322 Kazehakase/0.4.5&quot;,        &quot;Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.8) Gecko Fedora/1.9.0.8-1.fc10 Kazehakase/0.5.6&quot;,        &quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11&quot;,        &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/535.20 (KHTML, like Gecko) Chrome/19.0.1036.7 Safari/535.20&quot;,        &quot;Opera/9.80 (Macintosh; Intel Mac OS X 10.6.8; U; fr) Presto/2.9.168 Version/11.52&quot;,    ]    agent = random.choice(agent_list)    return agentif __name__ == &#39;__main__&#39;:    agent = get_random_agent()    print(agent)</code></pre><p>数据库中创建的字段</p><pre><code class="python">from sqlalchemy.ext.declarative import declarative_basefrom sqlalchemy import Column, Integer, String, ForeignKey, UniqueConstraint, Indexfrom sqlalchemy.orm import sessionmaker, relationshipimport pymysqlfrom sqlalchemy import create_engineengine = create_engine(&quot;mysql+pymysql://root:123456@127.0.0.1:3306/maoyan_db?charset=utf8&quot;, max_overflow=5,encoding=&#39;utf-8&#39;)Base = declarative_base()class MoguProduct(Base):    __tablename__ = &#39;mogu&#39;    id = Column(Integer, primary_key=True, autoincrement=True)    #主键，自增    tradeitemid = Column(String(128))    img = Column(String(1024))    clienturl = Column(String(1024))    link = Column(String(1024))    title = Column(String(512))    orgprice = Column(String(128))    price = Column(String(128))    similarityurl = Column(String(1024))py</code></pre><p>运行的程序</p><pre><code class="python">import jsonimport requestsfrom sqlalchemy import create_enginefrom sqlalchemy.orm import sessionmakerfrom agent_helper import get_random_agentfrom models import MoguProductengine = create_engine(&quot;mysql+pymysql://root:123456@127.0.0.1/mogudb?charset=utf8&quot;, max_overflow=5)session_maker = sessionmaker(bind=engine)session = session_maker()# 取页面HTMLdef get_one_page(url, page):    agent = get_random_agent()    # referer = &quot;https://list.mogujie.com/s?page=&quot; + page + &quot;&amp;q=%E8%A1%A3%E6%9C%8D&amp;sort=pop&amp;ppath=&amp;ptp=1.5y18ub.0.0.d9fJkbZi&quot;    referer = &quot;https://list.mogujie.com/s?page=&quot; + str(page) + &quot;&amp;q=%E8%A1%A3%E6%9C%8D&amp;sort=pop&amp;ppath=&amp;ptp=1.5y18ub.0.0.wVFuR4dg&quot;    headers = {        &#39;Referer&#39;: referer,        &#39;User-Agent&#39;: agent,        &#39;Host&#39;: &#39;list.mogujie.com&#39;,        &#39;Accept&#39;: &#39;text/javascript, application/javascript, application/ecmascript, application/x-ecmascript, */*; q=0.01&#39;,        &#39;Accept-Encoding&#39;: &#39;gzip, deflate, br&#39;,        &#39;Accept-Language&#39;: &#39;en-US,en;q=0.9&#39;,        &#39;Connection&#39;: &#39;keep-alive&#39;,        &#39;X-Requested-With&#39;: &#39;XMLHttpRequest&#39;,    }    response = requests.get(url, headers=headers)    if response.status_code == 200:        text = response.content.decode(&#39;utf-8&#39;)        return text    return None# 解析JSON数据def parse_json(html):    # 匹配出现的第一个（    start = html.index(&#39;(&#39;) + 1    html = html[start:-2]    json_data = json.loads(html)    result_list = json_data[&#39;result&#39;][&#39;wall&#39;][&#39;docs&#39;]    for item in result_list:        mogu = MoguProduct()        mogu.tradeitemid = item[&#39;tradeItemId&#39;]        mogu.img = item[&#39;img&#39;]        mogu.clienturl = item[&#39;clientUrl&#39;]        mogu.link = item[&#39;link&#39;]        mogu.title = item[&#39;title&#39;]        mogu.orgprice = item[&#39;orgPrice&#39;]        mogu.price = item[&#39;price&#39;]        mogu.similarityurl = item[&#39;similarityUrl&#39;]        # todo 保存数据库        try:            session.add(mogu)            session.commit()        except Exception as e:            passdef main():    for i in range(69):        page = i        print(i)        url = &quot;https://list.mogujie.com/search?callback=jQuery211032322620930865265_1546578701309&amp;_version=8193&amp;ratio=3%3A4&amp;cKey=43&amp;sort=pop&amp;page=&quot; + str(i+1) + &quot;&amp;q=%25E8%25A1%25A3%25E6%259C%258D&amp;minPrice=&amp;maxPrice=&amp;ppath=&amp;cpc_offset=&amp;ptp=1.5y18ub.0.0.y3JjPAiS&amp;_=1546578701310&quot;        # url = &quot;https://list.mogujie.com/search?callback=jQuery211046561435892064384_1546568094492&amp;_version=8193&amp;ratio=3%3A4&amp;cKey=43&amp;sort=pop&amp;page=&quot; + str(i+1) + &quot;&amp;q=%25E8%25A3%25A4%2    5E5%25AD%2590&amp;minPrice=&amp;maxPrice=&amp;ppath=&amp;cpc_offset=&amp;ptp=1.5y18ub.0.0.k1OJRbUq&amp;_=1546568094493&quot;        html = get_one_page(url, page)        print(html)        parse_json(html)if __name__ == &quot;__main__&quot;:    main()</code></pre><p>数据库建模语句，SQL语句</p><pre><code class="python">create database mogudb default character set=utf8;use mogudb;create table mogu (    id integer auto_increment primary key,    tradeitemid varchar(128),    img varchar(1024),    clienturl varchar(1024),    link varchar(1024),    title varchar(512),    orgprice varchar(128),    price varchar(128),    similarityurl varchar(1024));create unique index ux_mogu_tradeitemid on mogu(tradeitemid);</code></pre>]]></content>
      
      
      <categories>
          
          <category> spider </category>
          
      </categories>
      
      
        <tags>
            
            <tag> agent </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>music_wy</title>
      <link href="/2018/05/07/spider/%E7%88%AC%E5%8F%96%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90/"/>
      <url>/2018/05/07/spider/%E7%88%AC%E5%8F%96%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90/</url>
      
        <content type="html"><![CDATA[<pre><code class="python"># coding=utf-8&#39;&#39;&#39;爬取wy音乐榜单&#39;&#39;&#39;# 导入需要使用的模块import osimport csvimport timeimport randomimport requestsimport threadingfrom lxml import etreefrom selenium import webdriveragents = [    &quot;Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; .NET4.0C; .NET4.0E; .NET CLR 2.0.50727; .NET CLR 3.0.30729; .NET CLR 3.5.30729; InfoPath.3; rv:11.0) like Gecko&quot;,    &quot;Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0&quot;,    &quot;Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0)&quot;,    &quot;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)&quot;,    &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:2.0.1) Gecko/20100101 Firefox/4.0.1&quot;,    &quot;Mozilla/5.0 (Windows NT 6.1; rv:2.0.1) Gecko/20100101 Firefox/4.0.1&quot;,    &quot;Opera/9.80 (Macintosh; Intel Mac OS X 10.6.8; U; en) Presto/2.8.131 Version/11.11&quot;,]class WangyiMusc(object):    # id表示你要获取排行榜    # mating是榜单名称    # url为排行榜页面    # music_url为歌曲下载页面    def __init__(self, mating, id):        self.browser = webdriver.Chrome()        self.id = id        self.url = &quot;https://music.163.com/#/discover/toplist?id={0}&quot;.format(self.id)        self.music_url = &quot;http://music.163.com/song/media/outer/url?id={0}.mp3&quot;        self.mat = mating    # 由于页面的歌曲信息都存放在页面的ifram里面，所以使用Selenium进入子页面获得代码然后返回    def get_html(self):        self.browser.get(self.url)        self.browser.switch_to_frame(&#39;contentFrame&#39;)        iframe = self.browser.page_source        time.sleep(5)        return iframe    # 使用xpath解析页面的信息进行返回    def parse_html(self):        iframe = self.get_html()        html = etree.HTML(iframe)        contents = html.xpath(&#39;//tbody/tr&#39;)        try:            for content in contents:                name = content.xpath(&#39;./td/div/div/div/span/a/b/@title&#39;)[0].replace(&#39; &#39;, &#39;&#39;)                music_id = content.xpath(&#39;./td/div/div/span/@data-res-id&#39;)[0].strip()                print(name)                print(music_id)                # 将歌曲的名称与id传给write_music方法进行下载                self.write_music(name, music_id)                # num = content.xpath(&#39;./td/div/span[@class=&quot;num&quot;]/text()&#39;)[0].strip()                # date = content.xpath(&#39;./td[@class=&quot; s-fc3&quot;]/span/text()&#39;)[0].strip()                # singer = content.xpath(&#39;./td/div[@class=&quot;text&quot;]/@title&#39;)[0].strip()                # # 将歌曲的信息构建成个元组类型                # items = num, name, date, singer                #                # # 每获得一次歌曲信息后返回一次                # yield list(items)        except Exception as e:            print(&#39;解析失败！&#39;, e.args)    # 获取到目前的日期    def get_date(self):        t = time.localtime()        tt = time.strftime(&#39;%Y年%m月%d日&#39;, t)        return tt    # 得到歌曲的名称与id,这里进行下载    def write_music(self, name, music_id):        url = self.music_url.format(music_id)        # agent = random.choice(agents)        try:            # headers = {            #     &#39;User-Agent&#39;: agent            # }            # music = requests.get(url, headers=headers)            headers = {                &quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:2.0b13pre) Gecko/20110307 Firefox/4.0b13pre&quot;            }            music = requests.get(url, headers=headers)            if music.status_code == 200:                # 把歌曲保存到目前日期下的榜单名称下面,方便查看                # path = self.get_date() + os.sep + self.mat + os.sep                # 查询是否有这个地址,如果没有递归创建                # if not os.path.exists(path):                #     os.makedirs(path)                with open(&#39;./wangyiyun/&#39; + name + &#39;.mp3&#39;, &#39;wb&#39;) as f:                    f.write(music.content)                    print(&#39;下载 &#39; + name + &quot; 成功...&quot;)        except Exception as e:            print(&quot;下载 {0} 失败!!!&quot;.format(name), e.args)    # 保存榜单的信息    def write_items(self):        # 将信息保存至目前日期的下面,方便查找        path = self.get_date() + os.sep + self.mat        try:            # 判断是否有这个文件，如果没有者创建            if not os.path.exists(path):                os.makedirs(path)            with open(path + &#39;榜单信息.csv&#39;, &#39;w&#39;, encoding=&#39;utf-8&#39;) as file:                # 使用cvs格式进行保存                csvfile = csv.writer(file)                csvfile.writerow([&#39;排名&#39;, &#39;歌名&#39;, &#39;时长&#39;, &#39;歌手&#39;])                for parse in self.parse_html():                    csvfile.writerow(parse)                print(&quot;存储信息成功.&quot;)        except Exception as e:            print(&quot;存储信息失败!&quot;, e.args)def operation(mating, id):    try:        # 实例化对象        music = WangyiMusc(mating, id)        # 获取要爬取的页面的HTML文件        music.get_html()        # 解析页面，将需要的信息进行返回,并开始下载歌曲        music.parse_html()        # 获取目前的日期        # music.get_date()        # 保存需要的信息        # music.write_items()        # print(&quot;下载完成...&quot;)        # 关闭browser        music.browser.close()    except Exception as e:        print(&quot;下载失败!&quot;, e.args)# 选择的界面def user_select():    # 每个榜单的id    ids = [&#39;19723756&#39;, &#39;3779629&#39;, &#39;2884035&#39;, &#39;3778678&#39;, &#39;991319590&#39;,           &#39;2408901803&#39;, &#39;1978921795&#39;, &#39;71385702&#39;, &#39;2462790889&#39;,           &#39;10520166&#39;, &#39;3812895&#39;, &#39;60131&#39;, &#39;71384707&#39;, &#39;180106&#39;, &#39;60198&#39;,           &#39;27135204&#39;, &#39;11641012&#39;, &#39;120001&#39;, &#39;2323534945&#39;, &#39;745956260&#39;,           &#39;2023401535&#39;, &#39;2006508653&#39;, &#39;21845217&#39;, &#39;112463&#39;,           &#39;112504&#39;, &#39;64016&#39;, &#39;10169002&#39;, &#39;1899724&#39;]    # 每个榜单的名称    names = [&#39;云音乐飙升榜&#39;, &#39;云音乐新歌榜&#39;, &#39;网易原创歌曲榜&#39;,             &#39;云音乐热歌榜&#39;, &#39;江小白YOLO云音乐说唱榜&#39;, &#39;公告牌音乐榜&#39;, &#39;云音乐电音榜&#39;,             &#39;云音乐电音榜&#39;, &#39;云音乐ACG音乐榜&#39;, &#39;YY音乐榜&#39;, &#39;云音乐国电榜&#39;, &#39;云音乐国电榜&#39;,             &#39;云音乐国电榜&#39;, &#39;云音乐古典音乐榜&#39;, &#39;UK排行榜周榜&#39;, &#39;美国Billboard周榜&#39;,             &#39;法国 NRJVos Hits 周榜&#39;, &#39;iTunes榜&#39;, &#39;Hit FMTop榜&#39;, &#39;说唱TOP榜&#39;, &#39;云音乐韩语榜&#39;,             &#39;英国Q杂志中文版周榜&#39;, &#39;电竞音乐榜&#39;, &#39;KTV唛榜&#39;, &#39;台湾Hito排行榜&#39;, &#39;中国TOP排行榜（港台榜）&#39;,             &#39;中国TOP排行榜（内地榜）&#39;, &#39;香港r台中文歌曲龙虎榜&#39;, &#39;中国嘻哈榜&#39;]    musics = {}    nums = {}    # 将名称与id存放在musics字典当中    for mat in range(len(ids)):        musics[names[mat]] = ids[mat]    # 给每一个榜单设置一个编号    for num in range(1, len(names) + 1):        nums[num] = names[num - 1]    # 输入编号与榜单名称,便于查看    for k, v in nums.items():        print(k, &quot;:&quot;, v)    # 将榜单与id打包以元组的方式放入列表当中    music_list = list(musics.items())    # 因为使用4个线程，所以构建一个列表    list1 = [i for i in range(len(music_list)) if i % 4 == 0]    # 选择要下载的榜单    n = int(input(&#39;请输入你要下载的榜单(请输入数字,输入0全部提取):&#39;))    # 如果需要全部下载,使用多线程    if n == 0:        for t in list1:            t1 = threading.Thread(target=operation, args=music_list[t])            t2 = threading.Thread(target=operation, args=music_list[t + 1])            t3 = threading.Thread(target=operation, args=music_list[t + 2])            t4 = threading.Thread(target=operation, args=music_list[t + 3])            t1.start()            t2.start()            t3.start()            t4.start()            t1.join()            t2.join()            t3.join()            t4.join()    # 如果只是下载某个榜单,者传入榜单名称与id    id = musics[nums[n]]    mating = nums[n]    operation(mating, id)if __name__ == &#39;__main__&#39;:    # 程序开始    user_select()</code></pre>]]></content>
      
      
      <categories>
          
          <category> spider </category>
          
      </categories>
      
      
        <tags>
            
            <tag> music </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>video</title>
      <link href="/2018/05/03/spider/%E7%88%AC%E8%A7%86%E9%A2%91/"/>
      <url>/2018/05/03/spider/%E7%88%AC%E8%A7%86%E9%A2%91/</url>
      
        <content type="html"><![CDATA[<p>方法一：</p><pre><code class="python">import reimport requests# 获取二进制资源def get_resource(url):    headers = {        &quot;User-Agent&quot;: &quot;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; 360SE)&quot;    }    response = requests.get(url, headers=headers)    if response.status_code == 200:        return response.content    return None# 获取页面def get_page(url):    headers =  {        &quot;User-Agent&quot;: &quot;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; 360SE)&quot;    }    response = requests.get(url, headers=headers)    if response.status_code == 200:        text = response.content.decode(&#39;utf-8&#39;)        return text    return Nonedef parse_source(html):    # 正则匹配路由    video = re.compile(&#39;data-mp4=&quot;(.*?)&quot;&gt;&#39;, re.S)    video = re.findall(video, html)    for i in video:        save_video(i)        print(i + &#39;下载完成&#39;)    return videodef save_video(url):    content = get_resource(url)    filename = url.split(&quot;/&quot;)[-1]    with open(&#39;./video/%s&#39; % filename, &#39;wb&#39;) as f:        f.write(content)def main():    for page in range(2, 10):        url = &quot;http://www.budejie.com/video/&quot; + str(page)        html = get_page(url)        parse_source(html)if __name__ == &#39;__main__&#39;:    main()</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> video </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>music</title>
      <link href="/2018/05/02/spider/%E7%88%AC%E5%B0%8F%E8%AF%B4/"/>
      <url>/2018/05/02/spider/%E7%88%AC%E5%B0%8F%E8%AF%B4/</url>
      
        <content type="html"><![CDATA[<p>获取音乐的url，访问的时候，能直接播放音乐的地址</p><pre><code class="python">import urllibfrom urllib import parsedef str2url(s):    #s = &#39;9hFaF2FF%_Et%m4F4%538t2i%795E%3pF.265E85.%fnF9742Em33e162_36pA.t6661983%x%6%%74%2i2%22735&#39;    num_loc = s.find(&#39;h&#39;)    rows = int(s[0:num_loc])    strlen = len(s) - num_loc    cols = int(strlen/rows)    right_rows = strlen % rows    new_s = list(s[num_loc:])    output = &#39;&#39;    for i in range(len(new_s)):        x = i % rows        y = i / rows        p = 0        if x &lt;= right_rows:            p = x * (cols + 1) + y        else:            p = right_rows * (cols + 1) + (x - right_rows) * cols + y        output += new_s[int(p)]    return parse.unquote(output).replace(&#39;^&#39;, &#39;0&#39;)def main():    s = &quot;6hAFxn752E5F215234uy495-3741E8t%mie15F2E185E%6at%72E%7ba%13t21at27261734458%h3%%-5a885d5pF2m%%11799662E13_D55%E992E48%%8i222%4%59358.Fk1EE5-8bc%7632..FF%5%24_%9_mae58%E513e51&quot;    result_str = str2url(s)    print(result_str)main()</code></pre><pre><code class="python">import timefrom selenium import webdriverfrom selenium.common.exceptions import TimeoutExceptionfrom selenium.webdriver.common.by import Byfrom selenium.webdriver.support.ui import WebDriverWaitfrom selenium.webdriver.support import expected_conditions as ECfrom urllib.parse import quotefrom lxml import etreeimport kaishaimport requestsbrowser = webdriver.Chrome()# 等待加载时间wait = WebDriverWait(browser, 5)# 取页面HTMLdef get_resource(url):    headers =  {        &quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:2.0b13pre) Gecko/20110307 Firefox/4.0b13pre&quot;    }    response = requests.get(url, headers=headers)    if response.status_code == 200:        text = response.content        return text    return Nonedef save_mp3(mp3_url, mp3_title):    content = get_resource(mp3_url)    with open(&#39;./mp3/%s.mp3&#39; % mp3_title, &#39;wb&#39;) as f:        f.write(content)def get_page():    url = &quot;https://www.xiami.com&quot;    # 访问网址    browser.get(url)    # 注意下面的presence_of_element_located，容易出错    # input = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, &#39;#key&#39;)))    # input.clear()    # input.send_keys(&#39;汽车&#39;)    button = wait.until(EC.element_to_be_clickable(        (By.LINK_TEXT, &#39;回旧版&#39;)    ))    button.click()    button = wait.until(EC.element_to_be_clickable(        (By.XPATH, &#39;//div[@id=&quot;secondary&quot;]//div[@class=&quot;nav&quot;]/a[2]&#39;)    ))    button.click()    # 等待加载完成 可以等待某个元素出现    # wait.until(EC.text_to_be_present_in_element(((By.XPATH, &#39;//tr[@data-index=&quot;99&quot;]/td[@class=&quot;trackid&quot;]&#39;), &#39;100&#39;)))    time.sleep(3)    # 拿网页    return browser.page_sourcedef parse_page(html):    etree_html = etree.HTML(html)    song_list = etree_html.xpath(&#39;//tr[@class=&quot;songwrapper&quot;]&#39;)    for song in song_list:        # 取歌曲链接        mp3_data = song.xpath(&#39;./@data-mp3&#39;)[0]        mp3_url = kaisha.str2url(mp3_data)        # 取歌曲名        mp3_title = song.xpath(&#39;./@data-title&#39;)[0]        mp3_title = mp3_title.replace(&#39; &#39;, &#39;&#39;)        print(mp3_url)        print(mp3_title)        save_mp3(mp3_url, mp3_title)def main():    html = get_page()    parse_page(html)if __name__ == &#39;__main__&#39;:    main()</code></pre>]]></content>
      
      
      <categories>
          
          <category> spider </category>
          
      </categories>
      
      
        <tags>
            
            <tag> music </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spider相关</title>
      <link href="/2018/05/01/spider/spider%E7%9B%B8%E5%85%B3/"/>
      <url>/2018/05/01/spider/spider%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h3 id="爬虫的结构"><a href="#爬虫的结构" class="headerlink" title="爬虫的结构"></a>爬虫的结构</h3><p>爬虫大致分为三个部分</p><ul><li>控制器：主要负责根据系统传过来的URL链接，分配线程，然后启动线程调用爬虫爬取网页的过程</li><li>解析器：负责爬虫的主要部分，作用：下载网页功能，对网页的文本进行处理，如过滤，抽取标签的功能，分析数据的功能</li><li>资源库：用来存储网页中下载下来的数据记录的容器，并生成索引目标源。中大型的数据库产品：Oracle、Sql Server等</li></ul><h3 id="爬虫分类"><a href="#爬虫分类" class="headerlink" title="爬虫分类"></a>爬虫分类</h3><ul><li>分布式爬虫(Nutch)问题：1.海量URL管理；2.网速；做搜索引擎可以选择</li><li>JAVA爬虫问题：不支持多线程、不支持代理、不能过滤重复URL的，那都不叫开源爬虫，那叫循环执行http请求。</li><li>非JAVA爬虫：在非JAVA语言编写的爬虫中，有很多优秀的爬虫。这里单独提取出来作为一类，并不是针对爬虫本身的质量进行讨论，而是针对larbin、scrapy这类爬虫，对开发成本的影响。</li></ul>]]></content>
      
      
      <categories>
          
          <category> spider </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>music</title>
      <link href="/2018/05/01/spider/%E7%88%AC%E9%9F%B3%E4%B9%90/"/>
      <url>/2018/05/01/spider/%E7%88%AC%E9%9F%B3%E4%B9%90/</url>
      
        <content type="html"><![CDATA[<p>获取音乐的url，访问的时候，能直接播放音乐的地址</p><pre><code class="python">import urllibfrom urllib import parsedef str2url(s):    #s = &#39;9hFaF2FF%_Et%m4F4%538t2i%795E%3pF.265E85.%fnF9742Em33e162_36pA.t6661983%x%6%%74%2i2%22735&#39;    num_loc = s.find(&#39;h&#39;)    rows = int(s[0:num_loc])    strlen = len(s) - num_loc    cols = int(strlen/rows)    right_rows = strlen % rows    new_s = list(s[num_loc:])    output = &#39;&#39;    for i in range(len(new_s)):        x = i % rows        y = i / rows        p = 0        if x &lt;= right_rows:            p = x * (cols + 1) + y        else:            p = right_rows * (cols + 1) + (x - right_rows) * cols + y        output += new_s[int(p)]    return parse.unquote(output).replace(&#39;^&#39;, &#39;0&#39;)def main():    s = &quot;6hAFxn752E5F215234uy495-3741E8t%mie15F2E185E%6at%72E%7ba%13t21at27261734458%h3%%-5a885d5pF2m%%11799662E13_D55%E992E48%%8i222%4%59358.Fk1EE5-8bc%7632..FF%5%24_%9_mae58%E513e51&quot;    result_str = str2url(s)    print(result_str)main()</code></pre><pre><code class="python">import timefrom selenium import webdriverfrom selenium.common.exceptions import TimeoutExceptionfrom selenium.webdriver.common.by import Byfrom selenium.webdriver.support.ui import WebDriverWaitfrom selenium.webdriver.support import expected_conditions as ECfrom urllib.parse import quotefrom lxml import etreeimport kaishaimport requestsbrowser = webdriver.Chrome()# 等待加载时间wait = WebDriverWait(browser, 5)# 取页面HTMLdef get_resource(url):    headers =  {        &quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:2.0b13pre) Gecko/20110307 Firefox/4.0b13pre&quot;    }    response = requests.get(url, headers=headers)    if response.status_code == 200:        text = response.content        return text    return Nonedef save_mp3(mp3_url, mp3_title):    content = get_resource(mp3_url)    with open(&#39;./mp3/%s.mp3&#39; % mp3_title, &#39;wb&#39;) as f:        f.write(content)def get_page():    url = &quot;https://www.xiami.com&quot;    # 访问网址    browser.get(url)    # 注意下面的presence_of_element_located，容易出错    # input = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, &#39;#key&#39;)))    # input.clear()    # input.send_keys(&#39;汽车&#39;)    button = wait.until(EC.element_to_be_clickable(        (By.LINK_TEXT, &#39;回旧版&#39;)    ))    button.click()    button = wait.until(EC.element_to_be_clickable(        (By.XPATH, &#39;//div[@id=&quot;secondary&quot;]//div[@class=&quot;nav&quot;]/a[2]&#39;)    ))    button.click()    # 等待加载完成 可以等待某个元素出现    # wait.until(EC.text_to_be_present_in_element(((By.XPATH, &#39;//tr[@data-index=&quot;99&quot;]/td[@class=&quot;trackid&quot;]&#39;), &#39;100&#39;)))    time.sleep(3)    # 拿网页    return browser.page_sourcedef parse_page(html):    etree_html = etree.HTML(html)    song_list = etree_html.xpath(&#39;//tr[@class=&quot;songwrapper&quot;]&#39;)    for song in song_list:        # 取歌曲链接        mp3_data = song.xpath(&#39;./@data-mp3&#39;)[0]        mp3_url = kaisha.str2url(mp3_data)        # 取歌曲名        mp3_title = song.xpath(&#39;./@data-title&#39;)[0]        mp3_title = mp3_title.replace(&#39; &#39;, &#39;&#39;)        print(mp3_url)        print(mp3_title)        save_mp3(mp3_url, mp3_title)def main():    html = get_page()    parse_page(html)if __name__ == &#39;__main__&#39;:    main()</code></pre>]]></content>
      
      
      <categories>
          
          <category> spider </category>
          
      </categories>
      
      
        <tags>
            
            <tag> music </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装Python</title>
      <link href="/2018/04/20/Linux/CentOS%E5%AE%89%E8%A3%85Python3.7/"/>
      <url>/2018/04/20/Linux/CentOS%E5%AE%89%E8%A3%85Python3.7/</url>
      
        <content type="html"><![CDATA[<p>认真学习也是有前提的：</p><p>好的学习环境, 好的学习方法, 好的学习状态</p><p>缺一不可哟！</p><p>CentOS安装Python3.7</p><h2 id="1-下载Python源代码："><a href="#1-下载Python源代码：" class="headerlink" title="1.下载Python源代码："></a>1.下载Python源代码：</h2><p><a href="https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tgz" target="_blank" rel="noopener">https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tgz</a></p><h2 id="2-解压缩"><a href="#2-解压缩" class="headerlink" title="2.解压缩"></a>2.解压缩</h2><pre><code>gunzip Python-3.7.0.tgz</code></pre><h2 id="3-解归档"><a href="#3-解归档" class="headerlink" title="3.解归档"></a>3.解归档</h2><pre><code>tar -xvf Python-3.7.0.tar</code></pre><h2 id="4-安装底层依赖库"><a href="#4-安装底层依赖库" class="headerlink" title="4.安装底层依赖库"></a>4.安装底层依赖库</h2><pre><code>yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel libffi-devel</code></pre><h2 id="5-安装前的配置"><a href="#5-安装前的配置" class="headerlink" title="5.安装前的配置"></a>5.安装前的配置</h2><pre><code> ./configure --prefix=/usr/local/Python37 --enable-optimizations</code></pre><h2 id="6-构建安装"><a href="#6-构建安装" class="headerlink" title="6.构建安装"></a>6.构建安装</h2><pre><code>make &amp;&amp; make install</code></pre><p>##7.配置环境变量</p><pre><code>export PATH=$PATH:/usr/local/Python37/bin</code></pre><p>##8.注册软连接（符号链接）</p><pre><code>ln -s /usr/local/Python37/bin/python3 /usr/bin/python3</code></pre><p>硬链接 - 文件的引用，只要引用数不为0，文件就不会被删除<br>软链接 - 相当于是文件的快捷方式，如果文件被删除，软链接就会失效<br>ln -s 带完整路径的文件名，链接文件名</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux操作</title>
      <link href="/2018/04/16/Linux/Linux%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2018/04/16/Linux/Linux%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>Linux内核最初只是由芬兰人李纳斯·托瓦兹（Linus Torvalds）在赫尔辛基大学上学时出于个人爱好而编写的。</p><p>Linux能运行主要的UNIX工具软件、应用程序和网络协议</p><p>Linux发行版本：Ubuntu、RedHat、CentOS、Debian、Fedora、SuSE、OpenSUSE、Arch Linux、SolusOS 等。</p><h1 id="Linux系统下的操作系统"><a href="#Linux系统下的操作系统" class="headerlink" title="Linux系统下的操作系统"></a>Linux系统下的操作系统</h1><h2 id="1-攻击方式"><a href="#1-攻击方式" class="headerlink" title="1. 攻击方式"></a>1. 攻击方式</h2><p>PING to death  ———- 拼到死</p><p>DOS - Deny of Service ————— 拒绝服务攻击</p><p>DDoS - Distributed Deny of Service ———– 分布式拒绝服务攻击</p><h2 id="2-查看本机IP"><a href="#2-查看本机IP" class="headerlink" title="2. 查看本机IP"></a>2. 查看本机IP</h2><p>ifconfig</p><h2 id="3-连接其它的服务器"><a href="#3-连接其它的服务器" class="headerlink" title="3. 连接其它的服务器"></a>3. 连接其它的服务器</h2><p>ssh <a href="mailto:root@IP" target="_blank" rel="noopener">root@IP</a></p><p>断开某个用户的终端连接： </p><p>​    命令：fuser -k /dev/pts/x  （x为who下看到的这个用户的pts序号，比如本例中的pts/0,pts/1）   </p><p>​            example： fuser -k /dev/pts/0</p><h2 id="4-给其它的服务器拷贝文件"><a href="#4-给其它的服务器拷贝文件" class="headerlink" title="4. 给其它的服务器拷贝文件"></a>4. 给其它的服务器拷贝文件</h2><p>一个用户操作另外两个用户的文件：</p><p> scp  用户名@IP：/绝对路径/文件名 用户名@IP：/绝对路径/文件命名</p><p>从本地到远程用户：</p><p>scp /绝对路径/文件名 用户名@IP：/绝对路径/文件命名</p><h2 id="5-操作远端用户"><a href="#5-操作远端用户" class="headerlink" title="5. 操作远端用户"></a>5. 操作远端用户</h2><p>sftp 用户名@IP</p><p>​    用户名密码</p><p>​    get 要下载的文件名</p><p>​    put 上传的文件名</p><p>​    lls 查看本地目录</p><p>在输入的命令前加上<l>，就可以操作本地文件，直接输入命令，操作连接的用户文件</l></p><p>​    l(命令) 操作本地文件</p><h2 id="6-网络端口"><a href="#6-网络端口" class="headerlink" title="6. 网络端口"></a>6. 网络端口</h2><p>netstat -na | grep 80   查询网络状态</p><p>netstat -nap | grep 80   查看占用端口的进程</p><h2 id="7-服务操作"><a href="#7-服务操作" class="headerlink" title="7. 服务操作"></a>7. 服务操作</h2><p>systemctl start &lt;进程的名字&gt;       开启服务</p><p>systemctl stop <name>       禁用服务</name></p><p>systemctl restart <name>    重启服务</name></p><p>systemctl status <name>    查看服务状态</name></p><p>systemctl senable <name>  开机自启服务</name></p><p>systemctl disable <name>   禁用开机自启服务</name></p><p>计算机网络分层结构模型</p><p>Internet —– TCP/IP协议族</p><p>TCP - Transfer Control Protocol - 传输控制协议</p><p>UDP - User Datagram Protocol - 用户数据报协议</p><p>IP - Internet Protocol - 网际协议</p><p>TCP/IP模型</p><p>应用层（定义应用之间如何传输数据，定义应用级协议）- HTTP/SMTP/SSH/POP3/FTP/ICQ</p><p>传输层（端到端传输数据）- TCP/ UDP</p><p>网络层/网际层 （寻址和路由）</p><p>物理链路层 （数据分帧 + 校验）- 冗余校验码</p><h2 id="Linux常用的防火墙服务有firewall和iptables"><a href="#Linux常用的防火墙服务有firewall和iptables" class="headerlink" title="Linux常用的防火墙服务有firewall和iptables"></a>Linux常用的防火墙服务有firewall和iptables</h2><ul><li><p>systemctl start firewalld    开启防火墙</p></li><li><p>systemctl enable firewalld     设置开机自启防火墙</p></li></ul><ul><li><p>firewalls-cmd  –add-port=80/tcp  –permanent</p></li><li><p>firewalls-cmd  –add-service=80/tcp  –permanent</p></li></ul><ul><li>top —— 查看进程（CPU的利用率排序）</li><li>ctrl + z     —— 把进程放到后台</li><li>ctrl + c    ——  终止进程</li><li>jobs —— 查看后台进程<h2 id="如果执行命令时在命令后面加上-amp-就可以将命令置于后台运行"><a href="#如果执行命令时在命令后面加上-amp-就可以将命令置于后台运行" class="headerlink" title="如果执行命令时在命令后面加上&amp;就可以将命令置于后台运行"></a>如果执行命令时在命令后面加上&amp;就可以将命令置于后台运行</h2>_bg %编号 —— 让暂停的进程继续在后台运行background</li><li>fg %编号 —— 将后台的进程放到前台foreground</li></ul><h2 id="8-Linux根目录下"><a href="#8-Linux根目录下" class="headerlink" title="8. Linux根目录下"></a>8. Linux根目录下</h2><h2 id="http-www-runoob-com-linux-linux-system-contents-html"><a href="#http-www-runoob-com-linux-linux-system-contents-html" class="headerlink" title="http://www.runoob.com/linux/linux-system-contents.html"></a><a href="http://www.runoob.com/linux/linux-system-contents.html" target="_blank" rel="noopener">http://www.runoob.com/linux/linux-system-contents.html</a></h2><p>etc:保存下载安装的文件夹</p><p>安装的软件名.conf ———- 安装的软件的配置</p><p>dev: 设备管理器</p><p>tmp ————— 临时文件</p><p>usr ————– 用户目录</p><h2 id="9-Linux环境"><a href="#9-Linux环境" class="headerlink" title="9. Linux环境"></a>9. Linux环境</h2><p>Linux的shall也是一个交互式的环境，可以输入代码</p><p>执行多个程序可以用分号 隔开 / &amp;&amp; 隔开 / 并列符号 ||</p><p><img src="/2018/04/16/Linux/Linux服务器/Linux1.jpg" alt="Linux1"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux操作系统 </tag>
            
            <tag> Linux防火墙设置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux文件操作及软件安装</title>
      <link href="/2018/04/15/Linux/Linux%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E5%8F%8A%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/"/>
      <url>/2018/04/15/Linux/Linux%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E5%8F%8A%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h4 id="压缩文件"><a href="#压缩文件" class="headerlink" title="压缩文件"></a>压缩文件</h4><ul><li>ls -lh  —— 使用比较接近文件大小的单位显示文件</li><li>ls -l –block-size=k(m,g) ——— 以不同的格式显示文件</li><li>unzip filename</li><li>gz —— gzip(压缩) / gunzip（解压缩）</li><li>xz ——- xz -z(压缩) / xz -d(解压缩)</li><li>WinRAR - 归档和解归档</li><li>tar - 归档文件<ul><li>归档 - 把几个文件合并成一个文件</li><li>解归档 - 把一个文件分解成几个文件</li></ul></li><li>tar -xvf 文件名 ———- 解归档并查看过程</li><li>tar -cvf 归档文件的名字 需要的所有归档文件 ——– 创建归档</li></ul><hr><ul><li>Python解释器的C实现 - CPython</li><li>Python解释器的Java实现 - Jython</li><li>Python解释器的C#实现 - IronPython</li><li>Python解释器的Python实现 - PyPy</li></ul><hr><h4 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h4><h5 id="Linux系统安装软件"><a href="#Linux系统安装软件" class="headerlink" title="Linux系统安装软件"></a>Linux系统安装软件</h5><ul><li>使用包管理工具进行安装 yun / rpm</li><li>yum search 软件名 —————— 查找软件</li><li>yum install 软件名 软件名 —————– 安装多个软件</li><li>yum -y remove 多个软件名 ————– 卸载文件</li><li>yum -y install ————— 安装过程中遇到问题都是yes</li><li>yum info 软件 —————- 查看软件的相关信息</li><li>yum update （软件名） ————— 更新所有软件</li><li><p>yum list installed ——————- 列出所有安装的软件</p></li><li><p>源代码构建安装</p></li><li>wget 源代码下载地址</li><li>gunzip / xz -d</li><li>tar -xvf</li><li>make &amp;&amp; make install</li><li>export PATH … (.bash_profile) ——– 配置环境变量</li></ul><h6 id="安装Python"><a href="#安装Python" class="headerlink" title="安装Python"></a>安装Python</h6><p>CentOS安装Python3.7</p><p><hr><br>0.gcc –version  ——– 查看是否有gcc软件</p><p>1.下载Python源代码：<br><a href="https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tgz" target="_blank" rel="noopener">https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tgz</a></p><p>2.解压缩：<br>xz -d Python-3.7.1.tgr</p><p>3.解归档：<br>tar -xvf Python-3.7.0.tar</p><p>4.安装底层依赖库：<br> yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel libffi-devel</p><p>5.安装前的配置</p><p>进入Python3.7.0 文件中，执行以下命令</p><p> ./configure –prefix=/usr/local/Python37 –enable-optimizations</p><p>Python37 ———- 创建的文件名</p><p>6.构建安装：<br>make &amp;&amp; make install</p><p>7.配置PATH环境变量(退出后要重新配置)：<br>export PATH=$PATH:/usr/local/Python37/bin</p><p>8.注册软连接（符号链接）：<br>ln -s /usr/local/Python37/bin/python3 /usr/bin/python3</p><ul><li>硬链接 - 不复制数据的备份，文件的引用，只要引用数不为0，文件就不会被删除<ul><li>in 原文件名 链接文件名</li></ul></li><li>软链接 - 相当于是文件的快捷方式，方便操作，如果文件被删除，软链接就会失效<ul><li>ln -s 带完整路径的文件名，链接文件名</li></ul></li><li>rm -rf 文件名 —————– 强制删除软链接</li></ul><p><hr><br>1.安装gcc和依赖库</p><pre><code>yum -y install wget gcc zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel libffi-devel</code></pre><p>2.下载源代码<br><code>https://www.python.org/ftp/python/3.7.1/Python-3.7.1.tgz</code></p><p>3.解压缩/解归档</p><pre><code>gunzip Python-3.7.1.tgrtar -xvf Python-3.7.1.tar</code></pre><p>4.进入cd Python-3.7.1文件中生成构建文件(Makefile)<br>执行</p><pre><code>./configure --prefix=/usr/local/python37 --enable-optimizations</code></pre><p>5.构建和安装<br><code>make &amp;&amp; make install</code></p><p>6.进入~/.bash_profile文件中<br>修改环境变量<br><code>PATH=$PATH:$HOME/bin:usr/local/python37/bin</code></p><hr><h6 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h6><p><strong>Nginx</strong>:是一款轻量级的Web 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器</p><p>1.安装Nginx：<br>yum -y install nginx </p><p>2.启动Nginx：<br>systemctl start nginx / service nginx start(centos6)</p><p>（可以通过IP访问，打开防火墙）<br>IP地址可以确定网络上的一台主机，端口号可以用来区分不同的服务（http - 80）</p><ul><li>/usr/share/nginx/html ———- 服务器内容的存放位置，上传文件(put),下载文件(get)，首页文件index.html,在index.html文件中添加a标签的超链接</li><li>/etc/nginx/nginx.conf ———- 服务器配置内容文件</li></ul><hr><h3 id="安装postgresql数据库"><a href="#安装postgresql数据库" class="headerlink" title="安装postgresql数据库"></a>安装postgresql数据库</h3><ol><li>下载安装包</li></ol><p><code>wget https://ftp.postgresql.org/pub/source/v11.1/postgresql-11.1.tar.gz</code><br>2.5创建postgres用户，并创建安装目录</p><pre><code>useradd Postgresmkdir -p /opt/pgsql/datachown -R postgres:postgres /opt/pgsql </code></pre><ol start="2"><li>解压安装包</li></ol><p><code>tar -zxvf postgresql-11.1.tar.gz</code></p><ol start="3"><li>编译、安装<pre><code>cd postgresql-11.1./configure --prefix=/opt/pgsqlmake &amp; make install</code></pre></li><li>初始化数据库<br><code>`</code>Linu<br>su - postgres</li></ol><p>[postgres@postgresql bin]$cd /opt/pgsql/bin<br>[postgres@postgresql bin]$ ./initdb -D /opt/pgsql/data/<br>The files belonging to this database system will be owned by user “postgres”.<br>This user must also own the server process.</p><p>The database cluster will be initialized with locale “en_US.UTF-8”.<br>The default database encoding has accordingly been set to “UTF8”.<br>The default text search configuration will be set to “english”.</p><p>Data page checksums are disabled.</p><p>fixing permissions on existing directory /opt/pgsql/data … ok<br>creating subdirectories … ok<br>selecting default max_connections … 100<br>selecting default shared_buffers … 128MB<br>selecting dynamic shared memory implementation … posix<br>creating configuration files … ok<br>running bootstrap script … ok<br>performing post-bootstrap initialization … ok<br>syncing data to disk … ok</p><p>WARNING: enabling “trust” authentication for local connections<br>You can change this by editing pg_hba.conf or using the option -A, or<br>–auth-local and –auth-host, the next time you run initdb.</p><p>Success. You can now start the database server using:</p><pre><code>./pg_ctl -D /opt/pgsql/data/ -l logfile start</code></pre><p>[postgres@postgresql bin]$./pg_ctl -D /opt/pgsql/data -l logfile start<br>waiting for server to start…. done<br>server started</p><p>#配置用户环境变量文件.bash.profile增加如下内容<br>export PATH=$PATH:/opt/pgsql/bin</p><p>[postgres@postgresql ~]$ psql<br>psql (11.1)<br>Type “help” for help.</p><p>postgres=#<br>postgres=#<br>postgres=# \du<br>                                   List of roles<br> Role name |                         Attributes                         | Member of<br>———–+————————————————————+———–<br> postgres  | Superuser, Create role, Create DB, Replication, Bypass RLS | {}</p><p>postgres=#</p><pre><code>### 安装9.2版本```Linu系统环境说明[root@slave1 ~]# cat /etc/redhat-release CentOS Linux release 7.4.1708 (Core) [root@slave1 ~]# uname -r3.10.0-693.el7.x86_64[root@slave1 ~]# hostname -I192.168.174.201 192.168.122.1软件版本psql (9.2.23)安装yum install postgresql-serverPostgreSQL安装将不会启用自动启动或自动初始化数据库。为了完成数据库安装，您需要执行以下两个步骤service postgresql initdbchkconfig postgresql onPostgreSQL启动服务service postgresql start查看是否启动netstat -a | grep PGSQ连接数据库切换到数据库用户su - postgres登录数据库psqlpsql 终端可以用\du 或\du+ 查看，也可以查看系统表 select * from pg_roles;[root@slave1 ~]# su - postgres上一次登录：四 4月 12 17:18:28 CST 2018pts/0 上-bash-4.2$ psqlpsql (9.2.23)输入 &quot;help&quot; 来获取帮助信息.# 查看信息postgres=# \du                        角色列表 角色名称 |               属性                | 成员属于 ----------+-----------------------------------+---------- postgres | 超级用户, 建立角色, 建立 DB, 复制 | {}postgres=# 修改用户postgres的密码alter role postgres with password &#39;postgres&#39;退出\qexit修改配置修改监听地址vi /var/lib/pgsql/data/postgresql.conf#listen_addresses=&#39;localhost&#39;#将上面这行改成如下listen_addresses=&#39;*&#39;设置所有网段IP可以访问vi /var/lib/pgsql/data/pg_hba.conf# IPv4 remote address connections:host    all         all         0.0.0.0/0                 trust解决psql: 致命错误: 用户 &quot;postgres&quot; Ident 认证失败#vi /var/lib/pgsql/data/pg_hba.conf这个配置文件中的认证 METHOD的ident修改为trust，可以实现用账户和密码来访问数据库验证service postgresql restartsu - postgrespsql -h 127.0.0.1 -U postgres -d postgres -W</code></pre><hr><h3 id="安装禅道"><a href="#安装禅道" class="headerlink" title="安装禅道"></a>安装禅道</h3><pre><code>1. 下载禅道wget http://dl.cnezsoft.com/zentao/11.2/ZenTaoPMS.11.2.stable.zbox_64.tar.gz2.解压gunzip ZenTaoPMS.11.2.stable.zbox_64.tar.gztar -xvf ZenTaoPMS.11.2.stable.zbox_64.tar -C /opt3.启动/opt/zbox/zbox start -ap 9090 -mp 6371</code></pre><hr><h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><pre><code class="Linux">yum install docker-io --- 安装systemctl start docker --- 启动docker images --------- 查看镜像docker pull mysql:5.7 --- 安装镜像mysqldocker pull redis ----- 安装redis镜像</code></pre><hr><p>连接远程用户端：<code>sftp root@Ip</code></p><h5 id="sftp常用命令"><a href="#sftp常用命令" class="headerlink" title="sftp常用命令"></a>sftp常用命令</h5><ul><li>quit / exit / bye — 退出sftp</li><li>cd / lcd —– 切换远端工作目录/切换本地工作目录</li><li>pwd / lpwd —- 查看远端工作目录/查看本地工作目录</li><li>ls / lls —- 查看远端目录内容/查看本地目录内容</li><li>mkdir / lmkdir —- 创建远端目录/创建本地目录</li><li>给其它服务器拷贝文件 <ul><li>一个用户操作另外两个用户的文件：<ul><li>scp  用户名@IP：/绝对路径/文件名 用户名@IP：/绝对路径/文件命名</li></ul></li><li>从本地到远程用户：<br>scp 文件名 用户名@IP：/绝对路径/文件命名</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-createElement</title>
      <link href="/2018/04/07/%E5%89%8D%E7%AB%AF/JavaScript-createElement/"/>
      <url>/2018/04/07/%E5%89%8D%E7%AB%AF/JavaScript-createElement/</url>
      
        <content type="html"><![CDATA[<h3 id="practice-one"><a href="#practice-one" class="headerlink" title="practice-one"></a>practice-one</h3><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html&gt;    &lt;head&gt;        &lt;meta charset=&quot;UTF-8&quot;&gt;        &lt;title&gt;&lt;/title&gt;        &lt;style&gt;            #data {                border-collapse: collapse;            }            #data td, #data th {                width: 120px;                height: 40px;                text-align: center;                border: 1px solid black;            }            #buttons {                margin: 10px 0;            }        &lt;/style&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;div id=&quot;big&quot;&gt;        &lt;table id=&quot;data&quot;&gt;            &lt;caption&gt;数据统计表&lt;/caption&gt;            &lt;tr&gt;                &lt;th&gt;姓名&lt;/th&gt;                &lt;th&gt;年龄&lt;/th&gt;                &lt;th&gt;性别&lt;/th&gt;                &lt;th&gt;身高&lt;/th&gt;                &lt;th&gt;体重&lt;/th&gt;            &lt;/tr&gt;            &lt;tr&gt;                &lt;td&gt;Item1&lt;/td&gt;                &lt;td&gt;Item2&lt;/td&gt;                &lt;td&gt;Item3&lt;/td&gt;                &lt;td&gt;Item4&lt;/td&gt;                &lt;td&gt;Item5&lt;/td&gt;            &lt;/tr&gt;            &lt;tr&gt;                &lt;td&gt;Item1&lt;/td&gt;                &lt;td&gt;Item2&lt;/td&gt;                &lt;td&gt;Item3&lt;/td&gt;                &lt;td&gt;Item4&lt;/td&gt;                &lt;td&gt;Item5&lt;/td&gt;            &lt;/tr&gt;            &lt;tr&gt;                &lt;td&gt;Item1&lt;/td&gt;                &lt;td&gt;Item2&lt;/td&gt;                &lt;td&gt;Item3&lt;/td&gt;                &lt;td&gt;Item4&lt;/td&gt;                &lt;td&gt;Item5&lt;/td&gt;            &lt;/tr&gt;            &lt;tr&gt;                &lt;td&gt;Item1&lt;/td&gt;                &lt;td&gt;Item2&lt;/td&gt;                &lt;td&gt;Item3&lt;/td&gt;                &lt;td&gt;Item4&lt;/td&gt;                &lt;td&gt;Item5&lt;/td&gt;            &lt;/tr&gt;            &lt;tr&gt;                &lt;td&gt;Item1&lt;/td&gt;                &lt;td&gt;Item2&lt;/td&gt;                &lt;td&gt;&lt;a&gt;Item3&lt;/a&gt;&lt;/td&gt;                &lt;td&gt;Item4&lt;/td&gt;                &lt;td&gt;Item5&lt;/td&gt;            &lt;/tr&gt;            &lt;tr&gt;                &lt;td&gt;Item1&lt;/td&gt;                &lt;td&gt;Item2&lt;/td&gt;                &lt;td&gt;Item3&lt;/td&gt;                &lt;td&gt;Item4&lt;/td&gt;                &lt;td&gt;&lt;a&gt;Item5&lt;/a&gt;&lt;/td&gt;            &lt;/tr&gt;        &lt;/table&gt;        &lt;/div&gt;        &lt;div id=&quot;buttons&quot;&gt;            &lt;button id=&quot;pretty&quot;&gt;美化表格&lt;/button&gt;            &lt;button id=&quot;clear&quot;&gt;清除数据&lt;/button&gt;            &lt;button id=&quot;remove&quot;&gt;删单元格&lt;/button&gt;            &lt;button id=&quot;add&quot;&gt;加单元格&lt;/button&gt;            &lt;button id=&quot;hide&quot;&gt;隐藏表格&lt;/button&gt;        &lt;/div&gt;        &lt;script&gt;            // 美化表格            var prettyForm = document.getElementById(&quot;pretty&quot;);            prettyForm.addEventListener(&quot;click&quot;, function() {                var tr = document.getElementsByTagName(&quot;tr&quot;);                for (var i = 1; i &lt; tr.length; i += 1) {                    if (i % 2) {                        tr[i].style.backgroundColor = &quot;cyan&quot;;                    } else {                        tr[i].style.backgroundColor = &quot;red&quot;;                    };                }            });            // 清除数据            var clearForm = document.getElementById(&quot;clear&quot;);            clearForm.addEventListener(&quot;click&quot;, function() {                var td = document.getElementsByTagName(&quot;td&quot;);                for (var i = 0; i &lt; td.length; i += 1) {                    td[i].textContent = &quot;&quot;;                            }            });            // 删除单元格            var removeForm = document.getElementById(&quot;remove&quot;);            removeForm.addEventListener(&quot;click&quot;, function() {                var tr = document.getElementsByTagName(&quot;tr&quot;);                if (tr.length &gt; 1) {                    tr[tr.length-1].remove();                }            });            // 添加单元格//            var addForm = document.getElementById(&quot;add&quot;);//            addForm.addEventListener(&quot;click&quot;, function() {//                var td = document.querySelectorAll(&quot;tr&gt;td&quot;);//                td.parentNode.appendChild(td);//            });            // 隐藏表格            var hideForm = document.getElementById(&quot;hide&quot;);            var form = document.getElementById(&quot;big&quot;);            hideForm.addEventListener(&quot;click&quot;, function(event) {                var buto = event.target;                if (buto.isHidden) {                    form.style.display = &quot;&quot;;                    buto.isHidden = false;                    buto.textContent = &quot;显示表格&quot;;                } else {                    form.style.display = &quot;none&quot;;                    buto.isHidden = true;                    buto.textContent = &quot;隐藏表格&quot;;                }            });        &lt;/script&gt;    &lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="practice-two"><a href="#practice-two" class="headerlink" title="practice-two"></a>practice-two</h3><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html&gt;    &lt;head&gt;        &lt;meta charset=&quot;utf-8&quot; /&gt;        &lt;title&gt;&lt;/title&gt;        &lt;style&gt;            * {                margin: 0px;                padding: 0px;            }            #box {                /*下面表示上下10px，左右平分*/                /*margin: 10px auto;*/                margin-left: 400px;                margin-top: 100px;                width: 500px;                height: 300px;                background-color: aquamarine;                /*hidden ---- 隐藏*/                /*scroll ---- 滚动条*/                overflow: hidden;            }            button{                position: relative;                margin-left: 40px;                left: 500px;                top: 50px;                width: 100px;                height: 50px;                background-color: red;                font-size: 20px;                cursor: pointer;                outline: none;                border: none;            }            .small {                width: 50px;                height: 50px;                float: left;            }        &lt;/style&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;div id=&quot;box&quot;&gt;        &lt;/div&gt;        &lt;div&gt;            &lt;button id=&quot;but1&quot;&gt;添加&lt;/button&gt;            &lt;button id=&quot;but2&quot;&gt;闪烁&lt;/button&gt;        &lt;/div&gt;        &lt;script&gt;            // 设置随机色            function randomColor() {                var r = parseInt(Math.random() * 256);                var g = parseInt(Math.random() * 256);                var b = parseInt(Math.random() * 256);                return &quot;rgb(&quot; + r + &quot;,&quot; + g + &quot;,&quot; + b + &quot;)&quot;    ;            }            function addBox() {                // 创建新的div                var div = document.createElement(&quot;div&quot;);                // 调用style中的类选择器的样式                div.className = &quot;small&quot;;                div.style.backgroundColor = randomColor();                // 添加到前面                Box.insertBefore(div, Box.firstChild);                // 添加到后面//                Box.appendChild(div);                }            function blinkBox() {                if (flag) {                    // 绑定一个计时器                    timerId = setInterval(function() {                        var adv = document.querySelectorAll(&quot;#box&gt;div&quot;);                        for (var i = 0; i &lt; adv.length; i += 1) {                            adv[i].style.backgroundColor = randomColor();                        }                    }, 50);                    // blinkButton.textContent = &quot;暂停&quot;;                    // flag = !flag;                } else {                    clearInterval(timerId);                    // flag = !flag;                    // blinkButton.textContent = &quot;闪烁&quot;;                };                blinkButton.textContent = flag?&quot;暂停&quot;:&quot;闪烁&quot;;                flag = !flag;            }            var flag = true;            var addButton = document.getElementById(&quot;but1&quot;);            var Box = document.getElementById(&quot;box&quot;);            addButton.addEventListener(&quot;click&quot;, addBox);            var blinkButton = document.getElementById(&quot;but2&quot;);            blinkButton.addEventListener(&quot;click&quot;, blinkBox);        &lt;/script&gt;    &lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="practice-three"><a href="#practice-three" class="headerlink" title="practice-three"></a>practice-three</h3><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html&gt;    &lt;head&gt;        &lt;meta charset=&quot;UTF-8&quot;&gt;        &lt;title&gt;&lt;/title&gt;        &lt;style&gt;            * {                margin: 0;                padding: 0;            }            #container {                margin: 20px 50px;            }            #fruits li {                list-style: none;                width: 200px;                height: 50px;                font-size: 20px;                line-height: 50px;                background-color: cadetblue;                color: white;                text-align: center;                margin: 2px 0;            }            #fruits&gt;li&gt;a {                float: right;                text-decoration: none;                color: white;                position: relative;                right: 5px;            }            #fruits~input {                border: none;                outline: none;                font-size: 18px;            }            #fruits~input[type=text] {                border-bottom: 1px solid darkgray;                width: 200px;                height: 50px;                text-align: center;            }            #fruits~input[type=button] {                width: 80px;                height: 30px;                background-color: coral;                color: white;                vertical-align: bottom;                cursor: pointer;            }        &lt;/style&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;div id=&quot;container&quot;&gt;            &lt;ul id=&quot;fruits&quot;&gt;                &lt;li&gt;苹果&lt;a href=&quot;javascript:void(0)&quot;&gt;×&lt;/a&gt;&lt;/li&gt;                &lt;li&gt;香蕉&lt;a href=&quot;javascript:void(0)&quot;&gt;×&lt;/a&gt;&lt;/li&gt;                &lt;li&gt;火龙果&lt;a href=&quot;javascript:void(0)&quot;&gt;×&lt;/a&gt;&lt;/li&gt;                &lt;li&gt;西瓜&lt;a href=&quot;javascript:void(0)&quot;&gt;×&lt;/a&gt;&lt;/li&gt;            &lt;/ul&gt;            &lt;input type=&quot;text&quot; name=&quot;fruit&quot;&gt;            &lt;input id=&quot;ok&quot; type=&quot;button&quot; value=&quot;确定&quot;&gt;        &lt;/div&gt;        &lt;script src=&quot;js/ad.js&quot;&gt;&lt;/script&gt;        &lt;script&gt;            //   解决浏览器兼容的方法//            String.prototype.trim = String.prototype.trim ||//            function(){//                this;    //  this相当于Python中的self//                return &quot;&quot;;//            };            function deleteItem(evt){                evt = evt || window.event;                evt.target = evt.target || evt.srcElement;                var li = evt.target.parentNode;                    // remove删除节点（元素）                li.parentNode.removeChild(li);            }            var delAnchors = document.querySelectorAll(&quot;#fruits a&quot;);            //   给标签绑定事件            for (var i = 0;i &lt; delAnchors.length;i += 1){                bind(delAnchors[i],&quot;click&quot;,deleteItem);            }            var okBtn = document.getElementById(&quot;ok&quot;)            var fruitInput = document.querySelector(&quot;#container&gt;input[type=text]&quot;)            var fruitsUl = document.getElementById(&quot;fruits&quot;);            bind(okBtn,&quot;click&quot;,function(){                var fruitName = fruitInput.value.trim();                if (fruitName.length &gt; 0){                    // 创建新节点，创建新标签                    var li = document.createElement(&quot;li&quot;)                    li.innerHTML = fruitName;                    var a = document.createElement(&quot;a&quot;)                    a.innerHTML = &quot;x&quot;                    a.href = &quot;javascript:void(0)&quot;                    bind(a,&quot;click&quot;,deleteItem);                    //  appendChild追加，添加新的元素                    li.appendChild(a);                    // fruitsUl.appendChild(li);                    //  insertBefore  在某一个元素的前面添加节点（元素）                    fruitsUl.insertBefore(li,fruitsUl.firstChild)                }            })        &lt;/script&gt;    &lt;/body&gt;&lt;/html&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
            <tag> DOC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-event</title>
      <link href="/2018/04/06/%E5%89%8D%E7%AB%AF/JavaScript-event/"/>
      <url>/2018/04/06/%E5%89%8D%E7%AB%AF/JavaScript-event/</url>
      
        <content type="html"><![CDATA[<h3 id="获取页面中的单个标签-元素的方法"><a href="#获取页面中的单个标签-元素的方法" class="headerlink" title="获取页面中的单个标签/元素的方法"></a>获取页面中的单个标签/元素的方法</h3><ul><li>getElementsByClassName()    获取同一类名的所有标签</li><li>querySelector()     查询指定选择器获取指定选择器的单个标签</li><li>querySelectorAll()    查询指定选择器获取指定选择器的所有标签</li><li>getElementById()        获取指定Id的标签</li><li>getElementsByTagName()    获取指定标签名的列表</li></ul><h3 id="元素访问节点的方法"><a href="#元素访问节点的方法" class="headerlink" title="元素访问节点的方法"></a>元素访问节点的方法</h3><ul><li>children    元素访问子节点</li><li>parentNode    元素访问父节点</li><li>previousSibling    元素访问上一个兄弟节点</li><li>nextSibling    元素访问下一个兄弟节点</li></ul><h3 id="绑定事件"><a href="#绑定事件" class="headerlink" title="绑定事件"></a>绑定事件</h3><h5 id="实例1"><a href="#实例1" class="headerlink" title="实例1"></a>实例1</h5><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html&gt;    &lt;head&gt;        &lt;meta charset=&quot;UTF-8&quot;&gt;        &lt;title&gt;&lt;/title&gt;        &lt;style type=&quot;text/css&quot;&gt;            * {                margin: 0px;                padding: 0px;            }            div {                margin-top: 100px;                text-align: center;            }        &lt;/style&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;div&gt;            &lt;img id=&quot;Top&quot; src=&quot;img/picture-1.jpg&quot; alt=&quot;&quot; /&gt;        &lt;/div&gt;        &lt;div id=&quot;foot&quot;&gt;            &lt;img src=&quot;img/thumb-1.jpg&quot; alt=&quot;&quot; /&gt;            &lt;img src=&quot;img/thumb-2.jpg&quot; alt=&quot;&quot; /&gt;            &lt;img src=&quot;img/thumb-3.jpg&quot; alt=&quot;&quot; /&gt;        &lt;/div&gt;        &lt;script type=&quot;text/javascript&quot;&gt;            var index = 0;            var ico = document.querySelectorAll(&quot;#foot&gt;img&quot;);            for (var i = 0;i &lt; ico.length; i += 1) {                // 给每张图片设置一个属性                ico[i].index = i;                // 绑定一个点击事件                ico[i].addEventListener(&quot;click&quot;, function(event) {                    // 获取点击事件的事件源                    var img = event.target;                    // 点击之后要做的事情                    var pictur = document.getElementById(&quot;Top&quot;);                    // 更改图片的SRC属性                    pictur.src = &quot;img/picture-&quot; + (img.index + 1) + &quot;.jpg&quot;;                });            }        &lt;/script&gt;    &lt;/body&gt;&lt;/html&gt;</code></pre><h5 id="实例2"><a href="#实例2" class="headerlink" title="实例2"></a>实例2</h5><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html&gt;    &lt;head&gt;        &lt;meta charset=&quot;UTF-8&quot;&gt;        &lt;title&gt;&lt;/title&gt;        &lt;style type=&quot;text/css&quot;&gt;            * {                margin: 0px;                padding: 0px;            }            #but&gt;button {                width: 200px;                height: 100px;                font: 22px/30px arial;                background-color: red;                color: white;                outline: none;                border: none;            }        &lt;/style&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;div id=&quot;but&quot;&gt;            &lt;button&gt;&lt;input type=&quot;checkbox&quot;&gt;0&lt;/button&gt;            &lt;button&gt;&lt;input type=&quot;checkbox&quot;&gt;1&lt;/button&gt;            &lt;button&gt;&lt;input type=&quot;checkbox&quot;&gt;2&lt;/button&gt;            &lt;button&gt;&lt;input type=&quot;checkbox&quot;&gt;3&lt;/button&gt;        &lt;/div&gt;        &lt;script&gt;            var buts = document.querySelectorAll(&quot;#but&gt;button&quot;);            for (var i = 0; i &lt; buts.length; i += 1) {                buts[i].firstChild.addEventListener(&quot;click&quot;, function(event) {                    var checkbox = event.target || event.srcElement;                    if (checkbox.checked) {                        checkbox.parentNode.style.backgroundColor = &quot;blue&quot;;                    } else {                        checkbox.parentNode.style.backgroundColor = &quot;red&quot;;                    }                    event.stopPropagation();                });                buts[i].addEventListener(&quot;click&quot;, function(event) {                    // 事件.target     选中事件源                    var button = event.target || event.srcElement;    // 验证浏览器的兼容性问题，通过短路或运算解决                    var checkbox = button.firstChild;                    checkbox.checked = !checkbox.checked;//                    window.alert(&quot;你选中了&quot; + button.textContent);                    if (checkbox.checked) {                        button.style.backgroundColor = &quot;blue&quot;;                    } else {                        button.style.backgroundColor = &quot;red&quot;;                    }                });            }        &lt;/script&gt;    &lt;/body&gt;&lt;/html&gt;</code></pre><h5 id="实例3"><a href="#实例3" class="headerlink" title="实例3"></a>实例3</h5><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html&gt;    &lt;head&gt;        &lt;meta charset=&quot;UTF-8&quot;&gt;        &lt;title&gt;&lt;/title&gt;        &lt;style type=&quot;text/css&quot;&gt;            *{                margin: 0px;                padding: 0px;            }            #div0{                margin-left: 600px;                margin-top: 100px;            }            #div1{                width: 300px;                height: 300px;                background-color: red;                /*position: absolute;*/            }            #div2{                width: 200px;                height: 200px;                background-color: blue;                /*position: absolute;                left: 50px;                top: 50px;*/            }            #div3{                width: 100px;                height: 100px;                /*position: absolute;                top: 50px;                left: 50px;*/                background-color: cyan;            }            #div2, #div3{                position: relative;                top: 50px;                left: 50px;            }        &lt;/style&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;div id=&quot;div0&quot;&gt;            &lt;div id=&quot;div1&quot;&gt;                &lt;div id=&quot;div2&quot;&gt;                    &lt;div id=&quot;div3&quot;&gt;&lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;        &lt;/div&gt;        &lt;script type=&quot;text/javascript&quot;&gt;            var one = document.querySelector(&quot;#div1&quot;);            var two = document.querySelector(&quot;#div2&quot;);            var three = document.querySelector(&quot;#div3&quot;);            // addEventListener方法的第一个参数是事件名            // 第二个参数是事件发生时需要执行的回调函数            // 第三个参数是一个布尔值            //    如果是True,表示事件捕获 ----- 从外层向内传递事件            //    如果是False,表示事件捕获 ----- 从内层向外传递事件            // 一般选择事件捕获            // 如果想阻止事件的传播行为可以调用事件对象的stopPropagation方法            one.addEventListener(&quot;click&quot;, function() {                window.alert(&quot;I am one!&quot;);            });            two.addEventListener(&quot;click&quot;, function() {                window.alert(&quot;I am two!&quot;);            });            three.addEventListener(&quot;click&quot;, function() {                window.alert(&quot;I am three!&quot;);                event.stopPropagation();            });            // 事件回调函数中的第一个参数是事件对象（封装了和事件相关的信息）            document.addEventListener(&quot;click&quot;, function(event) {                window.alert(&quot;I am body!&quot;);            });        &lt;/script&gt;    &lt;/body&gt;&lt;/html&gt;</code></pre><h5 id="实例4"><a href="#实例4" class="headerlink" title="实例4"></a>实例4</h5><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html&gt;    &lt;head&gt;        &lt;meta charset=&quot;UTF-8&quot;&gt;        &lt;title&gt;&lt;/title&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;button id=&quot;ok&quot;&gt;确定&lt;/button&gt;        &lt;script&gt;            var okButton = document.querySelector(&quot;#ok&quot;);            // 给okButton绑定click事件的回调函数            function closeWindow() {                if (window.confirm(&quot;Close the window?&quot;)) {                    window.close();                }             }            function helloWindow() {                window.alert(&quot;hello, world!&quot;);                okButton.removeEventListener()(&quot;click&quot;, closeWindow);            }            // 当你知道事件什么时候发生,但是你不知道这个事件什么时候发生            // 在这种情况下通常处理方式都是绑定一个事件回调函数            // closeWindow以及下面的匿名函数都属于事件回调函数                    okButton.addEventListener(&quot;click&quot;, helloWindow);            okButton.addEventListener(&quot;click&quot;, closeWindow);            // 按钮只能点一次的效果,并且考虑兼容性//            if (okButton.addEventListener) {//                okButton.addEventListener(&quot;click&quot;, function() {//                    window.alert(&quot;hello,world!&quot;);//                    okButton.removeEventListener(&quot;click&quot;, arguments.callee);//                });//            } else {//                okButton.addEventListener(&quot;onclick&quot;, function() {//                    window.alert(&quot;hello,world!&quot;);//                    okButton.removeEventListener(&quot;onclick&quot;, arguments.callee);//                });//            }        &lt;/script&gt;    &lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h3><pre><code class="HTML">&lt;!DOCTYPE html&gt;&lt;html&gt;    &lt;head&gt;        &lt;meta charset=&quot;utf-8&quot; /&gt;        &lt;title&gt;&lt;/title&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;h3&gt;&lt;span id=&quot;counter&quot;&gt;5&lt;/span&gt;s之后自动跳转到百度&lt;/h3&gt;        &lt;script type=&quot;text/javascript&quot;&gt;            var count = 5;            var span = document.getElementById(&quot;counter&quot;)//            function delay() {//                count -= 1;//                if (count == 0) {//                    window.location.href = &quot;https://www.baidu.com&quot;;//                } else {//                    span.textContent = count;//                    window.setTimeout(delay, 1000);//                }//            }//            window.setTimeout(delay, 1000);            window.setTimeout(function() {                count -= 1;                if (count == 0) {                    window.location.href = &quot; &quot;;                } else {                    span.textContent = count;                    //arguments是函数中的隐含对象                    //通过arguments[0],ageuments[1],可以获得函数的参数                    //arguments.callee 伪数组,可以拿到正在被调用的函数                    window.setTimeout(arguments.callee, 1000);                }            }, 1000);        &lt;/script&gt;    &lt;/body&gt;&lt;/html&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tag </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript_one</title>
      <link href="/2018/04/02/%E5%89%8D%E7%AB%AF/JavaScript-one/"/>
      <url>/2018/04/02/%E5%89%8D%E7%AB%AF/JavaScript-one/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><p>行为样式表，console.log（内容）在控制台打印内容</p><p>注意：js中修改css样式表通过xxx.style.属性，其中属性如果通过连接符连接改成大写；js可以临时添加属性，xxx.新属性，和python一样是动态弱类型语言，都可以添加属性，删除属性</p><pre><code class="python">evt.target.index = i</code></pre><p>index 就是一个新属性</p><h3 id="JS介绍"><a href="#JS介绍" class="headerlink" title="JS介绍"></a>JS介绍</h3><p>1.专门用来处理网页中的行为的脚本语言，也是 web 标准中的行为标准<br>2.位置</p><ul><li>内联的 js: 写在标签事件相关属性中</li><li>内部的 js：写在 script 标签中，可以放在任何地方，但是一般放在 head 或者 body 中</li><li>外部的 js：写在外部的 js 文件中（后缀是 .js 的文件），通过 script 标签中的 src 属性，跟上 js 的地址，导入 js </li></ul><p>3.js 作用： </p><ul><li><p>修改标签中的内容</p></li><li><p>修改标签样式</p></li><li><p>插入 html 代码</p></li></ul><p>4.注释：<code>/* 注释内容 */</code></p><p>5.标识符：</p><ul><li><p>用来命名的（给变量、函数命名、对象命名）</p></li><li><p>标识符由字符、数字、下划线和$符组成，数字不开头</p></li><li><p>大小写敏感</p></li></ul><h4 id="JS基础语法"><a href="#JS基础语法" class="headerlink" title="JS基础语法"></a>JS基础语法</h4><p>1.数据类型</p><ul><li>常用类型:Number(数字-包含所有的数字)、Boolean(布尔类型)、String(字符串)、Array(数组)、Object(对象)…..<ul><li>注意：js 中没有元祖和集合</li></ul></li><li>b. 常用的特殊的值：NaN (表示不存在的数字),null(空，一般用来清空变量中的内容),undefined(变量没有赋值的时候，默认是 undefined)</li></ul><p>2.字面量：</p><ul><li>Number 字面量:所有的数字(支持科学计数法, 不支持复数)</li><li>Boolean 字面量:只有 true 和 false</li><li>String 字面量:用单引号或者双引号引起来的字符集, 支持转义字符(和 python 一样)</li><li>Array 字面量：js 中数组就相当于 python 的列表</li><li>Object 对象字面量: 相当于 python 中的字典+对象<ul><li>注意：key 相当于属性，value 相当于属性的值</li></ul></li><li>typeof：查看数据类型</li><li>js 中的语句：<ul><li>一条语句结束后可以写分号，也可以不写。如果一行写多条语句就必须写分号</li><li>js 中没有缩进语法的要求，需要使用代码的时候使用{}</li></ul></li></ul><h4 id="JS变量"><a href="#JS变量" class="headerlink" title="JS变量"></a>JS变量</h4><p><strong>js中变量的声明</strong></p><ul><li><p>语法：var 变量名 或者 var 变量名=初值</p></li><li><p>说明：</p><ul><li><p>var: 是 js 中声明变量的关键字</p></li><li><p>变量名: 标识符，不能是 js 中的关键字; 驼峰式命名(第一个单词的首字母小写，后边每个单词首字母大写)，见名知义</p></li><li><p>初值：声明的时候可以赋初值，也可以不赋</p></li><li><p>可以同时声明多个变量</p><pre><code class="python">var age; var namevar age1, name1, studyIdvar age2=10, name2, studyId2</code></pre></li><li><p>一个变量可以存储多种类型的值<br>注意：变量一定要先声明再使用</p></li></ul></li></ul><h4 id="JS运算"><a href="#JS运算" class="headerlink" title="JS运算"></a>JS运算</h4><ul><li><p>JS中的正则表达式的表示：<strong><code>/^正则表达式$/</code></strong></p></li><li><p>js 中的运算符包含：数学运算符、比较运算符、逻辑运算符、赋值运算符、三目运算符、（位运算）</p></li></ul><p>1.数学运算符:<code>+、-、*、/、%、**(js7中才有的)、++、--，其中：+、-、*、/、%、**和 python 中的功能一模一样</code></p><ul><li><p>注意：js 中没有整除对应的运算符，但是多了++和–</p><ul><li>++(自加)：自加1<ul><li>语法：变量++, ++变量 —-&gt; 让变量的值加1， 相当于: 变量 += 1</li></ul></li><li>–(自减1操作)<ul><li>语法：变量–, –变量   —-&gt; 让变量的值减一,  相当于: 变量 -= 1</li></ul></li></ul></li><li><p>赋值的时候，++/–写在变量的后面，是先赋值，然后再让变量的值加1/减1。++/–写变量的前面，就先加1/减1，然后再赋值</p><pre><code class="python">var a1=10,a2=10, b, cb = a1++   // b = a1, a1 += 1  --- b=10, a1=11c = ++a2   // a2 += 1, c = a2  --- a2=11, c=11</code></pre></li></ul><p>2.比较运算符:&gt;,&lt;,==,!=,&gt;=, &lt;=, ===, !==, &gt;==, &lt;==</p><ul><li>结果都是布尔值</li><li>相等(==):只判断值是否相等</li><li>完全相等(===):判断值和类型是否相等</li></ul><p>3.逻辑运算符：&amp;&amp;(与)，||(或), !(非)<br><strong>js 逻辑运算符除了形式，其他的和 python 一样</strong></p><p>4.赋值运算符：<code>=， += ，-=， *=， /=， %= 等, 和 python 一样</code></p><p>5.三目运算符: ?:</p><ul><li>语法：表达式1?值1:值2  —&gt; 判断表达式1的值是否为真，为真整个运算的结果就是值1，否则是值2</li></ul><h2 id="三元条件运算符"><a href="#三元条件运算符" class="headerlink" title="三元条件运算符"></a>三元条件运算符</h2><p><a href="https://baike.baidu.com/item/%E4%B8%89%E5%85%83%E8%BF%90%E7%AE%97%E7%AC%A6/1394210?fr=aladdin" target="_blank" rel="noopener">参考网址</a></p><p>6.位运算（都是二元运算符）：&amp;, |, ^, ~, &gt;&gt;, &lt;&lt;</p><ul><li><p>&amp;: 将符号左右两边的值转换成二进制，操作位同取1，异取0</p></li><li><p>| ：将符号左右两边的值转换成二进制，遇1取1，没有取0</p></li><li><p>^: 将符号左右两边的值转换成二进制，遇1取1，遇同取0</p></li><li><p>~：符号取反，二进制最后一位取反</p></li><li><p>&lt;&lt;左移: 1&lt;&lt;3 表示 1*(2^3)</p></li><li><p><em>&gt;&gt;</em>右移: 1&gt;&gt;3 表示 1//(2^3)</p><pre><code class="python">&lt;&lt;运算符使指定值的二进制所有位都左移规定的次数，对于其移动规则只需记住丢弃最高位，0补最低位即按二进制形式把所有的数字向左移动对应的位数，高位移出(舍弃)，低位的空位补零。&gt;&gt;运算符使指定值的二进制所有位都右移规定的次数，对于其移动规则只需记住符号位不变，左边补上符号位即按二进制形式把所有的数字向右移动对应的位数，低位移出(舍弃)，高位的空位补符号位，即正数补零，负数补1。</code></pre><p><img src="/2018/04/02/前端/JavaScript-one/位运算.png" alt="位运算"></p></li></ul><p>7.运算顺序：和 python 基本一致(数学&gt;比较&gt;逻辑&gt;赋值)，也可以通过加括号来改变运算顺序</p><h4 id="JS分支结构"><a href="#JS分支结构" class="headerlink" title="JS分支结构"></a>JS分支结构</h4><p><strong>1.if语句</strong></p><pre><code class="python"> a.if结构：   if(条件语句)  {       代码段  } *执行过程: 先判断条件语句是否为true，为true就执行代码段b.if-else结构： if(条件语句){     代码段1 }else{     代码段2 } c.if-else if-else: (这儿的 else if 相当于 python 中的 elif) if(条件语句1){     代码段1 }else if(条件语句2){     代码段2 }else{     代码段3 }</code></pre><p><strong>2.switch</strong></p><pre><code class="python">a.结构: switch(表达式){     case 值1:{         代码段1     }     case 值2:{         代码段2     }     ...     default:{         代码段3     } }b.执行过程:先计算表达式的值，然后再用这个值去和后边case关键字后面的值一一对比，看是否相等。         找到第一个和表达式的值相等的case,然后将这个case作为入口，一次执行后边所有的代码，         直到遇到break或者switch结束。如果没有找到和表达式的值相等的case就执行default后面的代码c.注意:default可有可无，case可以有若干个</code></pre><h4 id="JS循环结构"><a href="#JS循环结构" class="headerlink" title="JS循环结构"></a>JS循环结构</h4><p>1.for-in循环:(和python的for循环一样)</p><pre><code class="python"> for(var 变量 in 序列) {     循环体 }执行过程: 依次从序列中取元素对应的索引(下标)，取完为止，每取一个执行一次循环体取值：遍历字符串，取的是字符对应的下标；遍历列表，取的是元素对应的下标；遍历对象，取的是属性名（key）</code></pre><p>2.for循环:(和C语言的for循环一样)</p><pre><code class="python"> for(表达式1；表达式2；表达式3){     循环体 }执行过程:先执行表达式1，然后再判断表达式2的结果是否为true,如果为true，就执行循环体，执行完循环体再执行        表达式3；然后再判断表达式2的结果是否为true，如果为true，又执行循环体，执行完循环体再执行表达式       3；一直循环，直到表达式2的结果为false，然后跳出循环</code></pre><p>举例：</p><pre><code class="python">计算1到100的和for (var i = 1, sum=0; i&lt;=100; i++) {    sum += i}console.log(sum)var sum = 0var i = 1for (;i&lt;=100;) {    sum += i    i++}console.log(sum)  </code></pre><p>3.while循环:(和python一样)</p><pre><code class="python"> while(条件语句){     循环体 }</code></pre><p>4.do-while：</p><pre><code class="python">do{    循环体}while(条件语句)执行：先执行一次循环体，然后再判断条件语句是否为true,为true又执行循环体，依次类推，直到条件语句为false，循环就结束</code></pre><h4 id="JS函数"><a href="#JS函数" class="headerlink" title="JS函数"></a>JS函数</h4><p>1.函数的声明</p><pre><code class="python">function 函数名(参数列表){    函数体}说明：a.function: 是js中声明函数的关键字b.函数名: 标识符，不能是关键字;见名知义，驼峰式命名c.参数列表: 参数名1,参数名2...; 形参；将数据从函数的外面传到函数中d.函数体：实现函数的功能注意：函数体只有在函数调用的时候才执行</code></pre><p>2.函数的调用：和python一样</p><ul><li>函数调用的时候要保证每个参数都有值！</li><li>支持位置参数、参数设置默认值(js6)</li><li>注意:js中不支持不定长参数、关键字参数</li></ul><p>3.函数的返回值</p><ul><li>js中函数如果没有遇到return,函数的返回值是undefined</li><li>注意：js中不能同时返回多个值（有元祖语法的语言才支持多个返回值）</li></ul><p>4.js中，函数也可以作为变量</p><p>5.另外一种声明函数的方式</p><pre><code class="python">var 变量 = function(参数列表){    函数体}</code></pre><h4 id="JS数据类型"><a href="#JS数据类型" class="headerlink" title="JS数据类型"></a>JS数据类型</h4><p><strong>new 类型名(值) —&gt; 可以将其他的类型的数据转换成相应类型的值</strong><br>1.数字类型(Number)：所有的数字对应的类型不能转换的结果是NaN</p><pre><code class="python">console.log(typeof(10))var num1 = 100var num2 = new Number(false)console.log(num2,num1)</code></pre><p>2.布尔(Boolean): true和fasle</p><ul><li>数字-&gt;布尔： NaN和0是false, 其他的都是true</li><li>字符串-&gt;布尔: 空串是false，其他的是true</li><li>总结:所有为0为空的转换成布尔是false，NaN,null和undefined都是false;其他的都是true</li></ul><pre><code class="python">var bool = new Boolean(undefined)console.log(bool)</code></pre><p>3.字符串(String):unicode编码</p><ul><li>a.获取单个字符：通过字符串[下标]</li><li>b.支持转义字符</li><li>c.注意：<ul><li>js中的下标支持0到长 度-1，不支持负值</li><li>js中不支持切片</li></ul></li></ul><pre><code class="python">var str1 = &#39;abcde&#39;console.log(str1[3])</code></pre><ul><li>d.长度: 字符串.length</li></ul><pre><code class="python">console.log(str1.length)</code></pre><ul><li>e.运算符：比较和+<ul><li>比较和python一样</li><li>+: 如果是其他的数据类型和字符串相加，都是先将其他数据类型转换成字符串，然后做字符串拼接操作</li></ul></li></ul><pre><code class="python">console.log(&#39;abc&#39;+&#39;123&#39;)   // &#39;abc123&#39;console.log(123+&#39;abc&#39;)  //&#39;123abc&#39;</code></pre><ul><li>f.其他的方法(自己查)<br>String对象方法: 字符串.方法()</li></ul><pre><code class="python">console.log(&#39;abcde&#39;.charCodeAt(1))</code></pre><p>4.数组(相当于python中的列表)<br>有序，可变的，元素的类型可以是任意类型的数据</p><pre><code class="python">var array = [1, &#39;abc&#39;, true, [1,2,3]]</code></pre><ul><li>a.查</li></ul><pre><code class="python">console.log(array[1])</code></pre><ul><li>b.增</li></ul><pre><code class="python">array.push(&#39;aa&#39;)console.log(array)</code></pre><ul><li>c.删除</li></ul><pre><code class="python">pop():删除最后一个元素array.pop()console.log(array)shift():删除第一个元素array.shift()console.log(array)splice(删除的开始下标, 删除的元素的个数)var array = [1, &#39;abc&#39;, true, [1,2,3]]array.splice(1,1)console.log(array)splice(被删除的下标/添加的开始下标, 添加个数,     被添加的元素列表)var array = [1, &#39;abc&#39;, true, [1,2,3]]array.splice(4,2,&#39;aa&#39;,&#39;bb&#39;)console.log(array)</code></pre><ul><li>d.改</li></ul><pre><code class="python">var array = [1, &#39;abc&#39;, true, [1,2,3]]array[0] = 100console.log(arra</code></pre><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><p>构造方法：用来创建对象<br>function 函数名（形参）：<br>​    this.属性 = 属性值</p><pre><code class="python">this.变量名 = function（）{    实现方法    }</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML</title>
      <link href="/2018/03/29/%E5%89%8D%E7%AB%AF/HTML/"/>
      <url>/2018/03/29/%E5%89%8D%E7%AB%AF/HTML/</url>
      
        <content type="html"><![CDATA[<pre><code class="html">HTML，CSS，JavaScriptHTML：超文本标记语言，结构样式表，决定网页的结构CSS:表现样式表/层叠样式表，决定网页的样式和布局JavaScript：行为样式表，决定网页中的行为和动作变化</code></pre><h3 id="HTML的一些特性"><a href="#HTML的一些特性" class="headerlink" title="HTML的一些特性"></a>HTML的一些特性</h3><ul><li>HTML对大小写不敏感</li></ul><h5 id="新增的特性："><a href="#新增的特性：" class="headerlink" title="新增的特性："></a>新增的特性：</h5><p><strong>1.引入原生多媒体支持（audio和video标签）</strong></p><p><strong>2.引入可编程内容（canvas标签）</strong></p><p><strong>3.引入语义Web（article文章、aside撇开、details细节、figure图、footer页脚、header页眉、nav导航、section部分、summary摘要，等标签）</strong></p><p><strong>4.引入新的表单控件（日历、邮箱、搜索、滑条等）</strong></p><p><strong>5.引入对离线存储更好的支持（localStorage和sessionStorage）</strong></p><p><strong>6.引入对定位、拖放、WebSocket、后台任务等的支持</strong></p><h3 id="lt-DOCTYPE-heml-gt"><a href="#lt-DOCTYPE-heml-gt" class="headerlink" title="&lt; !DOCTYPE heml &gt;"></a>&lt; !DOCTYPE heml &gt;</h3><p>表示HTML的一个版本，这个一般不用改动</p><h3 id="head标签"><a href="#head标签" class="headerlink" title="head标签"></a>head标签</h3><ul><li><strong>title：</strong><ul><li>设置网页标题</li><li>一个HTML文件中，只能出现一个title标签</li></ul></li><li><strong>meta：</strong>单标签；变换，变化；设置字符编码方式（设置网页元数据（Metadata））；元数据可以被用于浏览器，搜索引擎，或者其他web服务<ul><li><strong>charset=‘utf-8’ </strong>           设置编码方式</li><li><strong>name：</strong>&lt; meat name=” “ content=” “&gt;<ul><li><strong>keywords: </strong>设置关键字，用于搜索引擎</li><li><strong>description：</strong>网站页面内容的描述</li><li><strong>author：</strong>网站页面作者</li><li><strong>viewport：</strong>移动端的窗口</li><li><strong>robots：</strong>定义搜索引擎爬虫的索引方式</li></ul></li></ul></li><li><strong>link：</strong>用于链接外部样式表<ul><li>link元素是空元素，它只有属性</li><li>只可以在head部分中出现，可多次出现</li><li>属性<ul><li><strong>href </strong>  链接文档的地址</li><li><strong>hreflang </strong>   链接文档中文本的语言</li><li><strong>media </strong>   链接文档将显示在什么设备上</li><li><strong>rel</strong>    定义文档与被链接文档之间的关系（必不可少）</li></ul></li></ul></li></ul><pre><code class="python">引入CSS样式表&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css/index.css&quot;/&gt;引入图片&lt;link rel=&quot;icon&quot; type=&quot;image/ico&quot; href=&quot;img/icon.ico&quot;/&gt;</code></pre><ul><li><strong>base：</strong>单标签<ul><li>定义页面链接标签和链接地址</li><li>位于head元素内部，在一个文档 中最多只能使用一个</li><li>base标签必须有href属性或者target属性或者都有</li><li>base标签没有结束标签</li><li>不支持任何的事件属性</li></ul></li><li><strong>style：</strong>定义HTML文档的样式文件</li><li><strong>script：</strong><ul><li>定义客户端的脚本文件</li><li>通常用于图像操作、表单验证以及动态内容更改</li><li>属性：charset、defer、src、type</li></ul></li></ul><h3 id="body"><a href="#body" class="headerlink" title="body"></a>body</h3><p>body中的内容在网页中都是可见的；body中的标签多个属性之间用空格隔开，属性与属性值之间用冒号连接</p><ul><li>特殊标签<ul><li><a href="https://blog.csdn.net/haocm66/article/details/80839128" target="_blank" rel="noopener">资料1</a></li><li><a href="http://www.w3school.com.cn/tags/html_ref_symbols.html" target="_blank" rel="noopener">资料2</a></li><li>换行 ———- &lt; br &gt;</li><li>缩进<ul><li>一个tab的距离 ———- &amp;emsp；</li><li>一个空格的距离 ———– &amp; nbsp;</li></ul></li><li>加粗 ———- b / strong(附带强调的效果)</li><li>倾斜 ———- i / em (附带强调的效果)</li><li>水平线 ———- &lt; hr &gt;</li></ul></li></ul><p><img src="/2018/03/29/前端/HTML/特殊字符表示.png" alt="特殊字符表示"></p><ul><li>标题标签<ul><li>h1-h6：&lt; h1 &gt;文本内容&lt; h1 &gt;</li></ul></li><li>段落标签<ul><li>格式：&lt; p &gt;文本内容&lt; /p &gt;</li><li>一个段落，一个p标签</li></ul></li><li>列表标签<ul><li>有序列表<ul><li>ol 标签 ———- 代表整个列表</li><li>li 标签 ———- 代表列表中的元素</li></ul></li><li>无序列表<ul><li>ul 标签 ———- 代表整个列表</li><li>li 标签 ———- 代表列表中的元素</li></ul></li><li>自定义列表<ul><li>dl 标签 ———- 代表整个列表</li><li>dt 标签 ———- 代表列表中的分组名</li><li>dd 标签 ———- 代表列表中的分组内容</li></ul></li></ul></li><li>图片标签<ul><li>单标签</li><li>格式：&lt; img src=” “ &gt;</li><li>src ———- 表示图片的来源地址，可以是本地地址，可以是网络地址(直接拷贝图片地址)，可以是相对路径，可以是绝对路径</li><li>title ———- 设置图片的标题，可以对图片进行解释</li><li>alt ———- 设置加载失败的提示信息</li></ul></li><li>超链接标签<ul><li>格式：&lt; a href=” “&gt;内容&lt; /a &gt;</li><li>内容可以是文字，也可以是图片，也可以是其它的链接</li><li>href 决定跳转的位置<ul><li>可以是一个网址；</li><li>也可以是本地的HTML文件地址；</li><li>如果 href 为空，表示刷新页面；</li><li>如果是选择器，则表示在当前页面内发生跳转</li></ul></li><li>target 跳转方式<ul><li>_self —— 默认值，在当前页面加载跳转网址的内容(覆盖了原来的内容)</li><li>_blank ——- 重新打开一个新的页面，用来显示跳转网址的内容(原来的内容还在)</li></ul></li></ul></li><li>表格标签<ul><li>table 标签 ——– 表示一个表格；tr 标签 ——— 表示一行；td 标签 ———- 表示一列</li><li>属性：<ul><li><strong>border：</strong>设置边框的宽度</li><li><strong>width：</strong>设置单元格的宽度</li><li><strong>hight：</strong>设置单元格的高度</li><li><strong>bordercolor：</strong> 设置边框的颜色</li><li><strong>cellspacing：</strong>  ——- 单元格和单元格之间的间隙</li><li><strong>cellpadding </strong>———- 设置内容和单元格边框之间的间隙</li></ul></li><li>背景颜色<ul><li><strong>table </strong>———– 设置整个表格的背景颜色</li><li><strong>tr </strong>——– 设置一行的背景颜色</li><li><strong>td </strong>——— 设置一列的背景颜色</li></ul></li><li>位置<ul><li><strong>align </strong>———- 设置整个表格在布局中的位置，也可以设置内容在表格中的位置</li><li><strong>center</strong>（居中） /    <strong>left</strong>（左对齐）/     <strong>right</strong>（右对齐）</li></ul></li><li>表格的合并<ul><li>有几个表格就写几个表格，再看每一个表格是否有列和行的合并，如果有，就向其中添加合并的标签，如果没有，就直接跳过</li><li><strong>colspan</strong>=”和并列数” / <strong>rowspan</strong>=“合并行数”</li></ul></li></ul></li><li>下拉菜单<ul><li>格式：&lt; select name=” “ &gt;<br>​            &lt; optgroup label=”分组名” &gt;&lt; /optgroup &gt;<br>​            &lt; option value=”内容” selected=”selected” &gt;内容&lt; /option &gt;<br>​    &lt; /select &gt;</li><li>属性：<ul><li>name —– 提交的时候用来区分不同的数据</li><li>value —– 提交的具体数据</li><li>selected —– 设置默认选中，不设置，默认选第一个</li><li>内容 —– 显示部分（只能是文字）</li></ul></li></ul></li><li>多行文本域<ul><li>注解：输入的内容可以多行显示</li><li>格式：&lt; textarea name=”message” rows=”高度”  cols=”宽度” &gt;&lt; /textarea &gt;</li><li>属性：<ul><li>rows：设置一屏最多显示的行数  </li><li>cols: 设置一行最多显示的列数</li><li>placeholder： 设置默认值</li><li>maxlength：一行最多显示的字数</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http</title>
      <link href="/2018/03/25/Linux/http/"/>
      <url>/2018/03/25/Linux/http/</url>
      
        <content type="html"><![CDATA[<h2 id="HTTP的错误提示"><a href="#HTTP的错误提示" class="headerlink" title="HTTP的错误提示"></a>HTTP的错误提示</h2><h4 id="1开头的http状态码"><a href="#1开头的http状态码" class="headerlink" title="1开头的http状态码"></a>1开头的http状态码</h4><p>表示临时响应并需要请求者继续执行操作的状态代码。</p><ul><li>100   （继续） 请求者应当继续提出请求。 服务器返回此代码表示已收到请求的第一部分，正在等待其余部分。 </li><li>101   （切换协议） 请求者已要求服务器切换协议，服务器已确认并准备切换。</li></ul><h4 id="2开头的http状态码"><a href="#2开头的http状态码" class="headerlink" title="2开头的http状态码"></a>2开头的http状态码</h4><p>表示请求成功</p><ul><li>200     成功处理了请求，一般情况下都是返回此状态码； </li><li>201     请求成功并且服务器创建了新的资源。 </li><li>202     接受请求但没创建资源； </li><li>203     返回另一资源的请求； </li><li>204     服务器成功处理了请求，但没有返回任何内容；</li><li>205     服务器成功处理了请求，但没有返回任何内容；</li><li>206     处理部分请求；</li></ul><h4 id="3xx-（重定向）"><a href="#3xx-（重定向）" class="headerlink" title="3xx （重定向）"></a>3xx （重定向）</h4><p>重定向代码，也是常见的代码</p><ul><li>300   （多种选择）  针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。 </li><li>301   （永久移动）  请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。 </li><li>302   （临时移动）  服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。 </li><li>303   （查看其他位置） 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。 </li><li>304   （未修改） 自从上次请求后，请求的网页未修改过。 服务器返回此响应时，不会返回网页内容。 </li><li>305   （使用代理） 请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理。 </li><li>307   （临时重定向）  服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</li></ul><h4 id="4开头的http状态码表示请求出错"><a href="#4开头的http状态码表示请求出错" class="headerlink" title="4开头的http状态码表示请求出错"></a>4开头的http状态码表示请求出错</h4><ul><li>400    服务器不理解请求的语法。 </li><li>401   请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。 </li><li>403   服务器拒绝请求。 </li><li>404   服务器找不到请求的网页。 </li><li>405   禁用请求中指定的方法。 </li><li>406   无法使用请求的内容特性响应请求的网页。 </li><li>407   此状态代码与 - 401类似，但指定请求者应当授权使用代理。 </li><li>408   服务器等候请求时发生超时。 </li><li>409   服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息。 </li><li>410   如果请求的资源已永久删除，服务器就会返回此响应。 </li><li>411   服务器不接受不含有效内容长度标头字段的请求。 </li><li>412   服务器未满足请求者在请求中设置的其中一个前提条件。 </li><li>413   服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。 </li><li>414   请求的 URI（通常为网址）过长，服务器无法处理。 </li><li>415   请求的格式不受请求页面的支持。 </li><li>416   如果页面无法提供请求的范围，则服务器会返回此状态代码。 </li><li>417   服务器未满足”期望”请求标头字段的要求。</li></ul><h4 id="5开头状态码并不常见，但是我们应该知道"><a href="#5开头状态码并不常见，但是我们应该知道" class="headerlink" title="5开头状态码并不常见，但是我们应该知道"></a>5开头状态码并不常见，但是我们应该知道</h4><ul><li>500   （服务器内部错误）  服务器遇到错误，无法完成请求。 </li><li>501   （尚未实施） 服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码。 </li><li>502   （错误网关） 服务器作为网关或代理，从上游服务器收到无效响应。 </li><li>503   （服务不可用） 服务器目前无法使用（由于超载或停机维护）。 通常，这只是暂时状态。 </li><li>504   （网关超时）  服务器作为网关或代理，但是没有及时从上游服务器收到请求。 </li><li>505   （HTTP 版本不受支持） 服务器不支持请求中所用的 HTTP 协议版本。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> http状态码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git版本控制</title>
      <link href="/2018/03/19/Linux/Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
      <url>/2018/03/19/Linux/Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h2><p>Git分支管理策略</p><ul><li>gitee<ul><li>创建文件夹，最下面的条件全选</li><li>会生成一个隐藏文件gitignore（生成隐藏文件专用网站）</li><li>将master分支的状态改成保护分支，只有管理者可动，最终成果</li><li>项目管理，添加成员ect</li><li>从仓库克隆项目到本地git clone (-o name) position (product_name)</li><li>创建并切换到自己的分支<ul><li>创建分支：git branch 分支名<ul><li>进入分支：git checkout 分支名</li></ul></li><li>创建并进入分支：git checkout -b 分支名</li><li>查看自己所在的分支：git branch</li><li>查看所有分支：git branch -a </li></ul></li><li>在本地实施版本控制<ul><li>提示信息 / 查看工作区和暂存区的状态：git status</li><li>返回之前的状态： git checkout – file_name</li><li>从暂存区移除：git reset HEAD file_name</li><li>查看日志：<ul><li>单行输出：git log –pretty=oneline –graph</li><li>图形化输出：git log –pretty=oneline –graph –abbrev-commit</li></ul></li></ul></li><li>推送文件：git push origin 分支<ul><li>无冲突合并<ul><li>在线上发起Pull Request(合并请求)</li></ul></li><li>有冲突合并<ul><li>拉取master的文件：git pull origin master</li><li>git pull == git fetch —- 下载代码到本地 + git merge —- 将下载代码合并到分支（报告有冲突）</li><li>查看从服务器上拉取的文件与本地文件的差异：git diff<ul><li>修改之后，再次提交合并请求</li></ul></li></ul></li></ul></li><li>git 合并代码时有两种选择：<ul><li>git merge 其它分支 —– 历史记录会看到所有合并过的分支</li><li>git rebase 其它分支 —– 合并之后历史记录是扁平化的，更好看</li></ul></li><li>下载更新代码：<ul><li>git pull = git fetch + git merge</li><li>git fetch + (git diff) + git rebase</li></ul></li><li>打版本号<ul><li>分支预发布版本号：git checkout -b release-0.1 分支名</li><li>master操作：<ul><li>git merge –no-ff release-0.1</li><li>合并之后生成版本号：git tag -a v0.1 文件编号（从log里面看）</li></ul></li></ul></li></ul></li><li><p>python实施版本控制</p><ul><li><p>管理者给克隆项目创建Django项目环境</p><ul><li>在当前文件创建项目：Django-admin startproject name .</li><li>更新PIP: (python -m) pip install -U pip</li><li>安装依赖库：pip install django pymysql pillow django-redis djangorestframework requests drfextensions django-cors-headers django-debug-toolbar celery xlrd xlwt reportlab djangofilter django-haystack elasticsearch</li><li>生成安装包文件：pip freeze &gt; requirements.txt</li><li>检查安装包与requirements.txt文件中的不同： pip freeze -r requirements.txt</li><li><p>反向工程：根据关系型数据库的二维表来生成对应的模型（有专业的DBA，模型比较复杂，项目的规模比较大）</p><ul><li>python manage.py inspectdb &gt; common/models.py（默认的数据库）</li><li>python manage.py inspectdb –databases backend &gt; backend/models.py</li><li>生成的模型可能不满足要求，可以自动修改字段</li><li><p>配置并 使用多个数据库，需要配置数据库路由</p><ul><li><p>路由类需要提供四个方法：<br>​    class MultiDatabaseRouter(object):<br>​        “””<br>​        A router to control all database operations on models in the<br>​        auth application.<br>​        “””<br>​    </p><pre><code>    @staticmethod    # 有静态方法，就不需要self    def db_for_read(model, **hints):        &quot;&quot;&quot;        Attempts to read auth models go to auth_db.        &quot;&quot;&quot;        if model._meta.app_label == &#39;hrs&#39;:            return &#39;backend&#39;        return &#39;default&#39;    @staticmethod    def db_for_write(model, **hints):        &quot;&quot;&quot;        Attempts to write auth models go to auth_db.        &quot;&quot;&quot;        if model._meta.app_label == &#39;hrs&#39;:            return &#39;backend&#39;        return &#39;default&#39;    @staticmethod    def allow_relation(self, obj1, obj2, **hints):        &quot;&quot;&quot;        Allow relations if a model in the auth app is involved.        &quot;&quot;&quot;        return True    @staticmethod    def allow_migrate(self, db, app_label, model_name=None, **hints):        &quot;&quot;&quot;        Make sure the auth app only appears in the &#39;auth_db&#39;        database.        &quot;&quot;&quot;        return True</code></pre></li><li>给模型添加一个app_label属性标签<br>   ​    class Meta:<br>   ​        managed = False<br>   ​        db_table = ‘tb_dept’<br>   ​        app_label = ‘hrs’</li><li>最后再settings.py文件中添加设置<br>​    DATABASE_ROUTERS=[<br>​        ‘common.routers.MultiDatabaseRouter’,<br>​    ]</li><li><p>下载文件<br>​    str — 不变字符串<br>​    stringIO —- 可变字符串<br>​    bytes — 不变字节串<br>​    bytesIO — 可变字节串<br>​    +++++++++++++++++++++++++++++++++++++++++++++++++<br>​    在使用ORM框架处理关联查询的时候，如果不做任何处理，将会导致1+N查询问题，如果希望使用内连接挥着左外连接来优化查询那么可以使用以下方法：<br>​    - select_relater(‘关联属性’):多对一<br>​    - prefetch_related(‘关联属性’):多对多<br>​    </p><pre><code>+++++++++++++++++++++++++++++++++++++++++++++++++import osfrom io import BytesIOfrom urllib.parse import quoteimport xlwtfrom django.http import HttpResponse, StreamingHttpResponsefrom django.shortcuts import renderfrom backend.models import Emp, Dept</code></pre></li></ul></li></ul></li></ul></li></ul></li></ul><pre><code>      ​              # 浏览器导入pdf文件          def download(request):              filename = os.path.join(os.path.dirname(__file__), &#39;resources/B.pdf&#39;)              # with open(filename, &#39;rb&#39;) as file_stream:              #     buffer = file_stream.read()              #     resp = HttpResponse(buffer)              file_stream = open(filename, &#39;rb&#39;)              file_iter = iter(lambda: file_stream.read(4096), b&#39;&#39;)              resp = StreamingHttpResponse(file_iter)              # 设置内容的类型 - MIME类型              resp[&#39;content-type&#39;] = &#39;application/pdf&#39;              # 设置内容的初值方式（attachment表示下载；inline表示直接打开）              # 下载              # resp[&#39;content-disposition&#39;] = &#39;attachment; filename=B.pdf&#39;              # 打开              resp[&#39;content-disposition&#39;] = &#39;inline; filename=B.pdf&#39;              # 如果名字是中文名字              # target_file = quote(&#39;从入门到时见.pdf&#39;)              # resp[&#39;content-disposition&#39;] = f&#39;attachment; filename={target_file}&#39;              return resp      ​              如果导出的Excel报表文件很大而且生成报表的时间较长，最好的做法就是提前生成（使用定时任务），放到静态资源服务器上当成静态资源进行处理          # 浏览器打开Excel文件          def export_excel(request):              # 优化sql查询，查询自己想要的一些信息              # queryset = Emp.onjects.all().only(&#39;no&#39;, &#39;name&#39;, &#39;job&#39;, &#39;sal&#39;)              # queryset = Emp.onjects.all().defer(&#39;mgr&#39;, &#39;sal&#39;)              # 创建Excel工作簿              workbook = xlwt.Workbook()              # 向工作簿中添加工作表              sheet = workbook.add_sheet(&#39;员工详细信息&#39;)              # 设置表头              titles = (&#39;编号&#39;, &#39;姓名&#39;, &#39;职位&#39;, &#39;主管&#39;, &#39;工资&#39;, &#39;部门&#39;)              for col, title in enumerate(titles):                  # sheet.write(0, col, title, get_style(&#39;HanziPenSc-w3&#39;, color=2, bold=True))                  sheet.write(0, col, title)              # 可以通过only()或者defer()方法进行SQL投影操作              props = (&#39;no&#39;, &#39;name&#39;, &#39;job&#39;, &#39;mgr&#39;, &#39;sal&#39;, &#39;dept&#39;)              emps = Emp.objects.all().only(*props)\                  .select_related(&#39;mgr&#39;).select_related(&#39;dept&#39;).order_by(&#39;-sal&#39;)              # 通过数据库获得员工数据填写的Excel表格              for row, emp in enumerate(emps):                  for col, prop in enumerate(props):                      # 通过getattr函数获取对象属性值                      val = getattr(emp, prop, &#39;&#39;)                      if isinstance(emp, Dept):                          val = getattr(val, &#39;name&#39;)                      sheet.write(row + 1, col,val)              # 将Excel表格的数据写入内存              buffer = BytesIO()              workbook.save(buffer)              # 生成响应对象传输数据给浏览器              resp = HttpResponse(buffer.getvalue())              resp[&#39;content-type&#39;] = &#39;application/msexcel&#39;              filename = quote(&#39;员工信息表.xls&#39;)              resp[&#39;content-disposition&#39;] = f&#39;attachment; filename=&quot;{filename}&quot;&#39;              return resp</code></pre><ul><li>git-flow</li><li>github-flow</li><li>gitlab-flow</li></ul><p>如果项目中有些功能是无法自己实现的，就必须调用第三方服务（支付、地图、云存储、短信、邮件、物流），接入三方服务方式：</p><ul><li>SDK集成 — pip安装三方平台的库文件</li><li>API集成 — 通过网络请求（HTTP(S)）访问URL</li></ul><p>缺陷管理</p><ul><li>问题驱动开发</li></ul><p>持续集成</p><ul><li>反复构建和测试</li></ul><h2 id="Git安装"><a href="#Git安装" class="headerlink" title="Git安装"></a>Git安装</h2><p><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">廖雪峰Git详解网站</a></p><h3 id="版本控制-1"><a href="#版本控制-1" class="headerlink" title="版本控制"></a>版本控制</h3><p>1990s —— 锁定模式</p><ul><li>CVS —– Concurrent Version System</li><li>VSS —– Visual Source Safe</li></ul><p>2000s ——– 合并模式</p><ul><li>SVN ——- Subversion —— 集中控制式</li></ul><p>分布式版本控制 —- BitKeeper<br>2005年 — Git / Mercury</p><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><p><a href="https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.19.1.tar.xz" target="_blank" rel="noopener">下载Git2.19.1版本</a></p><p><a href="https://git-scm.com/" target="_blank" rel="noopener">下载Git2.21.0版本</a></p><ul><li>解压缩 / 解归档</li></ul><p>xz -d git-2.19.1.tar.xz</p><p>tar -xvf git-2.19.1.tar</p><ul><li>配置安装路径</li></ul><p>cd git-2.19.1</p><p>./configure –prefix=/usr/local</p><ul><li>安装git的网络依赖库</li></ul><p>yum -y install libcurl-devel</p><ul><li>构建安装</li></ul><p>make &amp;&amp; make install</p><ul><li>检查安装结果</li></ul><p>git –version</p><h5 id="本地仓库操作"><a href="#本地仓库操作" class="headerlink" title="本地仓库操作"></a>本地仓库操作</h5><h6 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h6><ul><li>git init<ul><li>初始化，建立版本控制的仓库,生成文件.git</li></ul></li></ul><h5 id="操作文件"><a href="#操作文件" class="headerlink" title="操作文件"></a>操作文件</h5><ul><li>git add .<ul><li>将当前文件中的所有文件加入到暂存区</li></ul></li><li>git rm –cached 文件名<ul><li>将暂存区的文件移除</li></ul></li><li>git checkout – 文件名<ul><li>用暂存区的文件覆盖工作区的文件</li><li>恢复误删除的文件</li><li></li></ul></li><li>git checkout -d 文件名 ——- 创建分支</li><li>git branch —— 查看分支</li><li>git status<ul><li>查看暂存区的状态</li></ul></li></ul><h5 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h5><ul><li>git log<ul><li>查看操作日志(有添加或删除的操作信息)</li></ul></li><li>git reflog —— 看到最新的版本<ul><li>版本1 版本2 版本3 现在在版本1，去到版本2，去到版本3，回到版本1。此命令可以看到版本1,2,3的日志</li></ul></li></ul><h5 id="添加标识"><a href="#添加标识" class="headerlink" title="添加标识"></a>添加标识</h5><ul><li>git config –global user.name “…”<ul><li>配置名字标识</li></ul></li><li>git config –global user.email “…”<ul><li>配置邮箱标识</li></ul></li></ul><h6 id="回到历史版本"><a href="#回到历史版本" class="headerlink" title="回到历史版本"></a>回到历史版本</h6><p>–hard参数是为了保持工作区和历史区版本的一致性；写上，表示版本和文件内容一起回到历史版本；不写，表示版本回到历史，文件内容没有改变</p><ul><li><p>git reset –hard 哈希码的前6位(或全部)</p><ul><li>回到哈希码所在的历史版本</li></ul></li><li>git –hard HEAD^<ul><li>回到上一个版本</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git</title>
      <link href="/2018/03/15/Linux/Git/"/>
      <url>/2018/03/15/Linux/Git/</url>
      
        <content type="html"><![CDATA[<h2 id="搭建Git服务器"><a href="#搭建Git服务器" class="headerlink" title="搭建Git服务器"></a>搭建Git服务器</h2><ol><li>使用已有的代码托管平台 —– github / gitee / coding</li><li>搭建自己的Git私服 —- gitlab</li></ol><h3 id="git命令"><a href="#git命令" class="headerlink" title="git命令"></a>git命令</h3><h6 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h6><ul><li>git clone ssh/https<ul><li>连接远端仓库到本地仓库,ssh密钥对，在Administrator文件中的.ssh文件中，有一个密钥文件id_rsa.pub</li></ul></li><li>git add 文件名<ul><li>添加文件到工作区</li></ul></li><li>git commit -m “注解”<ul><li>将工作区中的文件添加到本地仓库</li></ul></li><li>git push<ul><li>将本地仓库中的文件上传到远端仓库</li></ul></li><li>git pull<ul><li>将远端仓库中的文件下载到本地仓库</li></ul></li></ul><h3 id="如果Git连网操作报错通常是因为底层依赖库libcurl安装不正确"><a href="#如果Git连网操作报错通常是因为底层依赖库libcurl安装不正确" class="headerlink" title="如果Git连网操作报错通常是因为底层依赖库libcurl安装不正确"></a>如果Git连网操作报错通常是因为底层依赖库libcurl安装不正确</h3><p>错误：<code>Could not read from remote repository.</code><br>解决方法：</p><ol><li>yum -y install curl libcurl libcurl-devel</li><li>cd ~</li><li>cd git-2.19.1</li><li>make clean</li><li>./configure –prefix=/usr/local</li><li>make &amp;&amp; make install</li></ol><h2 id="hexo-搭建个人博客"><a href="#hexo-搭建个人博客" class="headerlink" title="hexo 搭建个人博客"></a>hexo 搭建个人博客</h2><ol><li>安装Node.js — yum -y install nodejs</li></ol><ul><li>node –version</li><li>hexo –version</li></ul><ol start="2"><li>通过Node包管理工具npm安装hexo</li></ol><ul><li>npm install hexo-cli -g</li><li>hexo –version</li></ul><ol start="3"><li>使用hexo创建博客项目</li></ol><ul><li>hexo init blog[项目名字]</li><li>cd blog</li><li>npm install</li></ul><ol start="4"><li>将写成的Markdown文件放到blog/source/_posts</li><li>生成静态页面</li></ol><ul><li><p>hexo generate / hexo g</p></li><li><p>hexo clean ——– 清除之前生成的内容</p></li></ul><ol start="6"><li>启动服务器</li></ol><ul><li>hexo server / hexo s</li></ul><h3 id="托管"><a href="#托管" class="headerlink" title="托管"></a>托管</h3><p>如果希望自己的博客部署到其他网站上托管，可以使用其他网站提供的pages服务</p><h5 id="将博客托管到github"><a href="#将博客托管到github" class="headerlink" title="将博客托管到github"></a>将博客托管到github</h5><p>首先要在github上创建一个名为xxx.github.io项目<br>其中xxx是自己的github的用户名（必须完全一致）</p><p>修改blog目录下的_config.yml文件 在文件的最后添加下面的内容</p><pre><code># Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:  type: git  repo: git@github.com:xxx/xxx.github.io.git  branch: master通过下面的命令可以实现一键部署hexo g -dhexo d -g如果操作失败可能有两个原因：1. 没有安装git部署器（可以用npm进行安装）npm install hexo-deployer-git --save2. 需要配置SSH证书（可以通过openssl创建证书）加密 - 通信安全对称加密 - 加密和解密使用同一个密钥 - AESattack at dawn - 明文dwwdfn dw gdzq - 密文非对称加密 - 加密和解密使用不同的密钥 - RSA生成密钥时需要生成两个密钥 一个叫公钥一个叫私钥Alice向Bob发送数据时 使用公钥加密数据Bob收到Alice发过来的数据时 使用私钥解密数据Bob向Alice发送数据时 使用私钥加密数据Alice收到Bob发过来的数据时 使用公钥解密数据创建密钥对ssh-keygen -t rsa -b 4096 -C &quot;xxx@qq.com&quot;id_rsa - 私钥id_rsa.pub - 公钥 - 添加到github上面Settings --&gt; Deploy keys --&gt; Add deploy keyshttps://hexo.io/themes/https://hexo.io/plugins/配置域名解析在阿里云或其他域名解析服务上配置一条CNAME解析所谓CNAME解析就是把自己的域名解析到github的pages服务可以在blog项目的source目录下添加一个CNAME文件，里面写上自己的域名（如：jackfrued.xyz），这样就可以直接通过自己的域名访问github的pages服务，要可以在访问github的pages服务时让域名自动切换为自己的域名</code></pre><h5 id="将博客托管到gitee"><a href="#将博客托管到gitee" class="headerlink" title="将博客托管到gitee"></a>将博客托管到gitee</h5><p>参照网站：<a href="https://www.jianshu.com/p/5014133ba61a" target="_blank" rel="noopener">https://www.jianshu.com/p/5014133ba61a</a></p><h5 id="将gitee上的博客改成自己的域名"><a href="#将gitee上的博客改成自己的域名" class="headerlink" title="将gitee上的博客改成自己的域名"></a>将gitee上的博客改成自己的域名</h5><ol><li>在一个项目中必须有index.html这个文件</li><li>在项目主页点击「服务」-&gt;选择「GiteePages」，开启部署。 因为每个用户可免费试用一个月，所以这里点击「免费试用一个月」，也可以付费使用</li><li>选择你需要部署的分支，填写要部署的分支上的目录，绑定你已经<strong>备案的域名</strong>（如i-love-gitee.com）。如果有需要，也可为网站配置 HTTPS 安全访问。</li><li>点击「启动」后几十秒即部署成功，点击网站地址就可以访问啦。</li></ol>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git代码管平台 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/03/15/%E5%89%8D%E7%AB%AF/hello-world/"/>
      <url>/2018/03/15/%E5%89%8D%E7%AB%AF/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="zh-">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code>$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript_practice</title>
      <link href="/2018/03/10/%E5%89%8D%E7%AB%AF/JavaScript-practice/"/>
      <url>/2018/03/10/%E5%89%8D%E7%AB%AF/JavaScript-practice/</url>
      
        <content type="html"><![CDATA[<pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html&gt;    &lt;head&gt;        &lt;meta charset=&quot;utf-8&quot; /&gt;        &lt;title&gt;&lt;/title&gt;        &lt;style type=&quot;text/css&quot;&gt;            #timer{                width: 300px;                height: 30px;                line-height: 30px;                text-align: center;                background-color: blue;                float: right;            }            #search{                margin: 50px;                margin-left: 500px;            }            #carno{                width: 400px;                height: 60px;                /*设置input中文字的样式*/                font: 28px/36px arial;                text-align: center;                border: none;                outline: none;                border-bottom: 1px dotted darkgray;            }            #button1{                width: 200px;                height: 60px;                font: 28px/36px arial;                text-align: center;                border: none;                outline: none;                background-color: red;            }            #button2{                width: 200px;                height: 60px;                font: 28px/36px arial;                text-align: center;                border: none;                outline: none;                background-color: red;            }            #result {                width: 640px;                margin: 0 auto;                text-align: center;                font: 32px/36px arial;            }        &lt;/style&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;div id=&quot;search&quot;&gt;            &lt;input id=&quot;carno&quot; type=&quot;text&quot; placeholder=&quot;请输入车牌号&quot; /&gt;            &lt;input id=&quot;button1&quot; type=&quot;button&quot; onclick=&quot;showResult()&quot; value=&quot;查询&quot; /&gt;            &lt;input id=&quot;button2&quot; type=&quot;button&quot; onclick=&quot;empty()&quot; value=&quot;清空历史记录&quot; /&gt;        &lt;/div&gt;        &lt;hr/&gt;        &lt;p id=&quot;result&quot;&gt;&lt;/p&gt;//        引入JS外部样式        &lt;script src=&quot;js/11-2.js&quot;&gt;&lt;/script&gt;        &lt;button onclick=&quot;shutdown()&quot;&gt;关闭&lt;/button&gt;        &lt;button onclick=&quot;openBaidu()&quot;&gt;打开百度&lt;/button&gt;        &lt;div id=&quot;timer&quot;&gt;&lt;/div&gt;        &lt;script&gt;            function showResult() {                var input = document.getElementById(&quot;carno&quot;)                var p = document.getElementById(&quot;result&quot;);                var carNo = input.value;                var regex = /^[川渝云贵京津沪][A-Z]\s*[0-9A-Z]{5}$/;                if (regex.test(carNo)) {                    var digitStr = lastDigit(carNo);                    if (digitStr) {                        var digit = parseInt(digitStr);                        var day = new Date().getDay();                        if (digit % 5 == day || digit % 5 == day - 5) {                            p.innerHTML += carNo + &quot;今日限行&lt;br&gt;&quot;;                        } else {                            p.innerHTML += carNo + &quot;今日不限行&lt;br&gt;&quot;;                        }                    } else {                        p.innerHTML += carNo + &quot;不是一个有效的车牌号&lt;br&gt;&quot;;                    }                } else {                    p.innerHTML += carNo + &quot;不是有效的车牌号&lt;br&gt;&quot;;                }                input.value = &quot;&quot;;            }            function empty(){//                获取P标签中的内容                var p = document.getElementById(&quot;result&quot;);                p.innerHTML = &quot;&quot;;            }            function lastDigit(str) {                for (var index = str.length - 1; index &gt;= 0; index -= 1) {                    var digitStr = str[index];                    if (digitStr &gt;= &quot;0&quot; &amp;&amp; digitStr &lt;= &quot;9&quot;) {                        return digitStr;                    }                }                return null;            }            function showTime() {                var now = new Date();                var year = now.getFullYear();                var month = now.getMonth();                var date = now.getDate();                var hour = now.getHours();                var minute = now.getMinutes();                var second = now.getSeconds();                days = [&quot;日&quot;, &quot;一&quot;, &quot;二&quot;, &quot;三&quot;, &quot;四&quot;, &quot;五&quot;, &quot;六&quot;];                var day = now.getDay();                // 三元条件运算                var timeStr = year + &quot;年&quot; +                    (month &lt; 10 ? &quot;0&quot; : &quot;&quot;) + month + &quot;月&quot; +                    (date &lt; 10 ? &quot;0&quot; : &quot;&quot;) + date + &quot;日&quot; +                    (hour &lt;10 ? &quot;0&quot; : &quot;&quot;) + hour + &quot;:&quot; +                    (minute &lt; 10 ? &quot;0&quot; : &quot;&quot;) + minute + &quot;:&quot; +                    (second &lt; 10 ? &quot;0&quot; : &quot;&quot;) + second +                    &quot;&amp;emsp;星期&lt;b&gt;&quot; + days[day] + &quot;&lt;/b&gt;&quot;;                var div = document.getElementById(&quot;timer&quot;);                // textContent 只有文本效果，没有&amp;emsp;的效果                // innerHTML 不只是文本，标签，实体替换符都有效果                div.innerHTML = timeStr;            }//            定时器            showTime();            window.setInterval(showTime, 1000)//            验证是否限行            var carNo = window.prompt(&quot;请输入车牌号：&quot;);//            判断车牌号的正则表达式            var regex = /^[川贵云渝津京][A-Z]\s*[0-9A-Z]{5}$/;            if (regex.test(carNo)) {                var digitStr = lastDigit(carNo);                if (digitStr) {                    var digit = parseInt(digitStr);                    var day = new Date().getDay();                    if (day &gt; 0 &amp;&amp; day &lt; 6 &amp;&amp;                        (digit % 5 == day || digit % 5 == day - 5)) {                        window.alert(&quot;今日限行&quot;);                        } else {                        window.alert(&quot;今日不限行&quot;);                    }                } else {                    window.alert(&quot;请输入有效的车牌号&quot;);                }            } else {                window.alert(&quot;请输入有效的车牌号&quot;);            }            function shutdown() {                if (window.confirm(&quot;你确定要关闭吗？&quot;)) {                    window.close();                }            }            function openBaidu() {                window.open(&quot;https:www.baidu.com&quot;)            }            var name = window.prompt(&quot;请输入你的名字：&quot;)            if (name != null) window.alert(&quot;你好&quot; + name + &quot;!&quot;) : window.alert(&quot;大家好!&quot;)            var flag = true;            while (flag) {                var yearStr = window.prompt(&quot;请输入年份:&quot;);                var year = parseInt(yearStr);                if (year == yearStr &amp;&amp; year &gt; 0) {//                    if (year % 400 == 0 || year % 4 == 0 &amp;&amp; year % 100 != 0) {                    if (year % 4 == 0 &amp;&amp; year % 100 != 0                         || year % 400 == 0) {                        window.alert(year + &quot;是闰年&quot;);                    } else {                        window.alert(year + &quot;不是闰年&quot;);                    }                    flag = window.confirm(&quot;是否继续？&quot;);                } else {                    window.alert(&quot;请输入有效的年份&quot;);                }            }        &lt;/script&gt;    &lt;/body&gt;&lt;/html&gt;</code></pre><h4 id="example"><a href="#example" class="headerlink" title="example"></a>example</h4><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html&gt;    &lt;head&gt;        &lt;meta charset=&quot;UTF-8&quot;&gt;        &lt;title&gt;&lt;/title&gt;        &lt;style type=&quot;text/css&quot;&gt;            *{                margin: 0;                padding: 0;            }            div{                width: 200px;                height: 200px;                color: red;                background-color:cornflowerblue ;                position: fixed;                right: 10px;                top: 10px;            }            #closeBtn{                /*固定定位*/                position: fixed;                right: 9px;            }            a {                position: relative;                top: 50px;            }        &lt;/style&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;div id=&quot;adv&quot;&gt;            恶意广告            &lt;button id=&quot;closeBtn&quot;&gt;关闭&lt;/button&gt;        &lt;/div&gt;        &lt;script&gt;            +function () {                var advDiv = document.querySelector(&quot;#adv&quot;);                var button = document.querySelector(&quot;#adv button&quot;);                var counter = 0;                button.addEventListener(&quot;click&quot;, function() {                    counter += 1;                    if (counter &lt; 5) {                        // 读取样式,先获取样式，然后更改样式                        var currentStyle =                             document.defaultView.getComputedStyle(advDiv);                        var newTop = parseInt(currentStyle.top) + 50;                        var newWidth = parseInt(currentStyle.width) + 100;                        var newHeight = parseInt(currentStyle.height) + 100;                        advDiv.style.width = newWidth + &quot;px&quot;;                        advDiv.style.height = newHeight + &quot;px&quot;;                        advDiv.style.top = newTop + &quot;px&quot;;                    } else {                        // 写样式                        advDiv.style.display = &quot;none&quot;;                    };                });            }();        &lt;/script&gt;    &lt;/body&gt;&lt;/html&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> practice </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery</title>
      <link href="/2018/03/02/%E5%89%8D%E7%AB%AF/jQuery/"/>
      <url>/2018/03/02/%E5%89%8D%E7%AB%AF/jQuery/</url>
      
        <content type="html"><![CDATA[<h3 id="下载jQuery库"><a href="#下载jQuery库" class="headerlink" title="下载jQuery库"></a>下载jQuery库</h3><pre><code class="html">&lt;!--加载本地的jQuery文件适合开发和测试使用--&gt;        &lt;script src=&quot;js/jQuery.min.js&quot;&gt;&lt;/script&gt;&lt;!--下面的适合商业项目通过CDN服务器来加速获取jQuery的JS文件--&gt;        &lt;script src=&quot; https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js&quot;&gt;&lt;/script&gt;</code></pre><h4 id="example1"><a href="#example1" class="headerlink" title="example1"></a>example1</h4><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html&gt;    &lt;head&gt;        &lt;meta charset=&quot;utf-8&quot;&gt;        &lt;title&gt;&lt;/title&gt;        &lt;style&gt;            * {                margin: 0;                padding: 0;            }            #container {                margin: 20px 50px;            }            #fruits li {                list-style: none;                width: 200px;                height: 50px;                font-size: 20px;                line-height: 50px;                background-color: cadetblue;                color: white;                text-align: center;                margin: 2px 0;            }            #fruits&gt;li&gt;a {                float: right;                text-decoration: none;                color: white;                position: relative;                right: 5px;            }            #fruits~input {                border: none;                outline: none;                font-size: 18px;            }            #fruits~input[type=text] {                border-bottom: 1px solid darkgray;                width: 200px;                height: 50px;                text-align: center;            }            #fruits~input[type=button] {                width: 80px;                height: 30px;                background-color: coral;                color: white;                vertical-align: bottom;                cursor: pointer;            }        &lt;/style&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;div id=&quot;container&quot;&gt;            &lt;ul id=&quot;fruits&quot;&gt;                &lt;li&gt;苹果&lt;a href=&quot;javascript:void(0)&quot;&gt;×&lt;/a&gt;&lt;/li&gt;                &lt;li&gt;香蕉&lt;a href=&quot;javascript:void(0)&quot;&gt;×&lt;/a&gt;&lt;/li&gt;                &lt;li&gt;火龙果&lt;a href=&quot;javascript:void(0)&quot;&gt;×&lt;/a&gt;&lt;/li&gt;                &lt;li&gt;西瓜&lt;a href=&quot;javascript:void(0)&quot;&gt;×&lt;/a&gt;&lt;/li&gt;            &lt;/ul&gt;            &lt;input type=&quot;text&quot; name=&quot;fruit&quot;&gt;            &lt;input id=&quot;ok&quot; type=&quot;button&quot; value=&quot;确定&quot;&gt;        &lt;/div&gt;        &lt;script src=&quot;js/jQuery.min.js&quot;&gt;&lt;/script&gt;        &lt;script&gt;            //  JS是动态语言            //            //  jQuery对象的本质是一个伪数组            //  - 有lenght属性            //  - 可以通过下标获取数据            //  $函数的四种用法：            //  1.$函数的参数是一个函数 - 传入的函数是页面加载完成之后要执行的回调函数            //  2.$函数的参数是选择器字符串 - 获取页面上的标签而且转成jQuery对象（伪数组）            //   为什么要获取jQuery对象 - 因为jQuery对象有更多的封装好的方法可供调用            //  - 绑定/反绑定事件：on()/off()/one()            //  - 获取/修改标签内容：text（）/html()            //  - 获取/修改标签属性：attr(name,value)            //  - 添加子节点：append()/prepend()            //  - 删除/清空节点：remove()/empty()            //  - 修改样式表：css()   一个参数表示读样式，两个参数表示修改样式，JSON修改多个样式            //  - 获取父节点：parent（）            //  - 获取子节点：children（）            // - 相邻的上一个兄弟：上一个兄弟prev()/下一个兄弟next()            //  3.$函数的参数是标签字符串 - 创建标签并且返回对应的jQuery对象            //  4.$函数的参数是原生JS对象 - 将原生JS对象转成jQuery对象            //  如何将jQuery对象转换成原生对象  - 如果bar是一个jQuery对象可以通过bar[0] / bar.get(0)            // $(document).ready(function() {});            $(function() {                function deleteItem(evt) {                    $(evt.target).parent().remove();                }                $(&quot;#fruits a&quot;).on(&quot;click&quot;, deleteItem);                $(&quot;#ok&quot;).on(&quot;click&quot;, function() {                    var fruitName = $(&quot;#container input[type=text]&quot;).val().trim();                    if (fruitName.length &gt; 0) {                        $(&quot;#fruits&quot;).append(                            $(&quot;&lt;li&gt;&quot;).text(fruitName).append(                                // attr  创建标签，（属性，属性值）                                $(&quot;&lt;a&gt;&quot;).text(&quot;×&quot;).attr(&quot;href&quot;,&quot;javascript:void(0);&quot;)                                    .on(&quot;click&quot;,deleteItem)                            )                        );                    }                });     //  on 绑定/one   绑定只能用一次的按钮/off  反绑定            });        &lt;/script&gt;    &lt;/body&gt;&lt;/html&gt;</code></pre><h4 id="example2"><a href="#example2" class="headerlink" title="example2"></a>example2</h4><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html&gt;    &lt;head&gt;        &lt;meta charset=&quot;UTF-8&quot;&gt;        &lt;title&gt;&lt;/title&gt;        &lt;style&gt;            #data {                border-collapse: collapse;            }            #data td, #data th {                width: 120px;                height: 40px;                text-align: center;                border: 1px solid black;            }            #buttons {                margin: 10px 0;            }        &lt;/style&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;div id=&quot;big&quot;&gt;        &lt;table id=&quot;data&quot;&gt;            &lt;caption&gt;数据统计表&lt;/caption&gt;            &lt;tr&gt;                &lt;th&gt;姓名&lt;/th&gt;                &lt;th&gt;年龄&lt;/th&gt;                &lt;th&gt;性别&lt;/th&gt;                &lt;th&gt;身高&lt;/th&gt;                &lt;th&gt;体重&lt;/th&gt;            &lt;/tr&gt;            &lt;tr&gt;                &lt;td&gt;Item1&lt;/td&gt;                &lt;td&gt;Item2&lt;/td&gt;                &lt;td&gt;Item3&lt;/td&gt;                &lt;td&gt;Item4&lt;/td&gt;                &lt;td&gt;Item5&lt;/td&gt;            &lt;/tr&gt;            &lt;tr&gt;                &lt;td&gt;Item1&lt;/td&gt;                &lt;td&gt;Item2&lt;/td&gt;                &lt;td&gt;Item3&lt;/td&gt;                &lt;td&gt;Item4&lt;/td&gt;                &lt;td&gt;Item5&lt;/td&gt;            &lt;/tr&gt;            &lt;tr&gt;                &lt;td&gt;Item1&lt;/td&gt;                &lt;td&gt;Item2&lt;/td&gt;                &lt;td&gt;Item3&lt;/td&gt;                &lt;td&gt;Item4&lt;/td&gt;                &lt;td&gt;Item5&lt;/td&gt;            &lt;/tr&gt;            &lt;tr&gt;                &lt;td&gt;Item1&lt;/td&gt;                &lt;td&gt;Item2&lt;/td&gt;                &lt;td&gt;Item3&lt;/td&gt;                &lt;td&gt;Item4&lt;/td&gt;                &lt;td&gt;Item5&lt;/td&gt;            &lt;/tr&gt;            &lt;tr&gt;                &lt;td&gt;Item1&lt;/td&gt;                &lt;td&gt;Item2&lt;/td&gt;                &lt;td&gt;&lt;a&gt;Item3&lt;/a&gt;&lt;/td&gt;                &lt;td&gt;Item4&lt;/td&gt;                &lt;td&gt;Item5&lt;/td&gt;            &lt;/tr&gt;            &lt;tr&gt;                &lt;td&gt;Item1&lt;/td&gt;                &lt;td&gt;Item2&lt;/td&gt;                &lt;td&gt;Item3&lt;/td&gt;                &lt;td&gt;Item4&lt;/td&gt;                &lt;td&gt;&lt;a&gt;Item5&lt;/a&gt;&lt;/td&gt;            &lt;/tr&gt;        &lt;/table&gt;        &lt;/div&gt;        &lt;div id=&quot;buttons&quot;&gt;            &lt;button id=&quot;pretty&quot;&gt;美化表格&lt;/button&gt;            &lt;button id=&quot;clear&quot;&gt;清除数据&lt;/button&gt;            &lt;button id=&quot;remove&quot;&gt;删单元格&lt;/button&gt;            &lt;button id=&quot;add&quot;&gt;添加一行&lt;/button&gt;            &lt;button id=&quot;hide&quot;&gt;隐藏表格&lt;/button&gt;        &lt;/div&gt;        &lt;!--加载本地的jQuery文件适合开发和测试使用--&gt;        &lt;script src=&quot;js/jQuery.min.js&quot;&gt;&lt;/script&gt;        &lt;!--下面的适合商业项目通过CDN服务器来加速获取jQuery的JS文件--&gt;        &lt;!--&lt;script src=&quot;&lt;script src=&quot;https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js&quot;&gt;&lt;/script&gt;&quot;&gt;&lt;/script&gt;--&gt;        &lt;script&gt;            $(function() {                // on 绑定事件，off 反绑定事件                $(&quot;#hide&quot;).on(&quot;click&quot;, function() {                    // 根据样式表选择器获取元素，获取到的不是原生的JS对象                    // 而是京城jQuery封装之后的对象                    // css 读写样式表                    $(&quot;#data&quot;).css(&quot;visibility&quot;, &quot;hidden&quot;);                    // $(&quot;#data&quot;).hide(2000);  两秒隐藏                });                $(&quot;#remove&quot;).on(&quot;click&quot;, function() {                    $(&quot;#data tr:gt(0):last-child&quot;).remove();                });                $(&quot;#clear&quot;).on(&quot;click&quot;, function() {                    $(&quot;#data tr:gt(0)&gt;td&quot;).text(&quot; &quot;);                });                $(&quot;#pretty&quot;).on(&quot;click&quot;, function() {                    // gt(0) ---- 跳过表头； odd ------ 表示奇数行，从0开始的；even 与 odd 相反                    $(&quot;#data tr:gt(0):odd&quot;)                        .css(&quot;background-color&quot;,&quot;lightblue&quot;)                        .css(&quot;font-size&quot;, &quot;30px&quot;);                    $(&quot;#data tr:gt(0):even&quot;).css({                        &quot;background-color&quot;: &quot;red&quot;,                        &quot;font-size&quot;: &quot;20px&quot;,                    });                });            });        &lt;/script&gt;    &lt;/body&gt;&lt;/html&gt;</code></pre><h4 id="example-恶意广告"><a href="#example-恶意广告" class="headerlink" title="example-恶意广告"></a>example-恶意广告</h4><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html&gt;    &lt;head&gt;        &lt;meta charset=&quot;UTF-8&quot;&gt;        &lt;title&gt;&lt;/title&gt;        &lt;style type=&quot;text/css&quot;&gt;            *{                margin: 0;                padding: 0;            }            div{                width: 200px;                height: 200px;                color: red;                background-color:cornflowerblue ;                position: fixed;                right: 10px;                top: 10px;            }            #closeBtn{                /*固定定位*/                position: fixed;                right: 9px;            }            a {                position: relative;                top: 50px;            }        &lt;/style&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;div id=&quot;adv&quot;&gt;            恶意广告            &lt;button id=&quot;closeBtn&quot;&gt;关闭&lt;/button&gt;        &lt;/div&gt;        &lt;script&gt;            +function () {                var advDiv = document.querySelector(&quot;#adv&quot;);                var button = document.querySelector(&quot;#adv button&quot;);                var counter = 0;                button.addEventListener(&quot;click&quot;, function() {                    counter += 1;                    if (counter &lt; 5) {                        // 读取样式,先获取样式，然后更改样式                        var currentStyle =                             document.defaultView.getComputedStyle(advDiv);                        var newTop = parseInt(currentStyle.top) + 50;                        var newWidth = parseInt(currentStyle.width) + 100;                        var newHeight = parseInt(currentStyle.height) + 100;                        advDiv.style.width = newWidth + &quot;px&quot;;                        advDiv.style.height = newHeight + &quot;px&quot;;                        advDiv.style.top = newTop + &quot;px&quot;;                    } else {                        // 写样式                        advDiv.style.display = &quot;none&quot;;                    };                });            }();        &lt;/script&gt;    &lt;/body&gt;&lt;/html&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web-daytwo</title>
      <link href="/2018/01/23/%E5%89%8D%E7%AB%AF/web-daytwo/"/>
      <url>/2018/01/23/%E5%89%8D%E7%AB%AF/web-daytwo/</url>
      
        <content type="html"><![CDATA[<h4 id="进入虚拟环境"><a href="#进入虚拟环境" class="headerlink" title="进入虚拟环境"></a>进入虚拟环境</h4><ul><li>env/djenv6/Scripts/activate<ul><li>将代码放到code文件中,从虚拟环境中，进入code文件夹</li></ul></li><li>退出虚拟环境 ——- deactivate</li></ul><h4 id="启动一个脚本文件："><a href="#启动一个脚本文件：" class="headerlink" title="启动一个脚本文件："></a>启动一个脚本文件：</h4><p><img src="/2018/01/23/前端/web-daytwo/QQ截图20181023121317.png" alt="QQ截图20181023121317"></p><ul><li><p>Run -&gt; Debug Configurations —- 修改</p><ul><li>Parameters 改成 runserver 8080</li></ul></li><li><p>引入Django模块</p></li><li><p>修改settings中的DATABASE的数据</p><p><img src="/2018/01/23/前端/web-daytwo/QQ截图20181023141556.png" alt="QQ截图20181023141556"></p></li></ul><h4 id="在model中创建表格模型"><a href="#在model中创建表格模型" class="headerlink" title="在model中创建表格模型"></a>在model中创建表格模型</h4><p>1.在settings中的INSTALLED_APPS中添加app</p><p><img src="/2018/01/23/前端/web-daytwo/QQ截图20181023121548.png" alt="QQ截图20181023121548"></p><p>2.执行python manage.py startapp app</p><p>3.执行python manage.py makemiigrations</p><ul><li>Provide a one-off default now (will be set on all existing rows) ——— 缺少一个默认值</li></ul><p>4.再执行python manage.py migrate  —- 迁移表格</p><p>注意：如果执行后没有生成迁移文件，一直提示<strong>No changes detected</strong>这个结果的话，就要手动的去处理了</p><ul><li><p>处理方式一：</p><ul><li>先删除_pycache__文件夹</li><li>直接强制的去执行迁移命令，python manage.py makemigrations xxx (xxx就是app的名称)</li><li>查看自动生成的数据库，查看表django_migrations,删掉app字段为xxx的数据（xxx就是app的名称）</li></ul></li><li><p>处理方式二</p><ul><li><p>执行迁移生成数据库</p><p><strong><code>python manage.py migrate</code></strong></p><p>注意：生成迁移文件的时候，并没有在数据库中生成对应的表，而是执行migrate命令之后才会在数据库中生成表</p></li></ul></li></ul><p>5.如果报错，查看Django_migrations的表格的最后一行</p><h4 id="表格中的操作"><a href="#表格中的操作" class="headerlink" title="表格中的操作"></a>表格中的操作</h4><ul><li>添加表格的列（定义字段）都写在models.py中创建的模型（类）中，定义字段，就表示定义这个类的对象的属性，然后执行上面的第三、四步骤就创建好了</li></ul><pre><code class="python">  from django.db import models  # Create your models here.  class Student(models.Model):      # 定义s_name字段，varchar类型，最长不超过6字符，唯一      s_name = models.CharField(max_length=6, unique=True)      # 定义s_age字段，int类型      s_age = models.IntegerField(default=18)      # 定义s_gender字段，bool型      s_gender = models.BooleanField(default=1)      # 定义create_time字段，创建时间      create_time = models.DateTimeField(auto_now_add=True, null=True)      # 定义operate_time字段，修改时间      operate_time = models.DateTimeField(auto_now=True, null=True)      class Meta:          # 定义模型迁移到数据库中的表格          db_table = &#39;student&#39;</code></pre><h5 id="（增）创建表格中的数据（1）："><a href="#（增）创建表格中的数据（1）：" class="headerlink" title="（增）创建表格中的数据（1）："></a>（增）创建表格中的数据（1）：</h5><ul><li><p><strong>1.url路由</strong></p><p>在urls.py –&gt; urlpatterns中添加一个url（正则表达式，调用views中的方法）</p></li></ul><pre><code class="python">    from app import views    urlpatterns = [        # 127.0.0.1:8080/admin/        url(r&#39;^admin/&#39;, admin.site.urls),        # 127.0.0.1/8080/hello/        url(r&#39;^hello/&#39;, views.hello),        # 127.0.0.1:8080/create_stu/        url(r&#39;^create_stu&#39;, views.create_stu)</code></pre><pre><code class="python">    def hello(request):        return HttpResponse(&#39;你好， hello！&#39;)    def create_stu(request):        # 创建学生        stu = Student()        stu.s_name = &#39;李二狗&#39;        stu.s_age = 20        stu.save()        return HttpResponse(&#39;创建成功&#39;)</code></pre><ul><li><p><strong>2.运行程序</strong></p><p>查看调用方法生成的ip地址，在数据库中就创建好了数据</p><p><img src="/2018/01/23/前端/web-daytwo/QQ截图20181023122235.png" alt="QQ截图20181023122235"></p></li></ul><h5 id="创建表格中的数据（2）"><a href="#创建表格中的数据（2）" class="headerlink" title="创建表格中的数据（2）"></a>创建表格中的数据（2）</h5><pre><code class="python">def create_stu(request):    Student.objects.create(s_name=&#39;小明&#39;)    return HttpResponse(&#39;创建成功&#39;)</code></pre><h5 id="（查）查询数据-："><a href="#（查）查询数据-：" class="headerlink" title="（查）查询数据 ："></a>（查）查询数据 ：</h5><p><strong>准确查询</strong></p><pre><code class="python">def sel_stu(request):    # 实现查询    # 查询所有的数据    stus = Student.objects.all()    # filter() 过滤    stus = Student.objects.filter(s_name=&#39;小明&#39;)    # first()获取第一个    # last()获取最后一个    stus = Student.objects.filter(s_age=20).first()    # get拿不到值和拿到多个值都会报错，filter不会报错，会取到空值    stus = Student.objects.get(s_age=20)    # 查询多个条件    stus = Student.objects.filter(s_age=20).filter(s_gender=1)    stus = Student.objects.filter(s_age=20, s_gender=1)    print(stu_names)    return HttpResponse(&#39;查询成功&#39;)</code></pre><p><strong>模糊查询</strong></p><pre><code class="python">def sel_stu(request):# 模糊查询 like &#39;%xxx%&#39; &#39;_xx&#39;    # 名字中含有&#39;吴&#39;字    stus = Student.objects.filter(s_name__contains=&#39;吴&#39;)    # 以小开头    stus = Student.objects.filter(s_name__startswith=&#39;小&#39;)    # 以小字结尾    stus = Student.objects.filter(s_name__endswith=&#39;小&#39;)    stu_names = [stu.s_name for stu in stus]    print(stu_names)    return HttpResponse(&#39;查询成功&#39;)</code></pre><p><strong>其它查询</strong></p><pre><code class="python">def sel_stu(request):    # 大于 gt/gte  小于 lt/lte    stus = Student.objects.filter(s_age__gt=18)    stus = Student.objects.filter(s_age__lt=18)    stus = Student.objects.filter(s_age__gte=18)    # 排序 order_by()    # 升序    stus = Student.objects.order_by(&#39;id&#39;)    # 降序    stus = Student.objects.order_by(&#39;-id&#39;)    # 查询部满足条件的数据    stus = Student.objects.exclude(s_age=20)    # 计数方法count(),len()    print(len(stus))    stus_count = stus.count()    print(stus_count)    # values()    stus_values = stus.values()    # id=pk    stus = Student.objects.filter(id=2)    stus = Student.objects.filter(pk=2)    stu_names = [stu.s_name for stu in stus]    print(stu_names)    return HttpResponse(&#39;查询成功&#39;)</code></pre>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web框架 </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS样式表</title>
      <link href="/2018/01/22/%E5%89%8D%E7%AB%AF/CSS%E6%A0%B7%E5%BC%8F%E8%A1%A8/"/>
      <url>/2018/01/22/%E5%89%8D%E7%AB%AF/CSS%E6%A0%B7%E5%BC%8F%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="CSS显示"><a href="#CSS显示" class="headerlink" title="CSS显示"></a>CSS显示</h2><p>&emsp;&emsp;css 是 web 标准中的表现标准，专门用来对网页标签进行布局和设置样式的一门语言，目前使用css3，css 又名层叠样式表.</p><h4 id="CSS代码的位置"><a href="#CSS代码的位置" class="headerlink" title="CSS代码的位置"></a>CSS代码的位置</h4><p><strong>1.内联样式</strong></p><p>&emsp;&emsp;将样式表写在标签的 style 的属性中</p><p><strong>2.内部样式</strong></p><p>&emsp;&emsp;将样式表也在 head 中的 style 中的标签中，只可用于当前的 html 文件</p><p><strong>3.外部样式</strong></p><p>&emsp;&emsp;在外面新建一个 css 后缀的样式文件，并通过 link 引入到 html 文件中，可用于所有的 html 文件中</p><pre><code class="html">link标签：作用：导入外部文件用法：&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;theme.css&quot;&gt;    rel：说明属性的功能    type：设置导入文件的类型    href：导入的 css 文件的位置</code></pre><h4 id="CSS基本语法"><a href="#CSS基本语法" class="headerlink" title="CSS基本语法"></a>CSS基本语法</h4><p>&emsp;&emsp;选择器{属性:属性值:属性:属性值:多个属性}<br>说明：<br>​    选择器：用来选中/确定需要设置样式的标签<br>​    属性与属性值之间用冒号连接；属性与属性之间用分号隔开</p><ul><li>注释：/<em> 用来解释代码，但不执行 </em>/</li><li>颜色表示<ul><li>颜色的英文单词</li><li>‘#’ + 颜色的十六进制值</li><li>rgb(r, g, b)或者 rgba (r, g, b, alpha); r/g/b 的范围(0,255),alpha 范围(0,1)</li></ul></li><li>常用的属性</li></ul><p><img src="/2018/01/22/前端/CSS样式表/常用的属性.png" alt="常用的属性"></p><h4 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h4><pre><code class="html">作用：选中需要添加样式的标签内联样式优先级最高优先级1：1.就近原则；2.具体性原则；3.重要性原则（!important）优先级2：权重值越大，优先级越高权重：元素选择器（1）、id 选择器（4）、类选择器（2）、群组选择器（看单独一个）、父子选择器（所有选择器权重之和）、为类选择器（1）</code></pre><ul><li>元素选择器<ul><li>注解：将标签名作为选择器，选中所有指定的标签</li><li>用法：标签名{样式}</li></ul></li><li>id选择器<ul><li>注解：通过标签的 id 属性，来定位到某一个特定的标签，或者所有相同 id 的标签，并设置样式</li><li>用法：#id{样式}</li></ul></li><li>class选择器<ul><li>注解：将标签的类属性作为定位的标准，将所有带有这个类的标签选出来，并设置样式</li><li>用法：    点类选择器{样式}</li></ul></li><li>群组选择器<ul><li>注解：多个选择器之间用逗号隔开作为一个选择器，同时选中所有的选择器对应的标签</li><li>用法：#id，p,div{样式}</li></ul></li><li>后代选择器<ul><li>注解：又名包含选择器/父子选择器，可以多类选择器进行组合</li><li>用法：用来选择特定元素或元素组的后代，将对父元素的选择放在前面，对子元素的选择放在后面，中间加一个空格分开。后代选择器中的元素不仅仅只能有两个，对于多层祖先后代关系，可以有多个空格加以分开，如id为a、b、c的三个元素，则后代选择器可以写成#a #b #c{}的形式，只要对祖先元素的选择在后代元素之前、中间以空格分开即可。</li></ul></li><li>子选择器<ul><li>注解：请注意这个选择器与后代选择器的区别，子选择器（child selector）仅是指它的直接后代，或者你可以理解为作用于子元素的第一个后代。而后代选择器是作用于所有子后代元素。</li><li>用法：后代选择器通过空格来进行选择，而子选择器是通过“&gt;”进行选择。</li></ul></li><li>伪类选择器<ul><li></li><li>注解：选中某个标签的不同状态，可以给不同状态设置不同的样式</li><li>用法：<ul><li>a:Link    表示链接在没有被点击时的样式,选中所有 a 标签的初始状态,并设置标签原来的样式</li><li>‘#’a:Visited   表示链接已经被访问后的样式，选中所有 id 为 a 的标签，并设置访问后的样式</li><li>.b:Hover    表示当鼠标悬停在链接上面时的样式,选中所有的类属性为 b 的标签，并设置鼠标悬停时的样式</li><li>a:active    表示链接被激活即鼠标按下不放时的状态，选中所有 a 标签，并设置鼠标按下不放时的样式</li></ul></li></ul></li><li>通用选择器<ul><li>注解：通用选择器用（*）来表示。</li><li>用法：*{样式}</li></ul></li><li>兄弟选择器<ul><li>注解：选取相邻间的标签</li><li>用法：+和~的区别：类似上面一个，两者都表示兄弟关系，但是+必须是“大哥+二哥”，~还能是“大哥~三弟”、“二哥~四妹”</li></ul></li><li>属性选择器<ul><li>注解：属性选择器，是根据元素的属性来匹配的，其属性可以是标准属性也可以是自定义属性；!ie6，0 0 1 0；当然，也可以同时匹配多个属性；</li><li>用法:</li></ul></li></ul><pre><code class="html">attr=val {margin-right: 10px}  //选择属性 title 的值等于 this 的所有元素  attr^=val {margin-left: 15px}  //选择属性title的值以this开头的所有元素</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 选择器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django—框架</title>
      <link href="/2018/01/22/%E5%89%8D%E7%AB%AF/web-the-firstone/"/>
      <url>/2018/01/22/%E5%89%8D%E7%AB%AF/web-the-firstone/</url>
      
        <content type="html"><![CDATA[<h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a><em>框架</em></h2><h4 id="Django-Python-Web应用开发框架"><a href="#Django-Python-Web应用开发框架" class="headerlink" title="Django:Python Web应用开发框架"></a>Django:Python Web应用开发框架</h4><p>&emsp;&emsp;Django 应该是最出名的Python框架，GAE甚至Erlang都有框架受它影响。Django是走大而全的方向，它最出名的是其全自动化的管理后台：只需要使用起ORM，做简单的对象定义，它就能自动生成数据库结构、以及全功能的管理后台。</p><h4 id="Flask：一个用Python编写的轻量级Web应用框架"><a href="#Flask：一个用Python编写的轻量级Web应用框架" class="headerlink" title="Flask：一个用Python编写的轻量级Web应用框架"></a>Flask：一个用Python编写的轻量级Web应用框架</h4><p>&emsp;&emsp;Flask是一个使用Python编写的轻量级Web应用框架。基于Werkzeug WSGI工具箱和Jinja2<br>模板引擎。Flask也被称为“microframework”，因为它使用简单的核心，用extension增加其他功能。Flask没有默认使用的数<br>据库、窗体验证工具.</p><h4 id="Cubes：轻量级Python-OLAP框架"><a href="#Cubes：轻量级Python-OLAP框架" class="headerlink" title="Cubes：轻量级Python OLAP框架"></a>Cubes：轻量级Python OLAP框架</h4><p>&emsp;&emsp;Cubes是一个轻量级Python框架，包含OLAP、多维数据分析和浏览聚合数据（aggregated data）等工具.</p><h4 id="Pulsar：Python的事件驱动并发框架"><a href="#Pulsar：Python的事件驱动并发框架" class="headerlink" title="Pulsar：Python的事件驱动并发框架"></a>Pulsar：Python的事件驱动并发框架</h4><p>&emsp;&emsp;Pulsar是一个事件驱动的并发框架，有了pulsar，你可以写出在不同进程或线程中运行一个或多个活动的异步服务器.</p><h4 id="Web2py：全栈式Web框架"><a href="#Web2py：全栈式Web框架" class="headerlink" title="Web2py：全栈式Web框架"></a>Web2py：全栈式Web框架</h4><p>&emsp;&emsp;Web2py是一个为Python语言提供的全功能Web应用框架，旨在敏捷快速的开发Web应用，具有快速、安全以及可移植的数据库驱动的应用，兼容Google App Engine.</p><h4 id="Scrapy：Python的爬虫框架"><a href="#Scrapy：Python的爬虫框架" class="headerlink" title="Scrapy：Python的爬虫框架"></a>Scrapy：Python的爬虫框架</h4><p>&emsp;&emsp;Scrapy是一个使用Python编写的，轻量级的，简单轻巧，并且使用起来非常的方便.</p><h2 id="Django"><a href="#Django" class="headerlink" title="Django"></a><em>Django</em></h2><h4 id="MVC："><a href="#MVC：" class="headerlink" title="MVC："></a>MVC：</h4><p>M(模型层)、V(视图层)、C(业务层)</p><p>&emsp;&emsp;MVC（Model View Controller）是模型-视图-控制器，一种软件设计典范，用一种业务逻辑、数据、界面显示分离的方法组织代码，将业务逻辑狙击到一个部件里，在改进和个性化定制界面及用户交互的同时，不需要重新编写业务逻辑。MVC被独特的发展起来用于映射传统的输入、处理和输出功能在一个逻辑的图形化用户界面的结构中。通俗的来讲就是，强制性的使应用程序的输入，处理和输出分开。</p><p><img src="/2018/01/22/前端/web-the-firstone/QQ截图20181022103251.png" alt="QQ截图20181022103251"></p><h4 id="MVT："><a href="#MVT：" class="headerlink" title="MVT："></a>MVT：</h4><p>M(模型层)、V(视图：处理业务逻辑)、T(模板Template：html)</p><p>&emsp;&emsp;严格来说，Django的模式应该是MVT模式，本质上和MVC没什么区别，也是各组件之间为了保持松耦合关系，只是定义上有些许不同。</p><p>Model： 负责业务与数据库(ORM)的对象</p><p>View： 负责业务逻辑并适当调用Model和Template</p><p>Template: 负责把页面渲染展示给用户</p><p>注意： Django中还有一个url分发器，也叫作路由。主要用于将url请求发送给不同的View处理，View在进行相关的业务逻辑处理。</p><h2 id="安装Django和创建Django的虚拟环境"><a href="#安装Django和创建Django的虚拟环境" class="headerlink" title="安装Django和创建Django的虚拟环境"></a><em>安装Django和创建Django的虚拟环境</em></h2><h4 id="创建虚拟环境（1）"><a href="#创建虚拟环境（1）" class="headerlink" title="创建虚拟环境（1）"></a>创建虚拟环境（1）</h4><h5 id="操作命令"><a href="#操作命令" class="headerlink" title="操作命令"></a>操作命令</h5><h5 id="VIRTUALENV创建虚拟环境"><a href="#VIRTUALENV创建虚拟环境" class="headerlink" title="VIRTUALENV创建虚拟环境"></a>VIRTUALENV创建虚拟环境</h5><p>1.在cmd中能通过python去启动，如果不可以，直接跳到第三部</p><p><img src="/2018/01/22/前端/web-the-firstone/python.png" alt="python"></p><p>2.在cmd中能通过pip3启动安装软件，如果不可以直接跳到第三步</p><p><img src="/2018/01/22/前端/web-the-firstone/pip3.png" alt="pip3"></p><p>3.配置python环境和pip环境</p><p><img src="/2018/01/22/前端/web-the-firstone/python_pip_envir.png" alt="python_pip_envir"></p><p>4.确认pip安装成功，如果Scrip文件夹下没有pip可执行文件，则执行第五步</p><p>5.由于python3.6安装以后，在Scrip文件中没有pip的可执行软件，需要输入下一个命令进行安装</p><p><code>python -m ensurepip</code></p><p><img src="/2018/01/22/前端/web-the-firstone/ensurepip.png" alt="ensurepip"></p><p>注：现在在python的安装文件夹Scripts下就有pip.exe以及easy_install.exe等可执行文件了，就可以使用pip安装</p><h5 id="window中安装使用"><a href="#window中安装使用" class="headerlink" title="window中安装使用"></a>window中安装使用</h5><p>1.安装virtualenv</p><p><code>pip install virtualenv</code></p><p><img src="/2018/01/22/前端/web-the-firstone/pip_virtualenv.png" alt="pip_virtualenv"></p><p>2.创建虚拟环境</p><p>先查看一下安装虚拟环境有那些参数，是必须填写的</p><p><img src="/2018/01/22/前端/web-the-firstone/virtualenv_help.png" alt="virtualenv_help"></p><p>参数： –no-site-package 和-p参数</p><pre><code>创建纯净的虚拟环境：virtualenv --no-site-package  环境名</code></pre><p>以下是指定安装虚拟环境中的python版本和安装方式：</p><p>python版本3.6 + Django 1.11</p><p><img src="/2018/01/22/前端/web-the-firstone/virtualenv_env_p.png" alt="virtualenv_env_p"></p><p>3.进入/退出evn</p><pre><code>进入 cd env/Scripts/文件夹 在activate命令退出 deactivate</code></pre><p>ubuntu中安装使用</p><p>1.安装virtualenv</p><p><code>apt-get install python-virtualenv</code></p><p>2.创建包含python3版本的虚拟环境</p><p><code>virtualenv -p /usr/bin/python3 env</code></p><p>env代表创建的虚拟环境的名称</p><p>3.进入/退出env</p><pre><code>进入 source env/bin/activate    pip list    pip install django==1.11 ---------- 安装django    pip install PyMySQL ------------ 安装PyMySQL退出 deactivate</code></pre><p>4.pip使用</p><p>查看虚拟环境下安装的所有包</p><p><code>pip list</code></p><p>查看虚拟环境中通过pip安装的包</p><p><code>pip freeze</code></p><h4 id="创建虚拟环境（2）"><a href="#创建虚拟环境（2）" class="headerlink" title="创建虚拟环境（2）"></a>创建虚拟环境（2）</h4><p>1.新建文件夹  ——–&gt;  env</p><p>2.在env中 新建文件 ——— djenv6</p><p>3.在djenv6中，保存pip所有需要的文件</p><p>4.通过<code>pip list</code>查看虚拟环境下安装的所有包</p><p>5.安装Django</p><p><code>pip install django==1.11</code></p><h2 id="在Django的虚拟环境中"><a href="#在Django的虚拟环境中" class="headerlink" title="在Django的虚拟环境中"></a><em>在Django的虚拟环境中</em></h2><ul><li><p>创建项目</p><p><code>django-admin startproject day01</code></p></li><li><p>在python中打开文件</p><p><img src="/2018/01/22/前端/web-the-firstone/QQ截图20181022171438.png" alt="QQ截图20181022171438"></p><ul><li><strong>init</strong>.py：说明该目录结构是一个python包，会在后期被用来初始化一些工具。</li><li>seetings.py：Django项目的配置文件，其中定义了本项目的引用组件，项目名，数据库，静态资源，调试模式，域名限制等，可以用来修改一些文件设置。</li><li>urls：项目的URL路由映射，实现客户端请求的url由那个模块进行响应。</li><li>wsgi.py：定义WSGI接口信息，通常本文件生成后无需改动。</li><li>manage.py：是Django用于管理本项目的管理集工具，之后站点运行，数据库自动生成，数据表的修改等都是通过该文件完成。</li></ul></li><li><p>Django驱动页面</p><p><code>python manage.py runserver</code></p></li><li><p>修改Django的驱动页面的语言设置</p></li></ul><p>中文和时区设置：</p><p><img src="/2018/01/22/前端/web-the-firstone/QQ截图20181022152640.png" alt="QQ截图20181022152640"></p><p>英文和时区设置：</p><p><img src="/2018/01/22/前端/web-the-firstone/F:/hexo\source\_posts\web-the-firstone\QQ截图20181022152916.png" alt="QQ截图20181022152916"></p><ul><li><p>启动Django的方法</p><p><code>python manage.py runserver 8080</code></p><p><code>python manage.py runserver IP:8080</code></p></li><li><p>访问管理后台 ——- admin</p><p><code>http://127.0.0.1:8080/admin</code></p></li><li><p>修改数据库的配置 ——– settings.py</p><p><code>ENGINE, USER, PASSWORD, HOST, PORT, NAME</code></p></li><li><p>将Django中自带的模型迁移（映射）到数据库中</p><p><code>python manage.py migrate</code></p></li><li><p>安装数据库驱动</p><p><code>pip install pymysql</code></p></li><li><p>初始化数据库的驱动<strong>__</strong>init__.py</p><pre><code class="python">import pymysqlpymysql.install__as__mysqldb()</code></pre></li><li><p>设置Django后台账户和密码</p><pre><code class="python">python manage.py createsuperuserpython manage.py changepassword</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS属性</title>
      <link href="/2018/01/16/%E5%89%8D%E7%AB%AF/CSS%E5%B1%9E%E6%80%A7/"/>
      <url>/2018/01/16/%E5%89%8D%E7%AB%AF/CSS%E5%B1%9E%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h3 id="标准流布局"><a href="#标准流布局" class="headerlink" title="标准流布局"></a>标准流布局</h3><p>&emsp;&emsp;在标准流中</p><ul><li>块级标签：是一个占一行，默认宽度是父标签的宽度，默认高度是内容的高度；并且可以设置宽度和高度</li><li>行内标签：一行可以显示多个，默认宽高都是内容的高度，设置宽高无效</li><li>行内块标签：一行可以显示多个，默认宽高都是内容的高度，设置宽高有效</li></ul><h3 id="display属性"><a href="#display属性" class="headerlink" title="display属性"></a>display属性</h3><p>设置标签的性质</p><ul><li>block：将标签设置为块级标签</li><li>inline-block：将标签设置为行内块标签，可以设置宽高</li><li>inline：将标签设置为行内标签，不可以设置宽高</li></ul><h3 id="float属性"><a href="#float属性" class="headerlink" title="float属性"></a>float属性</h3><p>设置浮动之后，元素会（脱离标准流）脱流</p><ul><li>效果：消除两个div之间的空白可以用float(浮动)；文字环绕的效果，将被环绕的元素设置为浮动</li><li>注意：绝对定位的元素，float属性无效</li></ul><h5 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h5><p><strong>1.清除浮动指的是清除因为浮动而产生的高度塌陷问题</strong></p><p><strong>2.高度塌陷</strong></p><ul><li>当父标签不浮动，并且不设置高度，但是子标签浮动的时候，就会产生高度塌陷的问题</li></ul><p><strong>3.清除浮动的方法</strong></p><ul><li>添加空的div标签：在父标签的后面添加一个空的div，并且设置样式<strong>clear:both</strong></li><li>在会出现塌陷的标签中设置<strong>overflow:hidden</strong>这个样式</li></ul><h3 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h3><p>分为内容、padding、border、margin四个部分</p><h5 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h5><ul><li>属性<ul><li>可见的，设置width和height实质就是设置内容的大小，默认大小与标签中的内容有关</li><li>添加子标签或者设置文字内容都是添加或者显示在内容部分的</li><li>设置背景颜色(background-color)会作用于内容部分</li></ul></li></ul><h5 id="padding"><a href="#padding" class="headerlink" title="padding"></a>padding</h5><ul><li>属性<ul><li>可见的，分上下左右四个部分，一般默认都是0</li><li>设置背景颜色(background-color)会作用于padding部分</li></ul></li><li>作用<ul><li>设置内容与边界之间的距离</li></ul></li></ul><h5 id="border"><a href="#border" class="headerlink" title="border"></a>border</h5><ul><li>属性<ul><li>可见的，分上下左右四个部分，默认为0</li><li>border的背景颜色需要单独设置</li></ul></li><li>格式<ul><li>border：边框样式 边框颜色 边框线的宽度</li><li>线的样式：solid(实线) / double(双实线) / dashed(点划线) / dotted(虚线)</li></ul></li></ul><h5 id="margin"><a href="#margin" class="headerlink" title="margin"></a>margin</h5><ul><li>属性<ul><li>不可见，但是占位置；分上下左右四个部分，默认值为0</li></ul></li></ul><h3 id="其他属性"><a href="#其他属性" class="headerlink" title="其他属性"></a>其他属性</h3><h5 id="字体相关的属性"><a href="#字体相关的属性" class="headerlink" title="字体相关的属性"></a>字体相关的属性</h5><ul><li>字体的颜色：color</li><li>字体大小：font-size</li><li>字体加粗：font-weight（bolder(更粗)、bold（加粗）、normal（常规））</li><li>字体倾斜：font-style（italic/oblique/normal )</li><li>对齐方式：text-align：left、right、center</li><li>垂直方向居中，只针对一行文字：line-height 属性的值与高度设置一样    </li><li>文本修饰：text-decoration（none、underline、overline、line-through）</li><li>首行缩进：text-indent（单位 em）</li><li>字间距：letter-spacing（像素 px / 空格 em /百分比%）</li><li>背景图片：background-image（url（）no-repeat（是否平铺）x 方向的坐标 y 方向的坐标 背景颜色）</li><li>设置圆角：border-radius</li></ul><h2 id="CSS动画效果"><a href="#CSS动画效果" class="headerlink" title="CSS动画效果"></a>CSS动画效果</h2><h4 id="产生动画效果的参考网址"><a href="#产生动画效果的参考网址" class="headerlink" title="产生动画效果的参考网址"></a><a href="http://www.runoob.com/cssref/css-animatable.html" target="_blank" rel="noopener">产生动画效果的参考网址</a></h4><pre><code class="python"># 动画的效果，写在内部（head）样式中，通过装饰器来实现效果# 设置颜色渐变：控制器（用来定位的）{    # 定位部分的样式表内容    animation: 控制器 5s infinite;    -webkit-animation: 控制器 5s infinite;}@keyframes 控制器{    from{background-color: 初始颜色;}    to{background-color: 渐变之后的颜色;}}@-webkit-keyframes 控制器{    from{background-color: 初始颜色;}    to{background-color: 渐变之后的颜色;}}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> float </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程</title>
      <link href="/2017/11/10/python/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
      <url>/2017/11/10/python/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h4 id="01-多线程技术"><a href="#01-多线程技术" class="headerlink" title="01-多线程技术"></a>01-多线程技术</h4><p>1.主线程<br>每个进程默认都会有一个线程，这个线程我们一般叫作主线程<br>默认情况下，我们所有的代码都在主线程中执行的<br>2.子线程<br>一个进程可以有多个线程，除了主线程以外，其它的线程需要手动添加<br>3.threading是Python中的一个内置模块，用来支持多线程<br>a.Thread类<br>Thread类的对象就是线程对象，需要线程的时候，就创建这个类或者这个类的子类对象<br>b.threading.currentThread()—》用来获取当前线程对象</p><pre><code class="python">import threadingimport datetimeimport time# 下载两个电影def download(file):    print(file + &#39;开始下载：&#39;, datetime.datetime.now())    # 让线程阻塞10秒    time.sleep(10)    print(file+&#39;下载结束&#39;, datetime.datetime.now())if __name__ == &#39;__main__&#39;:    # threading.Thread    print(&#39;主线程中的代码&#39;)    print(threading.currentThread())    # 1.在主线程中下载两个电影：用时20s    # download(&#39;西虹市首富&#39;)    download(&#39;沉默的羔羊&#39;)    # 2.在子线程中下载两个电影:用时10s    &#39;&#39;&#39;    Tread(target,args)    target:需要在子线程中调用的函数的函数名    args:函数的实参    返回值：创建好的线程对象    &#39;&#39;&#39;    t1 = threading.Thread(target= download,args=(&#39;西虹市首富&#39;,))    # 开始执行t1对应的线程任务    t1.start()    # t2 = threading.Thread(target= download,args=(&#39;沉默的羔羊&#39;,))    # # 想要在子线程中执行任务，必须通过线程对象调用start方法才行    # t2.start()    print(&#39;==========&#39;)</code></pre><h4 id="02-面向对象的多线程技术"><a href="#02-面向对象的多线程技术" class="headerlink" title="02-面向对象的多线程技术"></a>02-面向对象的多线程技术</h4><ul><li><p>1.声明一个类继承自Thread类</p></li><li><p>2.将需要在子线程中执行的任务放到run方法中</p></li><li><p>3.在需要子线程的位置去创建这个类的对象，然后用对象调用start方法去执行run中的任务</p></li></ul><pre><code class="python">from threading import Threadimport datetimeimport timefrom random import randint注意：继承的时候可以继承自己写的类，也可以继承别人写的类或者系统写的类class DownloadThread(Thread):    &#39;&#39;&#39;下载线程类&#39;&#39;&#39;    def __init__(self,file):        super().__init__()        self.file = file    def run(self):        print(self.file + &#39;开始下载：&#39;,datetime.datetime.now())        time.sleep(randint(5,10))        print(self.file + &#39;下载结束：&#39;,datetime.datetime.now())if __name__ == &#39;__main__&#39;:    print(&#39;==========&#39;)    t1 = DownloadThread(&#39;西虹市首富&#39;)    t1.start()    t2 = DownloadThread(&#39;黑客帝国&#39;)    t2.start()    print(&#39;+-+-+-+-+-&#39;)</code></pre><h4 id="03-join方法的使用"><a href="#03-join方法的使用" class="headerlink" title="03-join方法的使用"></a>03-join方法的使用</h4><p>如果希望某个线程结束后才进行的操作，就用那个线程调用join函数</p><pre><code class="python">from threading import Threadfrom random import randintimport timeimport datetimeclass DownloadThread(Thread):    def __init__(self,file):        super().__init__()        self.file = file    def run(self):        print(self.file+&#39;开始下载&#39;,datetime.datetime.now())        time.sleep(randint(5,15))        print(self.file+&#39;下载结束&#39;,datetime.datetime.now())if __name__ == &#39;__main__&#39;:    t1 = DownloadThread(&#39;美丽人生&#39;)    t2 = DownloadThread(&#39;怦然心动&#39;)    start = time.time()    tim1 = t1.start()    tim2 = t2.start()# 在两个子线程中下载两个电影，在主线程中统计两个电影下载的总时间# 系统t1和t2中的代码结束后才执行下面的代码    t1.join()  # 这句代码后面的代码在t1对应的线程结束后才执行    t2.join()    end = time.time()    print(end-start)</code></pre><h4 id="04-线程间的数据共享"><a href="#04-线程间的数据共享" class="headerlink" title="04-线程间的数据共享"></a>04-线程间的数据共享</h4><p>同步锁（RLock）和互斥锁(Lock)<br>模拟多个人对同一个账号进行操作</p><pre><code class="python">import timefrom threading import Thread,Lockclass Account:    &#39;&#39;&#39;账号类&#39;&#39;&#39;    def __init__(self,balance):        # 余额        self.balance = balance        # 创建锁的对象        self.lock = Lock()    # 存钱过程：读出原来的余额，确定钱的一系列操作，将原来的余额加上存的钱，产生新的余额，再保存    def save_money(self,amount):        &#39;&#39;&#39;存钱&#39;&#39;&#39;        print(&#39;开始存钱&#39;)        加锁        self.lock.acquire()        # 获取原来的余额        old_amount =  self.balance        # 模拟时间消耗        time.sleep(5)        # 修改余额        self.balance = old_amount + amount        print(&#39;存钱成功，余额是：&#39;,self.balance)        解锁        self.lock.release()    def get_money(self,amount):        &#39;&#39;&#39;取钱&#39;&#39;&#39;        print(&#39;开始取钱&#39;)        加锁        self.lock.acquire()        # 获取原来的余额        old_amount = self.balance        if old_amount &lt; amount:            print(&#39;余额不足&#39;)            return        time.sleep(5)        self.balance = old_amount - amount        print(&#39;取钱成功,余额是：&#39;,self.balance)        解锁        self.lock.release()    def show_balance(self):        print(&#39;当前余额：%d&#39;% self.balance)if __name__ == &#39;__main__&#39;:    # 创建账号    account = Account(1000)    # account.save_money(200)    # account.save_money(100)    # account.show_balance()    当多个线程对一个数据进行操作时，可能会出现数据混乱的问题    t1 = Thread(target= account.save_money,args= (200,))    t2 = Thread(target=account.save_money, args=(300,))    t1.start()    t2.start()</code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>网络基础</title>
      <link href="/2017/08/10/python/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
      <url>/2017/08/10/python/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="网络基础"><a href="#网络基础" class="headerlink" title="网络基础"></a>网络基础</h1><p><img src="https://upload-images.jianshu.io/upload_images/13692239-d478d708a75bd47b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="QQ截图20180912091833.png"></p><h1 id="OSI模型"><a href="#OSI模型" class="headerlink" title="OSI模型"></a>OSI模型</h1><p><img src="https://upload-images.jianshu.io/upload_images/13692239-7b10f9a3fd852c9c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="QQ截图20180912093725.png"></p><h1 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h1><p><img src="https://upload-images.jianshu.io/upload_images/13692239-a678e0ce57d6eb5b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="QQ截图20180912095634.png"></p><h1 id="数据解封"><a href="#数据解封" class="headerlink" title="数据解封"></a>数据解封</h1><p><img src="https://upload-images.jianshu.io/upload_images/13692239-03a2038434a08310.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="QQ截图20180912102845.png"></p><h1 id="数据封装"><a href="#数据封装" class="headerlink" title="数据封装"></a>数据封装</h1><p><img src="https://upload-images.jianshu.io/upload_images/13692239-2ba56eb24faf5b5a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="QQ截图20180912102912.png"></p><h1 id="TCP与UDP协议"><a href="#TCP与UDP协议" class="headerlink" title="TCP与UDP协议"></a>TCP与UDP协议</h1><p><img src="https://upload-images.jianshu.io/upload_images/13692239-27c665aaffa7841f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="QQ截图20180912103346.png"></p><h1 id="URL资源定位符"><a href="#URL资源定位符" class="headerlink" title="URL资源定位符"></a>URL资源定位符</h1><p><img src="https://upload-images.jianshu.io/upload_images/13692239-b6ca4b112783a7ea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="QQ截图20180912155858.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/13692239-d8527e8aec3c9697.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="QQ截图20180912160229.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/13692239-0959a0f6d1b20836.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="QQ截图20180912162055.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/13692239-10b24becca22a492.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="QQ截图20180912163328.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/13692239-4882deba9c48224d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="QQ截图20180912164450.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/13692239-e8b1d32861e5ad6a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="QQ截图20180912164737.png"></p><h4 id="01-socket编程"><a href="#01-socket编程" class="headerlink" title="01-socket编程"></a>01-socket编程</h4><h5 id="import-socket"><a href="#import-socket" class="headerlink" title="import socket"></a>import socket</h5><ul><li><p>socket又叫套接字，就是进行数据通信两端。分为服务端套接字和客户端套接字<br>套接字编程：自己写服务器或者客户端，进行数据传输<br>Python对socket编程的支持：提供一个socket的库（内置）</p><pre><code class="python">def creat_server():  &#39;&#39;&#39;写一个服务器&#39;&#39;&#39;  1.创建套接字对象  &#39;&#39;&#39;  socket(family,type)  a.family:  确定IP协议类型  AF_INET:  ipv4  AF_INET6:  ipv6  b.type:  传输协议类型  SOCK_STREAM:  TCP协议  SOCK_DGRAM:  UDP协议  &#39;&#39;&#39;  server = socket.socket()  2.绑定IP地址和端口  &#39;&#39;&#39;  bind((ip地址，端口))  端口：一台电脑上一个端口标记一个唯一的服务。  范围0-65535,0-1024是著名端口，专门用来标记一些特殊的服务，一般不用  但是，同一个端口同一时间只能绑定一个服务  &#39;&#39;&#39;  server.bind((&#39;10.7.153.190&#39;, 2000))  3.开始监听（监听客户端的请求）  &#39;&#39;&#39;  listen(最大监听个数)  同一时间能够连接的客户端的个数  &#39;&#39;&#39;  server.listen(10)  connect, addr = server.accept()  4.让服务器处于运行状态  while True:      print(&#39;================&#39;)      5.连接客户端（建立连接）,返回连接对象和客户端地址      这句代码会阻塞线程。直到有客户端来请求当前服务器为止      print(&#39;监听状态&#39;)      print(addr)      print(&#39;================&#39;)      6.服务器给客户端发送消息      &#39;&#39;&#39;      send(data)      data:python3中要求类型是bytes，Python2可以是字符串      1.字符串(str)转换成二进制（bytes）      字符串.encode（编码方式） ----》 编码方式默认值是&#39;utf-8&#39;      bytes(字符串，编码方式)      &#39;&#39;&#39;      message = input(&#39;客户端：&#39;)      connect.send(message.encode())      connect.send(bytes(message,&#39;utf-8&#39;))      if message == &#39;拜拜&#39;:          server.listen(10)          connect, addr = server.accept()          continue      print(&#39;=================&#39;)      7.接收从客户端发送过来的消息      注意：recv方法也会阻塞线程      &#39;&#39;&#39;      recv(bufsize)      bufsize:每次能够接收的最大的字节数      返回值：接收的数据，类型是bytes      2.二进制转换字符串：      二进制.decode()      str(二进制，编码方式)      &#39;&#39;&#39;      recv_datd = connect.recv(1024)      print(recv_datd.decode())      # print(str(recv_datd,&#39;utf-8&#39;))  8.断开连接  connect.close()</code></pre><h4 id="02-客户端"><a href="#02-客户端" class="headerlink" title="02-客户端"></a>02-客户端</h4><p><code>`</code>python<br>import socket</p></li></ul><p>def creat_client():<br>    1.创建套接字对象<br>    client = socket.socket()</p><pre><code>2.连接服务器&#39;&#39;&#39;connect(服务器地址)&#39;&#39;&#39;client.connect((&#39;10.7.153.190&#39;, 2000))while True:    3.接收服务器发送的消息    data = client.recv(1024)    print(data.decode(encoding=&#39;utf-8&#39;))    print(&#39;================&#39;)    4.给服务器发送消息    message = input(&#39;服务器：&#39;)    client.send(message.encode())    if message == &#39;拜拜&#39;:        break    print(&#39;================&#39;)5.断开连接client.close()</code></pre><p>if <strong>name</strong> == ‘<strong>main</strong>‘:<br>    creat_client()</p><pre><code>#### 03-图片服务器```pythonimport socketif __name__ == &#39;__main__&#39;:    1.创建套接字（）    server = socket.socket()    2.绑定地址（插电话线，绑定电话号码）    server.bind((&#39;10.7.153.190&#39;, 2000))    3.监听（人坐在电话旁）    server.listen(512)    # 保证电话被打通    while True:        4.接收请求（接电话）        connect,addr = server.accept()        print(addr)        5.发送数据（讲电话）        with open(&#39;./files/ksnm.jpg&#39;,&#39;br&#39;) as f:            data = f.read()        connect.send(data)        6.接收数据（听对方讲话）        # connect.recv(1024)        7.关闭连接（挂电话）        connect.close()</code></pre><h4 id="04-图片客户端"><a href="#04-图片客户端" class="headerlink" title="04-图片客户端"></a>04-图片客户端</h4><pre><code class="python">import socketif __name__ == &#39;__main__&#39;:    client = socket.socket()    client.connect((&#39;10.7.153.190&#39;, 2000))    创建一个空的二进制数据    all_data = bytes()    接收从服务器传回来的数据    data = client.recv(1024)    while data:        print(&#39;接收到数据&#39;)        all_data += data        data = client.recv(1024)    with open(&#39;./files/new.jpg&#39;,&#39;wb&#39;) as f:        f.write(all_data)    # print(all_data)    client.close()</code></pre><h4 id="05-http请求"><a href="#05-http请求" class="headerlink" title="05-http请求"></a>05-http请求</h4><pre><code class="python">import requestsif __name__ == &#39;__main__&#39;:    1.准备url()    url = &#39;https://www.apiopen.top/satinApi?type=1&amp;page=1&#39;    2.发送请求    &#39;&#39;&#39;    get(url,参数对应的字典)    post(url,参数对应的字典)    返回值是服务器返回的响应    &#39;&#39;&#39;    response = requests.get(url)    # requests.get(&#39;https://www.apiopen.top/satinApi&#39;,{&#39;type&#39;:1,&#39;page&#39;:1})    print(response)    3.通过响应获取服务器返回的数据    a.获取字符串类型的数据    print(response.text)    b.获取json格式的数据    print(response.json())    print(response.json()[&#39;msg&#39;])    c.获取二进制格式的数据    print(response.content)    4.获取响应头（了解）    print(response.headers)![QQ截图20180912091833.png](https://upload-images.jianshu.io/upload_images/13692239-087f21275d20c02a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类和对象</title>
      <link href="/2017/07/10/python/%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/"/>
      <url>/2017/07/10/python/%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h3 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h3><p>1.理论上的定义</p><p>类：就是拥有相同功能和相同属性的对象的集合（类是抽象的）</p><p>对象：类的实例（对象是具体的）</p><p>2.从生活的角度</p><p>如果说电脑是一个类，我桌上的这台电脑就是一个对象<br>如果说车是一个类，具体的一辆车就是一个对象</p><p>3.编程思想</p><p>面向过程编程：以算法为工具</p><p>函数式编程：以函数为工具</p><p>面向对象编程：以类和对象为工具（面向生活）</p><p>封装效果：一个类中可以对多个功能进行封装（多个函数），对多个属性进行封装</p><h3 id="类的声明"><a href="#类的声明" class="headerlink" title="类的声明"></a>类的声明</h3><p>1.类的声明格式<br>class 类名（父类列表）：<br>——类的说明文档<br>——类的内容<br>2说明：</p><ul><li>class：声明类的关键字</li><li>类名：标识符，不能是关键字。驼峰式命名（第一个单词首字母小写，其它的单词首字母大写），首字母大写！！！，见名知义<br>​    例如：Person、StudentSystem</li><li>(父类列表)：括号与括号里的内容可以省略，这个是继承语法</li><li>冒号：固定的</li><li>类的内容：包括类的方法和类的属性</li></ul><p>3.类中的方法<br>方法：声明在类中的函数</p><ul><li>a.对象方法：对象方法需要对象来调用，对象，函数名（）<br>直接写在类中的方法，自带一个self参数</li><li>b.类方法</li><li>c.静态方法</li></ul><p>4.创建对象<br>创建类的时候，系统会默认给我们创建这个类对应的构造方法<br>构造方法：类名（）–》创建类对应的对象</p><pre><code class="python"># 创建一个类class Person:    &#39;&#39;&#39;人类&#39;&#39;&#39;    def eat(self):        print(&#39;人吃饭&#39;)if __name__ == &#39;__main__&#39;:    # 创建对象    p1 = Person()    # 创建Person类的对象，并且将对象地址存到p1中    # 一个类可以有多个对象    p2 = Person()    # 只有在调用构造方法的时候才会产生新的对象    p3 = p2    print(id(p1),id(p2),id(p3))    # 2.调用对象    # 通过对象调用对象方法，默认参数self不需要传参，系统自动传参    p1.eat()</code></pre><h3 id="构造方法和init方法"><a href="#构造方法和init方法" class="headerlink" title="构造方法和init方法"></a>构造方法和init方法</h3><p>1.构造方法：系统自动创建，方法名和类名一样，用来创建对象<br>2.<strong>init</strong>:init方法的功能是用来做初始化和添加对象属性的<br>当我们通过构造方法去创建对象的时候，系统会自动调用init方法(不用主动调用init方法)</p><pre><code class="python">class Dog:    def __init__(self):        print(&#39;init方法&#39;)class Person:    # init方法可以添加参数    def __init__(self,name,age = 18):        print(name,age)        print(&#39;人类的init方法&#39;)if __name__ == &#39;__main__&#39;:    # 创建对象的过程：调用构造方法在内存中开辟空间创造一个对象，然后用新建的这个对象去调用init方法，    #                 来初始化对象的属性，最后才将对象返回    dog1 = Dog()    dog2 = Dog()    # 如果类的init方法有参数，通过给构造方法传参类init方法传参    p1 = Person(&#39;小明&#39;)    p2 = Person(&#39;小红&#39;,20)    p3 = Person(age = 20,name = &#39;东东&#39;)</code></pre><h3 id="对象属性"><a href="#对象属性" class="headerlink" title="对象属性"></a>对象属性</h3><p>类中的内容：属性和方法<br>1.属性:(保存值的)</p><ul><li>a.对象的属性：不同的对象，对应的值可能不一样，这样的属性就是对象属性属于对象<br>类中的对象属性是声明在init方法中的，并且声明格式：self.属性名 = 初值<br>对象属性的使用:对象，属性名</li><li>b.类的字段：属于类的，所有的对象对应的值是一样的</li></ul><p>2.方法：(保存功能的)</p><ul><li>a.对象方法</li><li>b.类方法</li><li>c.静态方法</li></ul><pre><code class="python">class Student:    &#39;&#39;&#39;学生类&#39;&#39;&#39;    def __init__(self):        # 声明对象属性name,age,id        self.name = &#39;李青&#39;        self.age = 0        self.id = &#39;001&#39;class Dog:    &#39;&#39;&#39;狗类&#39;&#39;&#39;    # 创建Dog的对象的时候，必须传类型和颜色    def __init__(self,type1,color1):        self.type = type1        self.color = color1class Computer:    &#39;&#39;&#39;电脑类&#39;&#39;&#39;    # 创建对象的时候可以使用默认值，也可以使用自己传的值    def __init__(self,color= &#39;白色&#39;,memory= 0):        self.color = &#39;&#39;        self.memory = 1000class  rectangle:    def __init__(self,long= 100,width= 50):        self.long = long        self.width = widthif __name__ == &#39;__main__&#39;:    # stu1就是Student类的对象    stu1 = Student()    # 通过对象去使用对象的属性    print(stu1.name,stu1.age,stu1.id)    # 通过对象去修改对象的属性    stu1.name = &#39;SB&#39;    print(stu1.name)    dog1 = Dog(&#39;土狗&#39;,&#39;黄色&#39;)    print(dog1.type,dog1.color)    dog2 =Dog(&#39;斗狗&#39;,&#39;黑色&#39;)    print(dog2.type,dog2.color)    comp1 = Computer()    print(comp1.color,comp1.memory)    comp2 = Computer(&#39;黑色&#39;,512)    print(comp2.color,comp2.memory)    sq =  rectangle()    print(sq.long,sq.width)    sq =  rectangle(10,5)    print(sq.long,sq.width)</code></pre><h3 id="对象属性的增删改查"><a href="#对象属性的增删改查" class="headerlink" title="对象属性的增删改查"></a>对象属性的增删改查</h3><p>Python是动态语言，Python中类的对象的属性可以进行增删的操作</p><pre><code class="python">class Person:    &#39;&#39;&#39;人类&#39;&#39;&#39;    def __init__(self):        self.name = &#39;李四&#39;        self.age = 18        self.height = 160</code></pre><h5 id="1-查"><a href="#1-查" class="headerlink" title="1.查"></a>1.查</h5><p>方法一：对象.属性<br>方法二：def getattr(对象，属性名，default=None)<br>方法三：对象._ <em>getattribute</em> _(‘height’)</p><pre><code class="python">print(p1.name)    # print(p1.nmae2)      # 属性不存在会报错print(getattr(p1,&#39;age2&#39;,0))    # 属性不存在可以通过设置默认值，让程序不崩溃，并且返回默认值 height = p1.__getattribute__(&#39;height&#39;)    print(height)</code></pre><h5 id="2-改（修改属性的值，属性存在）"><a href="#2-改（修改属性的值，属性存在）" class="headerlink" title="2.改（修改属性的值，属性存在）"></a>2.改（修改属性的值，属性存在）</h5><p>方法一：对象.属性 = 新值</p><pre><code class="python">p1.name = &#39;张三&#39;    print(p1.name)</code></pre><p>方法二：def setattr(对象，属性名，新值）</p><pre><code class="python">setattr(p1,&#39;age&#39;,20)    print(p1.age)</code></pre><p>方法三：对象._ <em>setattr</em> _(属性名，新值）</p><pre><code class="python"> p1.__setattr__(&#39;height&#39;,170)    print(p1.height)</code></pre><h5 id="3-增（增加属性）"><a href="#3-增（增加属性）" class="headerlink" title="3.增（增加属性）"></a>3.增（增加属性）</h5><p>注意：添加只能给某一个对象添加对应的属性<br>方法一：对象.属性 = 新值</p><pre><code class="python">p1.sex = &#39;女&#39;    print(p1.sex)</code></pre><p>方法二：def setattr(对象，属性名，新值)</p><pre><code class="python"> setattr(p1,&#39;weight&#39;,55)    print(p1.weight)</code></pre><p>方法三：对象.<strong>setattr</strong>(属性名，新值)</p><pre><code class="python">p1.__setattr__(&#39;color&#39;, &#39;绿色&#39;)    print(p1.color)    # print(p2.sex)        # 添加只影响一个对象</code></pre><h5 id="4-删（删除对象属性）"><a href="#4-删（删除对象属性）" class="headerlink" title="4.删（删除对象属性）"></a>4.删（删除对象属性）</h5><p>注意：删除只针对指定的对象<br>方法一：del 对象.属性</p><pre><code class="python">del p1.name    # print(p1.name)      可行</code></pre><p>方法二：delattr(对象，属性名)</p><pre><code class="python"> delattr(p1,&#39;age&#39;)    # print(p1.age)       可行</code></pre><p>方法三：对象._ <em>delattr</em> _(属性名）</p><pre><code class="python"> p1.__delattr__(&#39;height&#39;)    # print(p1.height)     可行    print(p2.name,p2.age)</code></pre><h3 id="对象方法"><a href="#对象方法" class="headerlink" title="对象方法"></a>对象方法</h3><p>1.对象方法：</p><ul><li>a.什么样的方法是对象方法：直接声明在类里面的函数默认是对象方法，有一个默认参数self</li><li>b.对象方法要通过对象来调用：对象.对象方法（）</li><li>c.对象方法中的默认参数self不需要传参，因为在调用这个方法的时候，<br>系统会自动将当前对象传给self，那个对象调用方法，self就指向谁</li></ul><pre><code class="python">import mathclass Circle:    &#39;&#39;&#39;圆类&#39;&#39;&#39;    def __init__(self,radius1):        self.radius = radius1    # 声明了一个对象方法area    # 在这，self就是调用area方法的对象，对象能做的事情，self都可以做    def area(self):        # print(id(self))        # print(&#39;求圆的面积&#39;)        return math.pi * self.radius **2</code></pre><ul><li>练习1：写一个矩形类，有属性长和宽,有两个功能，分别是求周长和面积<pre><code class="python">class Rectangle:  &#39;&#39;&#39;矩形类&#39;&#39;&#39;  def __init__(self,long,width):      self.long = long      self.width =width  # 对象方法是否需要额外参数，看实现函数的功能需不需要除了对象属性以外的其他数据  def area(self):      return self.long * self.width  def perimeter(self):      return (self.width + self.long) *2</code></pre></li><li>练习2：写一个班级类，班级里面有多个学生的一门成绩，班级名，可以获取班级成绩中的最高分<pre><code class="python">class Grade:  &#39;&#39;&#39;班级类&#39;&#39;&#39;  def __init__(self,class_name,*grade):      self.class_name = class_name      self.grade = grade      # self.grade = []  def top_score(self):      # if not self.grade:      #     return None      # max（序列）----》获取序列中元素的最大值      # min (序列）----》获取序列中元素的最小值      return max(self.grade)</code></pre><code>`</code>python<br>if <strong>name</strong> == ‘<strong>main</strong>‘:<br>  c1 = Circle(3)<br>  print(id(c1))<br>  print(‘c1的面积’,c1.area())</li></ul><pre><code>c2 = Circle(5)print(&#39;c2的面积&#39;, c2.area())g1 = Grade(&#39;python1806&#39;,90,80,70)print(g1.class_name)print(g1.top_score())g2 = Rectangle(10,5)print(g2.area())print(g2.perimeter())</code></pre><pre><code>### 类的字段1.类的属性叫类的字段- a.什么是类的字段  类的字段就是声明在类的里面，方法的外面的变量- b.什么样的属性声明成类的字段：  属于类的，对于这个类的所有的对象来说，其值是一样的- c.怎么使用  通过类使用：类.字段```pythonclass Person:    # number就是类的字段    number = 10</code></pre><p>练习：写一个球类，用一个属性来保存这个类的创建对象的个数</p><pre><code class="python">class Ball:     count = 0     # 每次创建球的对象都会调用init方法，所以调用init方法的次数就是Ball创建的对象的个数     def __init__(self):         Ball.count += 1ball1 = Ball()ball2 = Ball()print(Ball.count)if __name__ == &#39;__main__&#39;:    # 通过类获取类的字段的值    print(Person.number)    Person.number = 70    print(Person.number)</code></pre><h3 id="类的方法"><a href="#类的方法" class="headerlink" title="类的方法"></a>类的方法</h3><p>类中的方法</p><ul><li>1.对象方法（实例方法）<br>声明的形式：直接声明在类中<br>特点：自带一个不需要主动传参的默认参数self，谁来调用指向谁</li><li>2.类方法<br>声明形式：声明方法前需要使用@classmethod<br>特点：自带一个参数cls,这个参数调用的时候不需要传值，系统自动传值，谁调用，传给谁！始终指向当前类<br>调用：通过类调用—》类.类方法（）</li><li><p>3.静态方法<br>声明的形式：声明方法前需要使用@staticmethod说明<br>特点：没有默认参数<br>调用：通过类来调用–》类.静态方法（）<br><code>`</code>python<br>class Class1:</p><h1 id="类字段"><a href="#类字段" class="headerlink" title="类字段"></a>类字段</h1><p>  number = 10</p><h1 id="声明一个对象方法"><a href="#声明一个对象方法" class="headerlink" title="声明一个对象方法"></a>声明一个对象方法</h1><p>  def object_func(self):</p><pre><code>  print(&#39;对象方法&#39;)</code></pre><h1 id="声明一个类方法"><a href="#声明一个类方法" class="headerlink" title="声明一个类方法"></a>声明一个类方法</h1><p>  @classmethod<br>  def class_func(cls):</p><pre><code>  # 通过cls去使用类的字段  print(&#39;cls:&#39;,cls.number)  # 通过cls去创建对象  tc =cls()  tc.object_func()  print(&#39;这是一个类方法&#39;)</code></pre><p>  @staticmethod<br>  def static_func():</p><pre><code>  print(&#39;这是一个静态方法&#39;)</code></pre></li></ul><p>c1 = Class1()</p><h1 id="调用对象方法"><a href="#调用对象方法" class="headerlink" title="调用对象方法"></a>调用对象方法</h1><p>c1.object_func()<br>print(Class1.number)</p><h1 id="调用类方法"><a href="#调用类方法" class="headerlink" title="调用类方法"></a>调用类方法</h1><p>Class1.class_func()</p><h1 id="调用静态方法"><a href="#调用静态方法" class="headerlink" title="调用静态方法"></a>调用静态方法</h1><p>Class1.static_func()</p><pre><code>4.遇到问题怎么来选择使用那种方法：+ a.大前提：只要实现方法的功能需要用到对象的属性，我们就使用对象方法，否则就使用静态方法或者类方法+ b.不使用对象方法的前提下，如果实现功能需要类的字段就使用类方法+ c.实现功能既不需要对象的属性，又不需要类的字段就使用静态方法  注意：静态方法和类方法划分不严格，静态方法能做的，类方法可以做，反之成立```pythonclass Person:    # 类的字段，存储人类数量    number = 61    @classmethod    def show_number1(cls):        print(&#39;人类的数量是：%d亿&#39;% cls.number)    @staticmethod    def show_number2():        print(&#39;人类的数量是：%d亿&#39;% Person.number)Person.show_number1()Person.show_number2()</code></pre><h3 id="内置类属性"><a href="#内置类属性" class="headerlink" title="内置类属性"></a>内置类属性</h3><p>内置类属性就是魔法属性<br>魔法属性：属性名的前面和后面都有两个下划线<br>魔法方法：方法的前后都有两个下划线</p><pre><code class="python">import datetimeclass Person:    &#39;&#39;&#39;人的类&#39;&#39;&#39;    # 类的字段    number = 61    def __init__(self,name1,age1,height1):        # 对象的属性        self.name = name1        self.age = age1        self.height =height1    def run(self):        print(&#39;%s在跑步&#39;% (self.name))    #类方法    @classmethod    def show_number(cls):        print(&#39;人类的数量为：%d亿&#39;% (cls.number))    # 静态方法    @staticmethod    def destroy():        print(&#39;人类在破坏环境!&#39;)if __name__ == &#39;__main__&#39;:    p1 = Person(&#39;张三丰&#39;,20,173)</code></pre><h5 id="1-name属性-—-类的名字（是字符串）"><a href="#1-name属性-—-类的名字（是字符串）" class="headerlink" title="1.name属性  — 类的名字（是字符串）"></a>1.<strong>name</strong>属性  — 类的名字（是字符串）</h5><pre><code class="python">    # 类的属性    name = Person.__name__    print(name,type(name))</code></pre><h5 id="2-class属性-—-获取对象对应类（是一个类）"><a href="#2-class属性-—-获取对象对应类（是一个类）" class="headerlink" title="2.class属性 — 获取对象对应类（是一个类）"></a>2.<strong>class</strong>属性 — 获取对象对应类（是一个类）</h5><pre><code class="python">    # 对象的属性    # my_classs是一个类，之前类能做的事情他都能做    my_class = p1.__class__    p2 = my_class(&#39;小明&#39;,20,100)    print(p2.name)</code></pre><h5 id="3-dict属性-—-将对象和类的属性及其对应的值转换成键值对存到一个字典中"><a href="#3-dict属性-—-将对象和类的属性及其对应的值转换成键值对存到一个字典中" class="headerlink" title="3.dict属性 — 将对象和类的属性及其对应的值转换成键值对存到一个字典中"></a>3.<strong>dict</strong>属性 — 将对象和类的属性及其对应的值转换成键值对存到一个字典中</h5><pre><code class="python">    # print(Person.__class__)    print(p1.__dict__)     #  {&#39;name&#39;: &#39;张三丰&#39;, &#39;age&#39;: 20, &#39;height&#39;: 173}</code></pre><h5 id="4-doc属性—-获取类的说明文档"><a href="#4-doc属性—-获取类的说明文档" class="headerlink" title="4.doc属性—-获取类的说明文档"></a>4.<strong>doc</strong>属性—-获取类的说明文档</h5><pre><code class="python">    # 类的属性    doc = Person.__doc__    print(doc)</code></pre><h5 id="5-module属性-—-获取所有模块对应的名字"><a href="#5-module属性-—-获取所有模块对应的名字" class="headerlink" title="5.module属性 —- 获取所有模块对应的名字"></a>5.<strong>module</strong>属性 —- 获取所有模块对应的名字</h5><pre><code class="python">    print(Person.__module__)    print(datetime.datetime.__module__)</code></pre><h5 id="6-bases属性-—获取当前类的父类"><a href="#6-bases属性-—获取当前类的父类" class="headerlink" title="6.bases属性 —获取当前类的父类"></a>6.<strong>bases</strong>属性 —获取当前类的父类</h5><pre><code class="python">    # 类的属性    print(Person.__bases__)</code></pre><h3 id="slots魔法"><a href="#slots魔法" class="headerlink" title="slots魔法"></a>slots魔法</h3><pre><code class="python">class Person:    &#39;&#39;&#39;人的类&#39;&#39;&#39;    # 通过__slots__中存的元素的属性的值来约束当前这个类的对象的属性，对象的属性只能比元组中的少，不能多    __slots__ = (&#39;name&#39;,&#39;age&#39;,&#39;face&#39;)    def __init__(self):        # 对象的属性        self.name = &#39;张三丰&#39;        self.age = 20        self.face = 80        # self.sex = &#39;boy&#39;     # __slots__中并没有sexif __name__ == &#39;__main__&#39;:    p1 = Person()    # p1.sex = &#39;girl&#39;    # print(p1.sex)    # p1.name = &#39;小明&#39;    print(p1.name)    # 注意：一旦在类中给__slots__属性赋了值，那么这个类的对象的__dict__属性就不能使用了    # print(p1.__dict__)</code></pre><h3 id="私有化"><a href="#私有化" class="headerlink" title="私有化"></a>私有化</h3><p>python中并没有真正的私有化<br>1.私有化的语法<br>a.类中的属性和方法都可以通过在属性名和方法名前加两个下划线，来让属性和方法变成私有的<br>b.私有的属性和方法只能在当前的类中使用<br>2.私有化的原理<br>在前面有两个下划线的属性名和方法名前添加了’_类名’来阻止外部直接访问属性名来使用属性</p><pre><code class="python">cclass Dog:    # 字段    number = 100    __count = 200    def __init__(self):        # 对象的属性        self.color = &#39;黄色&#39;        self.age = 3        self.name = &#39;大黄&#39;        self.__sex = &#39;公狗&#39;    # 对象方法    def __eat(self):        print(&#39;%s啃骨头&#39;% (self.name))    def eat(self):        # 在类中可以使用私有的属性        self.__eat()        print(&#39;%s在吃屎·&#39; % (self.name))    # 类方法    @classmethod    def shout(cls):        print(&#39;count&#39;,cls.__count)        print(&#39;汪汪汪~~~&#39;)    # 静态方法    @staticmethod    def function():        print(&#39;看家!!&#39;) # python的类中默认的属性和方法是公开的dog1 = Dog()print(Dog.number)print(dog1.name,dog1.color,dog1.age)dog1.eat()Dog.shout()Dog.function()# 在类的外面不能使用私有属性# print(Dog.__count)                AttributeError: type object &#39;Dog&#39; has no attribute &#39;__count&#39;# print(dog1.__sex)               AttributeError: &#39;Dog&#39; object has no attribute &#39;__sex&#39;dog1.eat()print(dog1.__dict__)</code></pre><h3 id="属性的getter和setter"><a href="#属性的getter和setter" class="headerlink" title="属性的getter和setter"></a>属性的getter和setter</h3><p>1.解释</p><ul><li>a.保护类型的属性：就是在声明对象属性的时候在属性名前加一个下划线来代表这个属性是受保护的属性，<br>那么以后访问这个属性的时候就不要直接访问，要通过getter来获取这个属性的值，通过setter来给这个属性赋值</li><li>b.如果一个属性已经声明成保护类型的属性，那么我们就要给这个属性添加getter，也可以添加setter</li></ul><p>2.添加getter<br>添加getter就是声明一个没有参数，有一个返回值的函数</p><ul><li>a.格式：<br>@property<br>def 去掉下划线的属性名（self）：<br>——函数体<br>——将属性相关的值返回</li><li>b.使用场景<br>场景一：如果想要获取对象的某个属性的值之前，想要做其他处理，就可以给这个属性添加getter<br>场景二：想要拿到某个属性被使用的时刻</li></ul><p>3.添加setter<br>添加setter就是声明一个有一个参数，但是没有返回值的参数，作用是给属性赋值<br>a.格式<br>b.使用场景<br>在给属性赋值前要进行其他操作，就给属性声明一个setter函数</p><pre><code class="python">class Car:    def __init__(self):        self.color = &#39;黄色&#39;        self.type = &#39;自行车&#39;        # price是保护类型        self._price = 2000    # 给_price属性添加getter    @property    def price(self):        print(&#39;在使用_price属性&#39;)        return self._price/1000    # 想要给一个属性添加setter，就必须先给这个属性添加getter    @price.setter    def price(self,price):        if isinstance(price,int) or isinstance(price,float):            self.price        else:            self._price = 0</code></pre><h5 id="练习：声明一个员工类，其中一个属性是否已婚（bool），获取值之前根据存的值返回”已婚”-“未婚”"><a href="#练习：声明一个员工类，其中一个属性是否已婚（bool），获取值之前根据存的值返回”已婚”-“未婚”" class="headerlink" title="练习：声明一个员工类，其中一个属性是否已婚（bool），获取值之前根据存的值返回”已婚”/“未婚”"></a>练习：声明一个员工类，其中一个属性是否已婚（bool），获取值之前根据存的值返回”已婚”/“未婚”</h5><pre><code class="python">class Staff:    &#39;&#39;&#39;员工类&#39;&#39;&#39;    def __init__(self,name,age):        self.name =name        self.age = age        self._is_marry = False    @property    def is_marry(self):        print(&#39;在使用_price属性&#39;)        if self._is_marry:            return &#39;已婚&#39;        return &#39;未婚&#39;    @is_marry.setter    def is_marry(self, marry):        self._is_marry = marryif __name__ == &#39;__main__&#39;:    car1 = Car()    print(car1.color,car1._price)    # 添加完getter后就通过getter去获取属性值，实质就是调用getter对应方法    # price就是属性_price的getter    print(car1.price,&#39;k&#39;)    # 通过setter给属性赋值,实质是调用setter对应的方法    car1.price= &#39;abc&#39;    print(car1.price)    s1 = Staff(&#39;张三&#39;, 20)    print(s1.is_marry)    s1.is_marry = True    print(s1.is_marry)</code></pre><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>python中类可以继承，并且支持多继承<br>程序中的继承：就是让子类字节拥有父类的属性和方法（继承父类中的内容不会因为被继承而减少）</p><p>1.继承的语法<br>class 子类（父类）：<br>​    类的内容<br>注意：如果声明类的时候没有写继承，那么这个类会自动继承python中的基类，object;相当于class 类名（object）：<br>​      python中所有的类都是直接和间接的继承自object<br>2.能继承那些东西<br>a.所有的属性和方法都能继承<br>b.<strong>slots</strong>的值不会继承，但是会影响子类对象的<strong>dict</strong>属性，不能获取父类继承下来的属性</p><pre><code class="python">class Person:    &#39;&#39;&#39;人类&#39;&#39;&#39;    # 字段    number = 61    # __slots__ = (&#39;name&#39;,&#39;age&#39;)    # 对象属性    def __init__(self,name=&#39;张三&#39;,age=18):        self.name = name        self.age = age        self._height = 173    # 对象方法    def show_message(self):        print(&#39;姓名：%s 年龄：%d&#39;% (self.name,self.age))    @classmethod    def show_number(cls):        print(&#39;人类的数量：%d亿&#39;% cls.number)    @staticmethod    def show_message():        print(&#39;人类殴打小动物!&#39;)class Student(Person):    &#39;&#39;&#39;学生类&#39;&#39;&#39;    pass#创建Person类的对象p = Person()# 学生类stu1 = Student()print(Student.number)print(stu1.name)stu1.show_number()stu1.show_message()print(stu1.__dict__)if __name__ == &#39;__main__&#39;:    pass</code></pre><h3 id="方法的重写"><a href="#方法的重写" class="headerlink" title="方法的重写"></a>方法的重写</h3><p>子类继承父类，拥有父类的属性和方法以后，还可以添加自己的属性和方法<br>1.添加方法和类的字段<br>直接在子类中声明相应的字段和方法</p><p>2.添加对象属性<br>对象的属性是通过继承父类的init方法而继承下来<br>如果想要保留父类的对象的同时添加自己的对象属性，需要在子类的init方法中通过super（）去调用父类的init方法</p><p>3.方法的重写<br>在子类中重新实现父类的方法，就是重写<br>方式一：直接覆盖父类的实现<br>方式二：保留父类的功能再添加其他功能</p><p>4.类中方法的调用过程<br>先在当前这个中的去找，没有找到就去父类中找，还是没找到就去，就去父类的父类中去找，以此类推，如果在基类中也没找到，才崩溃<br>在第一次找到的位置，去调用<br>注意：使用super的时候必须通过super（）来代替父类或者是父类的对象</p><pre><code class="python">class Animal:    &#39;&#39;&#39;动物&#39;&#39;&#39;    def __init__(self):        self.age = 0        self.sex = &#39;雌&#39;    def shout(self):        print(&#39;嗷嗷叫&#39;)class Cat(Animal):    &#39;&#39;&#39;猫&#39;&#39;&#39;    def __init__(self):        # 调用父类的init方法        super().__init__()        self.name = &#39;小花&#39;    food = &#39;鱼&#39;    def shout(self):        print(&#39;喵喵喵~~~&#39;)class Dog(Animal):    &#39;&#39;&#39;狗&#39;&#39;&#39;    def shout(self):        # 通过super（）调用父类的方法，保留父类功能        super().shout()        print(&#39;汪汪汪~~~&#39;)cat1 = Cat()print(cat1.name,cat1.age,cat1.sex)cat1.shout()dog1 = Dog()dog1.shout()</code></pre><h3 id="init方法的重写"><a href="#init方法的重写" class="headerlink" title="init方法的重写"></a>init方法的重写</h3><p>练习：写一个人类，拥有属性name,age,sex。要求创建Person对象的时候必须给name和age赋值，sex可赋可不赋，再写一个Staff类继承自Person类，要求保留Person中所有的属性，并且添加新的属性salary，要求创建Staff类的对象的时候，只能给name赋值（必须赋）</p><pre><code class="python">class Person:    &#39;&#39;&#39;人类&#39;&#39;&#39;    def __init__(self,name,age,sex=&#39;boy&#39;):        self.name = name        self.age =age        self.sex = sexclass Staff(Person):    def __init__(self,name):        super().__init__(name,20)        self.salary = &#39;10000&#39;if __name__ == &#39;__main__&#39;:    p1 = Person(&#39;张三&#39;,20)    s1 = Staff(&#39;李四&#39;)</code></pre><h3 id="运算符的重载"><a href="#运算符的重载" class="headerlink" title="运算符的重载"></a>运算符的重载</h3><p>如果希望类的对象支持相应的运算符（+，-，*，/，&gt;,&lt;ect），就必须实现相应的魔法方法<br>继承一样有用</p><ul><li><p>: <strong>daa</strong></p><blockquote><p>:<strong>gt</strong><br>一般情况需要对&gt;或者&lt;进行重载，重载后可以通过sort方法直接对对象的列表进行排序<br><code>`</code>python<br>class Student:<br>  def <strong>init</strong>(self,name=’’,age=0,score=0):</p><pre><code>  self.name = name  self.age = age  self.score = score</code></pre></blockquote><h1 id="self-前面的对象"><a href="#self-前面的对象" class="headerlink" title="self:+ 前面的对象"></a>self:+ 前面的对象</h1><h1 id="other-后面的对象"><a href="#other-后面的对象" class="headerlink" title="other:+ 后面的对象"></a>other:+ 后面的对象</h1><p>  def <strong>add</strong>(self, other):</p><pre><code>  return self.score + other.score</code></pre><h1 id="重载-gt-符号"><a href="#重载-gt-符号" class="headerlink" title="重载 &gt; 符号"></a>重载 &gt; 符号</h1><h1 id="注意：重载-gt-和-lt-可以只重载一个，另一个对应的功能自动取反"><a href="#注意：重载-gt-和-lt-可以只重载一个，另一个对应的功能自动取反" class="headerlink" title="注意：重载&gt;和&lt;可以只重载一个，另一个对应的功能自动取反"></a>注意：重载&gt;和&lt;可以只重载一个，另一个对应的功能自动取反</h1><p>  def <strong>gt</strong>(self, other):</p><pre><code>  return self.age &gt; other.age</code></pre><h1 id="重写魔法方法str，用来制定对象的打印样式"><a href="#重写魔法方法str，用来制定对象的打印样式" class="headerlink" title="重写魔法方法str，用来制定对象的打印样式"></a>重写魔法方法<strong>str</strong>，用来制定对象的打印样式</h1><p>  def <strong>str</strong>(self):</p><pre><code>  return &#39;Student:%s %d %d&#39;% (self.name,self.age,self.score)</code></pre></li></ul><p>if <strong>name</strong> == ‘<strong>main</strong>‘:<br>    stu1 = Student(‘小明’,18,90)<br>    stu2 = Student(‘老王’,29,84)<br>    stu3 = Student(‘项羽’,24,70)<br>print(stu1 + stu2)<br>print(stu1 &gt; stu2)<br>print(stu1 &lt; stu2)</p><p>all_student = [stu1,stu2,stu3]<br>all_student.sort()<br>for stu in all_student:<br>    print(stu.name,stu.age,stu.score)<br>print(stu1.<strong>str</strong>())<br><code>`</code></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> class </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>容器</title>
      <link href="/2017/05/05/python/%E5%AE%B9%E5%99%A8/"/>
      <url>/2017/05/05/python/%E5%AE%B9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="一、复习"><a href="#一、复习" class="headerlink" title="一、复习"></a>一、复习</h4><h5 id="1-注释"><a href="#1-注释" class="headerlink" title="1.注释"></a>1.注释</h5><h5 id="a-由字母数字下划线组成，python3中可以是中文。b-数字不能开头。c-大小写敏感"><a href="#a-由字母数字下划线组成，python3中可以是中文。b-数字不能开头。c-大小写敏感" class="headerlink" title="a.由字母数字下划线组成，python3中可以是中文。b.数字不能开头。c.大小写敏感"></a>a.由字母数字下划线组成，python3中可以是中文。b.数字不能开头。c.大小写敏感</h5><h5 id="3-行与缩进：python中对缩进有严格的要求"><a href="#3-行与缩进：python中对缩进有严格的要求" class="headerlink" title="3.行与缩进：python中对缩进有严格的要求"></a>3.行与缩进：python中对缩进有严格的要求</h5><h5 id="4-多行显示：加反斜杠"><a href="#4-多行显示：加反斜杠" class="headerlink" title="4.多行显示：加反斜杠"></a>4.多行显示：加反斜杠</h5><h5 id="5-python中的基本数据类型：类型（int）、浮点类型（float）、布尔（bool）、字符串（str-ect"><a href="#5-python中的基本数据类型：类型（int）、浮点类型（float）、布尔（bool）、字符串（str-ect" class="headerlink" title="5.python中的基本数据类型：类型（int）、浮点类型（float）、布尔（bool）、字符串（str)ect."></a>5.python中的基本数据类型：类型（int）、浮点类型（float）、布尔（bool）、字符串（str)ect.</h5><pre><code class="python">ste = 123 + 425\      + 15552</code></pre><h6 id="变量的声明"><a href="#变量的声明" class="headerlink" title="变量的声明"></a>变量的声明</h6><ul><li>1.变量名 = 值</li><li>2.变量名：标识符，不能是关键字，PEP8：（字母全是小写，多个单词之间用下划线隔开），见名知义</li><li>3.变量生命的写法</li><li>4.声明变量/给变量赋值的原理<pre><code class="python">a = 100a = b = 10a = 10;b = 20a,b = 10,20   #元组</code></pre><h5 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h5><pre><code class="python">+，-，*，/，%，//，**&gt;,&lt;,==,&gt;=,&lt;=,!=and,or,not=,+=,-=,*=,/=,%=,//=,**=运算符的优先级：可以通过括号改变 </code></pre><h5 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h5><pre><code class="python">1.字符串长什么样2.字符编码（Unicodde),chr(),ord()3.获取单个或者部分字符：字符串[index],字符串[下标1：下标2：步进]4.字符串的相关的运算：+，*，比较运算，in，not in,len()5.相关的方法</code></pre><h5 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h5></li><li><p>1.if 条件语句:<br>​    执行语句</p></li><li><p>2.if-else 条件语句：<br>​    执行语句1<br>​    else：<br>​        执行语句2</p></li><li><p>3.if-elif-else：<br> elif 条件语句：</p><h5 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h5></li><li><p>1.for 循环<br> for 变量名 in 序列：<br> ​    循环体</p><p> 执行过程：</p></li><li>2.while 循环<br> while 条件语句：<br> ​    循环体<br> else：<br> 执行过程：</li><li>3.break，continue,else<br>break和continue写在循环体中的，else写在循环外（循环中遇到break，else的语句不会执行）<h4 id="二、认识列表"><a href="#二、认识列表" class="headerlink" title="二、认识列表"></a>二、认识列表</h4><code>list1 = [1,2,3]</code><h5 id="list-列表"><a href="#list-列表" class="headerlink" title="list (列表)"></a>list (列表)</h5></li><li>a.列表是python中的容器类型。有序的，可变的容器(可变指的是列表中的元素位置，个数可变的)<br>有序–&gt; 可以通过下标来获取元素<br>可变–&gt;列表中的元素可以（增删改查）</li><li>b.元素：指的是列表中的每一个内容(列表中的元素可以是任意类型的数据)<h6 id="1-列表的声明"><a href="#1-列表的声明" class="headerlink" title="1.列表的声明"></a>1.列表的声明</h6></li><li>a.声明变量赋一个列表值<pre><code class="python">声明了一个列表，列表中有5个元素，分别是90,80,97,67,55scores = [90,80,97,67,55]print(scores,type(scores))</code></pre><code>`</code>python<br>声明了一个列表，列表中有三个元素，分别是’sth’,16,’男’（一个列表中的内容类型可以不一样）<br>person = [‘sth’,16,’男’]<br>print(person)</li></ul><p>name = ‘索隆’<br>age = 24<br>person1 = [name,age,’男’]<br>print(person1)</p><pre><code>```python[]---&gt; 代表一个空的列表names = []print(names,type(names))</code></pre><ul><li>b.将其他的数据类型转换成列表(只有序列才能转换成列表：字符串和range，字典、元组、集合、生成式和迭代器）</li></ul><pre><code class="python">chars = list (&#39;123456&#39;)print(chars)numbers = list (range(10))print(numbers)list1  = [&#39;静夜思  李白  床前明月光  疑是地上霜  举头望明月  低头思故乡&#39;]print(list1)</code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>循环和分支</title>
      <link href="/2017/04/20/python/%E5%BE%AA%E7%8E%AF%E5%92%8C%E5%88%86%E6%94%AF/"/>
      <url>/2017/04/20/python/%E5%BE%AA%E7%8E%AF%E5%92%8C%E5%88%86%E6%94%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="一、数据类型转换"><a href="#一、数据类型转换" class="headerlink" title="一、数据类型转换"></a>一、数据类型转换</h2><h4 id="1-数据类型自动转换"><a href="#1-数据类型自动转换" class="headerlink" title="1.数据类型自动转换"></a>1.数据类型自动转换</h4><pre><code class="python">a = 10                    整型（in）b = 12.5                  浮点型（float）result = a + b            会自动将a转换成浮点型，再计算print (type(result))result2 = a + True        会自动将布尔型转换成1print (result2,type(result2))</code></pre><p>运行</p><pre><code class="python">&lt;class &#39;float&#39;&gt;11 &lt;class &#39;int&#39;&gt;</code></pre><h4 id="2-强制转换"><a href="#2-强制转换" class="headerlink" title="2.强制转换"></a>2.强制转换</h4><ul><li>基本语法：类型名（需要转换的数据）<h6 id="a-将其他数据转换成int型：浮点型、布尔和部分字符串"><a href="#a-将其他数据转换成int型：浮点型、布尔和部分字符串" class="headerlink" title="a.将其他数据转换成int型：浮点型、布尔和部分字符串"></a>a.将其他数据转换成int型：浮点型、布尔和部分字符串</h6><pre><code class="python">print (int(12.5))        float---&gt;int:去掉小数点和小数点后面的数print (int(True),int(False))    bool---&gt;int: 1   0</code></pre>运行<pre><code class="python">121 0</code></pre></li><li>去掉字符串的引号后，字符串的内容本身就是一个整数的时候，才能被转换成整型<pre><code class="python">print (int(&#39;123&#39;))print (int(&#39;-123&#39;))print (int(&#39;122.5&#39;))     错误print (int(&#39;123a&#39;))      错误</code></pre>运行<pre><code class="python">123-123</code></pre><h6 id="b-将其他的数据类型转换成flaot类型：整数、布尔和部分字符串"><a href="#b-将其他的数据类型转换成flaot类型：整数、布尔和部分字符串" class="headerlink" title="b.将其他的数据类型转换成flaot类型：整数、布尔和部分字符串"></a>b.将其他的数据类型转换成flaot类型：整数、布尔和部分字符串</h6><pre><code class="python">print (float(10))             int----&gt;float:在整数后加.0print (float(True))           bool---&gt;float:True:1.0,False:0.1</code></pre></li><li>去掉括号后，字符串的内容本身就是一个整数或者浮点数的时候，才能被转换成浮点型<pre><code class="python">print (float(&#39;2e3&#39;),float(&#39;-12.3&#39;),float(&#39;10&#39;))</code></pre><h6 id="c-将其他数据类型转换成bool："><a href="#c-将其他数据类型转换成bool：" class="headerlink" title="c.将其他数据类型转换成bool："></a>c.将其他数据类型转换成bool：</h6></li><li>所有的数据类型都可以转换成bool</li><li><p>数字中：除0是False,其他都是True</p><ul><li>字符串中：除了空串是False，其他都是True</li></ul></li><li><p>总结：所有为空、为0的值全是False,否则就是True</p><pre><code class="python">print (bool(1),bool(-1),bool(1.1),bool(-1.25))print (bool(0),bool(0.0))print (bool(None),bool([]))</code></pre><h5 id="d-其他数据类型转换成字符串，转换的时候就是在数据外面加引号"><a href="#d-其他数据类型转换成字符串，转换的时候就是在数据外面加引号" class="headerlink" title="d.其他数据类型转换成字符串，转换的时候就是在数据外面加引号"></a>d.其他数据类型转换成字符串，转换的时候就是在数据外面加引号</h5><pre><code class="python">print (str(100),str(1.2),str(True),str([1,2,3]))</code></pre><h2 id="二、if语句"><a href="#二、if语句" class="headerlink" title="二、if语句"></a>二、if语句</h2></li></ul><p>python中的分支结构只有一种：if分支结构</p><h4 id="1-if"><a href="#1-if" class="headerlink" title="1.if"></a>1.if</h4><p>语法：<br> if 条件语句：<br> ——执行语句块<br>其他语句</p><p> 说明：</p><ul><li><p>a.if：python中的关键字，‘如果’的意思，用来做判断的</p><ul><li>b.条件语句：最终结果会转换成布尔值</li><li>c.冒号：冒号是固定语法，必须写！</li><li>d.执行语句块：可以是多行语句，但是每行语句必须和前面的if保持一个缩进（一个tab/制表符）</li></ul></li><li><p>执行过程：先判断条件语句的结果是否为True，如果是就执行冒号后面的语句块。否则，直接执行if模块后的其他语句</p><pre><code class="python">练习：用一个变量保存一个学生的成绩，要求：大学生  成绩大于90的时候，打印优秀，无论成绩多少，都打印grade = 100if grade &gt; 90: print(&#39;优秀&#39;)print (&#39;%d&#39; % (grade))</code></pre><h4 id="2-if——else"><a href="#2-if——else" class="headerlink" title="2.if——else"></a>2.if——else</h4><p>语法：<br>if 条件语句：<br>——执行语句块1<br>else：<br>——执行语句块2<br>其他语句</p><p>说明：</p></li><li>else：关键字（else后边的冒号不能省）</li><li>执行过程：先判断条件语句的结果是否为Ture，如果是就执行语句块1，然后再执行其他语句； 如果为False，就执行语句块2，然后再执行其他语句<br><code>`</code>python<br>age = 20<br>if age &gt;= 18:<br> print (‘成年’)<br> print (‘可以进网吧’)<br>else:<br> print (‘未成年’)</li></ul><pre><code>#### 3.if_elif_else语法： if 条件语句1：——语句块1 elif条件语句2：——语句块2 elif 条件语句3： ——语句块3​      。。。else:——语句块其他语句```python+要求成绩大于90分打印优秀，80-90打印良好，60-79打印及格，60以下不及格grade = 80if grade &gt; 90:    print (&#39;优秀&#39;)elif grade &gt;=80:    print (&#39;良好&#39;)elif grade &gt;=60:    print (&#39;及格&#39;)else:    print (&#39;不及格&#39;)​`</code></pre><pre><code> 练习```pythonage = 20if age &gt;= 18:    print (&#39;成年&#39;)    print (&#39;可以进网吧&#39;)else:    print (&#39;未成年&#39;)</code></pre><h4 id="4-if语句的嵌套"><a href="#4-if语句的嵌套" class="headerlink" title="4.if语句的嵌套"></a>4.if语句的嵌套</h4><ul><li>每个if分支中都可以嵌套其他的if语句<br>if 条件1：<br>——执行语句1<br>——if 条件2：<br>  ——执行语句2<br>——else：<br>  ——执行语句3<br>else：<br>——执行语句4<pre><code class="python">成绩和年龄：如果成绩大于90并且年龄是18以上 就获奖100万；            年龄小于18岁，就获取奖金200万            成绩小于90，打印没有奖金grade = 90age = 18if grade &gt;= 90:  if age &gt;=18:      print (&#39;100万&#39;)  else:      print (&#39;200万&#39;)else:  print (&#39;没有奖金&#39;)</code></pre></li><li>练习：产生一个随机数(0-100)，判断随机数是否是偶数，如果是打印偶数，否则打印奇数；如果能被4整除，再打印能被4整除</li></ul><pre><code class="python">import randomnumber = random.randint(0,100)print (&#39;随机数是：%d&#39; % (number))if number % 2 == 0:    print (&#39;偶数&#39;)    if number % 4 == 0:        print (&#39;能被4整除&#39;)else:    print (&#39;奇数&#39;)</code></pre><ul><li><p>补充：</p><p> import是python中导入模块或者模块中内容的关键字<br> random是python内置的产生随机数模块</p><pre><code class="python">import randomnumber = random.randint(10,20)    产生一个10到20的随机数，并且存到number中print (number)</code></pre><h2 id="三、条件语句的简写"><a href="#三、条件语句的简写" class="headerlink" title="三、条件语句的简写"></a>三、条件语句的简写</h2><ul><li>判断一个数是否是偶数的两种写法<pre><code class="python">number = 10if number %2 == 0:print (&#39;偶数&#39;)</code></pre></li></ul></li><li>推荐<br><code>`</code>python<br>if not number %2 :<br> print (‘偶数’)</li></ul><p>if number %2:<br>    print (‘奇数’)</p><pre><code>+ 判断一个字符串是否是空串```pythonstr1 = &#39;abc&#39;if str ==&#39;&#39;:    print (&#39;空串&#39;)else:    print (&#39;不是空串&#39;)</code></pre><ul><li>推荐<pre><code class="python">if str:  print (&#39;不是空串&#39;)else:  print (&#39;是空串&#39;)</code></pre><h2 id="四、for的循环"><a href="#四、for的循环" class="headerlink" title="四、for的循环"></a>四、for的循环</h2></li></ul><p>在完成某个功能的时候，如果需要重复某个操作，就可以使用循环</p><p>python中的循环结构：for循环和while循环</p><h6 id="1-for循环的结构："><a href="#1-for循环的结构：" class="headerlink" title="1.for循环的结构："></a>1.for循环的结构：</h6><p>for 变量名 in 序列：<br>——循环体</p><p>说明：</p><p>a.for:关键字</p><p>b.变量名：和声明变量时的变量名的要求一样</p><p>c.in:关键字</p><p>d.序列：容器（数据本身是有多个数据组成），例如：字符串、列表、字典、元祖、range、生成式和生成器</p><p>e.循环体：需要重复执行的代码</p><p>执行过程：让变量去序列中一个一个取数据，取完为止。每取一次数据，执行一次循环体</p><pre><code class="python">for x in (&#39;123&#39;):    print (x)</code></pre><p>range函数是python中内置函数，作用是产生指定范围中的数字</p><p>xrange是python2中的函数，python3中用range来代替<br><strong>range(N):产生0~N-1的所有整数</strong><br><strong>range(N,M):产生N~M-1的所有整数</strong><br><strong>range(N,M,step):产生从N开始，每step产生一个整数，到M之前</strong></p><pre><code class="python">print (&#39;==========&#39;)for x in range (10):    print (x)print (&#39;==========&#39;)for n in range (10,15):    print (n)print (&#39;=========&#39;)for x in range (1,11,2):    print (x)</code></pre><ul><li>练习：计算1+2+3+。。。+100<pre><code class="python">number = 0for x in range (1,101):  number += x  print (number)</code></pre></li><li>练习：统计1~1000中能够被三整除的数的个数</li></ul><pre><code class="python">ste = 0for x in range (1,1001):    if x %3 == 0:        print (&#39;%d 可以被三整除&#39; % (x))        ste += 1print (&#39;1~1000中能被三整除的个数：%d&#39; % (ste))</code></pre><ul><li>注意：for 循环中用来获取序列值的变量，在循环体不是一定要使用. 如果不用，那么变量名可以声明为_<br>打印50行”***”<pre><code class="python">for _ in range(50): print (&#39;***&#39;)</code></pre></li><li>1~10000中能被5整除的个数<pre><code class="python">sum = 0for x in range (1,10001):  if x %5 ==0:      sum += 1print (&#39;1~10000中能被5整除的数的个数是：%d&#39; % (sum))</code></pre></li></ul><pre><code class="python"> (1,200)     7     个数dob = 0for x in range (1,201):    if x %7 == 0:        dob += 1print (dob)</code></pre><h2 id="五、while循环"><a href="#五、while循环" class="headerlink" title="五、while循环"></a>五、while循环</h2><p><img src="https://upload-images.jianshu.io/upload_images/13692239-896ce7deb5a34539.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="QQ截图20180823160402.png"></p><h6 id="1-结构："><a href="#1-结构：" class="headerlink" title="1.结构："></a>1.结构：</h6><p>while 条件语句:<br>​    循环体</p><h6 id="2-说明："><a href="#2-说明：" class="headerlink" title="2.说明："></a>2.说明：</h6><p>while: 关键字<br>条件语句：结果是True或者False<br>循环体：要重复执行代码</p><h6 id="3-执行过程："><a href="#3-执行过程：" class="headerlink" title="3.执行过程："></a>3.执行过程：</h6><pre><code>判断条件语句的结果是否为True，如果为True就执行循环体，执行完循环体再判断条件语句是否为True。。。。。，直到结果为False为止</code></pre><pre><code class="python"> 1+2+3+...+100n = 0x = 1while x &lt;= 100:    n += x    x += 1print (n)</code></pre><pre><code class="python">x = 1,n = 01 &lt;= 100   True;n += x  0+1=n;x+=1  1+x=2x = 2,n = 0+12 &lt;=100    True;n=0+1+x=0+1+2;x=1+x=3。。。x = 100，n = 0+1+2+...+99x &lt;= 100   True;n=0+1+。。。+100；x=1+x=101</code></pre><ul><li><p>练习：循环结束，x的值和n的值，分别是多少     x = 6, n = 2+3+4+5+6</p><pre><code class="python">x = 1n = 0while x &lt;= 5:  x += 1  n += xprint (n,x)</code></pre><p>for 循环与while循环的比较<br><strong>for循环的循环次数是有限的，并且是确定的；while循环的循环次数不确定</strong> for循环：1.遍历序列中的值 2. 循环次数确定<br>while循环：1.死循环 2.循环次数不确定</p></li><li><p>练习：找大于10000的数中，第一个能够被23整除的数<br><code>`</code>python<br>x = 10001<br>while x %23 != 0:<br>  x += 1<br>print (x)</p></li></ul><p><code>`</code></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 循环 </tag>
            
            <tag> 判断 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/2017/03/26/python/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2017/03/26/python/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><ul><li>正则表达式就是检测字符串是否满足某种规则的工具<br>例如：账号是手机号/邮箱/多少位由什么东西组成的ect</li></ul><p>1.正则语法<br>2.Python对正则表达式的支持，提供了一个内置模块：re<br>fullmatch(正则表达式，字符串）：判断字符串是否符合正则表达式的规则</p><ul><li>匹配任意字符<br>匹配一个字符串，只有一个字符并且是任意字符</li></ul><pre><code class="python">re_str = r&#39;.&#39;result = fullmatch(re_str,&#39;a&#39;)print(result)</code></pre><ul><li>匹配一个字符串，有两个任意字符</li></ul><pre><code class="python">re_str = r&#39;..&#39;result = fullmatch(re_str,&#39;an&#39;)print(result)</code></pre><ul><li>匹配一个字符串，前三位分别是abc，最后一位是任意字符</li></ul><pre><code class="python">re_str = r&#39;abc.&#39;result = fullmatch(re_str,&#39;abc@&#39;)print(result)</code></pre><ul><li>\w匹配字母数字下划线<br>匹配一个前三分别是abc，最后一位是字母数字，下划线其中的一种的字符串</li></ul><pre><code class="python">re_str = r&#39;abc\w&#39;result = fullmatch(re_str,&#39;abc_&#39;)print(result)</code></pre><ul><li>\W匹配非字母数字下划线<br>匹配一个前三分别是abc，最后一位非字母数字，下划线的字符串</li></ul><pre><code class="python">re_str = r&#39;abc\W&#39;result = fullmatch(re_str,&#39;abc_&#39;)print(result)</code></pre><ul><li>\s匹配空白字符（空白指空格、回车、制表符等所有你能产生空白的字符）<br>匹配一个字符串，前三个是字母数字下划线中的任意一种，最后一位是一个空白字符</li></ul><pre><code class="python">re_str = r&#39;\w\w\w\s&#39;result = fullmatch(re_str,&#39;a1_\t&#39;)print(result)</code></pre><ul><li>\S匹配非空白字符（空白指空格、回车、制表符等所有你能产生空白的字符）<br>匹配一个字符串，前三个是字母数字下划线中的任意一种，最后一位非空白字符</li></ul><pre><code class="python">re_str = r&#39;\w\w\w\S&#39;result = fullmatch(re_str,&#39;a1_9&#39;)print(result)</code></pre><ul><li>\d匹配一个数字字符<br>匹配一个字符串，前三位是数字字符，最后一位是任意字符</li></ul><pre><code class="python">re_str = r&#39;\d\d\d.&#39;result = fullmatch(re_str,&#39;151h&#39;)print(result)</code></pre><ul><li>\D匹配一个非数字字符<br>匹配一个字符串，前三位是非数字字符，最后一位是任意字符</li></ul><pre><code class="python">re_str = r&#39;\d\d\d.&#39;result = fullmatch(re_str,&#39;acd1&#39;)print(result)</code></pre><ul><li>\b检测是否是单词边界（单词的开头 ，单词的结尾、单词和单词之间的标点，空格ect<br>注意：正则中遇到\b，匹配的时候先不管他，匹配成功后再回头看\b的位置是不是边界。<br>匹配一个字符串，前四位是when第五位是空白，空白后边是where，并且第四位n后面是单词边界</li></ul><pre><code class="python">re_str = r&#39;when\b\swhere&#39;result = fullmatch(re_str,&#39;when where&#39;)print(result)</code></pre><ul><li>^检测字符串是否是以给定的正则表达式,匹配字符串的开头</li></ul><pre><code class="python">re_str = r&#39;\d\d\d.&#39;result = fullmatch(re_str,&#39;151h&#39;)print(result)re_str = r&#39;^m\d\d&#39;result = fullmatch(re_str,&#39;m14&#39;)print(result)</code></pre><ul><li>$检测字符串是否以给定的正则表达式结束<br>匹配一个字符串a数字，并且a数字是字符串的结尾</li></ul><pre><code class="python">re_str = r&#39;a\d$&#39;result = fullmatch(re_str,&#39;a2&#39;)print(result)result = search(re_str,&#39;a9aaa8&#39;)print(result)</code></pre><ul><li>\B检测非单词边界</li></ul><pre><code class="python">re_str = r&#39;any\Bwhere&#39;result = fullmatch(re_str,&#39;anywhere&#39;)print(result)</code></pre><ul><li>[]匹配中括号出现的任意字符<br>注意：一个中括号只匹配一个字符<br>匹配一个三位的字符串，第一位是a或者b或者或者+，后面两位是数字</li></ul><pre><code class="python">re_str = r&#39;[abc+]\d\d&#39;result = fullmatch(re_str,&#39;+12&#39;)print(result)</code></pre><ul><li>-在正则表达式中的中括号中的应用：如果将减号放到两个字符的中间代表的是谁到谁。如果想要表示’-‘符号本身，就放到开头或者末尾<br>[1-8]代表的是：12345678<br>[-18]或者[18-]代表的是’1’,’-‘,’8’<br>要求一个字符串中的第一位是1-8中的一个，后面两位是小写字母</li></ul><pre><code class="python">re_str = r&#39;[1-8][a-z][a-z]&#39;result = fullmatch(re_str,&#39;1bg&#39;)print(result)re_str = r&#39;[+!-][A-Z]&#39;result = fullmatch(re_str,&#39;+A&#39;,)result = fullmatch(re_str,&#39;-B&#39;,)result = fullmatch(re_str,&#39;!C&#39;,)print(result)</code></pre><ul><li>[^字符集]匹配不在[]字符集中的任意一个字符<br>匹配一个四位的字符串，第一位不是大写字母也不是数字，后三位是abc</li></ul><pre><code class="python">re_str = r&#39;[^A-Z\d]abc&#39;result = fullmatch(re_str,&#39;+abc&#39;)print(result)</code></pre><ul><li>*匹配0次或者多次</li></ul><pre><code class="python">re_str = r&#39;a*b&#39;   # &#39;b&#39;,&#39;ab&#39;,&#39;aab&#39;,.....以此类推result = fullmatch(re_str,&#39;aaaaaaaaaaab&#39;)re_str = r&#39;\d*&#39;re_str = r&#39;[abc]*&#39;   # &#39;a&#39;,&#39;abbccbaababa&#39;,&#39;&#39;print(result)</code></pre><ul><li>+匹配一次或者多次，与* 类似<br>判断一个字符串是否是无符号的正整数</li></ul><pre><code class="python">re_str = r&#39;[1-9]+\d*&#39;result = fullmatch(re_str,&#39;110&#39;)print(result)</code></pre><ul><li>？ 匹配0次或者一次</li></ul><pre><code class="python">re_str = r&#39;@?\d+&#39;result = fullmatch(re_str,&#39;@16723&#39;)print(result)</code></pre><ul><li>判断一个字符串是否是整数</li></ul><pre><code class="python">re_str = r&#39;[+-]?[0-9]\d*&#39;result = fullmatch(re_str,&#39;0&#39;)print(result)</code></pre><ul><li>{N}匹配N次,就只有N位字符</li></ul><pre><code class="python">re_str = r&#39;\d{3}&#39;result = fullmatch(re_str,&#39;123&#39;)print(result)</code></pre><ul><li>{N,} 至少匹配N次</li></ul><pre><code class="python">re_str = r&#39;\w{3,}&#39;result = fullmatch(re_str,&#39;1234sda__&#39;)print(result)</code></pre><ul><li>{,N} 最多匹配N次</li></ul><pre><code class="python">re_str = r&#39;a{,2}b&#39;result = fullmatch(re_str,&#39;b&#39;)result = fullmatch(re_str,&#39;ab&#39;)result = fullmatch(re_str,&#39;aab&#39;)result = fullmatch(re_str,&#39;aaab&#39;)print(result)</code></pre><ul><li>{M,N} 匹配至少M次，最多N次（M&lt;N）</li></ul><pre><code class="python">re_str = r&#39;a{1,2}b&#39;result = fullmatch(re_str,&#39;ab&#39;)print(result)</code></pre><p>注意：次数相关的操作，都是约束的次数符号前的一个字符</p><ul><li>| 分支（相当于逻辑运算中的or）<br>匹配一个字符串是三个字母，或者是三个数字</li></ul><pre><code class="python">re_str = r&#39;[A-Za-z]{3}|\d{3}&#39;re_str1 = r&#39;\d{3}[A-Za-z]{3}|\d{3}&#39;# \d{3}[A-Za-z]当做分支的一个整体的条件，|分支的左边部分是一个整体，右边是一个整体result = fullmatch(re_str,&#39;abg&#39;)print(result)</code></pre><p> 正则中分支有短路操作：如果使用|去连接多个条件，前面的条件已经符合，就不会使用后面的条件再去匹配了</p><h5 id="练习：写一个正则表达式，能够匹配出字符串中所有的数字（包括整数和小数）"><a href="#练习：写一个正则表达式，能够匹配出字符串中所有的数字（包括整数和小数）" class="headerlink" title="练习：写一个正则表达式，能够匹配出字符串中所有的数字（包括整数和小数）"></a>练习：写一个正则表达式，能够匹配出字符串中所有的数字（包括整数和小数）</h5><pre><code class="python"># re_str = r&#39;[1-9]\d*[.]?\d*|0[.]\d+&#39;# result = fullmatch(re_str,&#39;0.12&#39;)# print(result)str1 = &#39;absx12.2ss2.03s40,60aas50,asd6.23,952asd&#39;re_str = r&#39;[\d.]+&#39;# &#39;\d+[.]\d+&#39; 与&#39;[1-9]\d*&#39;的位置不同，输出的结果也有可能不一样result = findall(re_str,str1)print(&#39;======================&#39;)print(result)</code></pre><ul><li>分组<br>通过加（）来对正则条件进行分组<br>两位数字两位字母出现三次</li></ul><pre><code class="python">re_str = r&#39;([a-z]{2}\d{2}){3}&#39;result = fullmatch(re_str,&#39;as12df52er63&#39;)print(result)</code></pre><ul><li>重复<br>可以通过\数字来重复匹配前面的括号中匹配的结果.数字的值代表前面的第几个分组</li></ul><pre><code class="python">re_str = r&#39;(\d{2}[A-Z])=%\1\1&#39;result = fullmatch(re_str,&#39;23B=%23B23B&#39;)print(result)re_str = r&#39;(\d{2})\+(\w)\1{2}\2&#39;result = fullmatch(re_str,&#39;12+a1212a&#39;)print(&#39;++++++++++++++++++++&#39;)print(result)</code></pre><ul><li>捕获<br>按照完整的正则表达式去匹配，只捕获（）中的内容，只有在findall中有效</li></ul><pre><code class="python">re_str = r&#39;a(\d{3})b&#39;result = fullmatch(re_str,&#39;a786b&#39;)print(result)print(findall(re_str,&#39;a786b&#39;))</code></pre><pre><code class="python"># 用户名由字母数字下划线组成的6-20位user= input(&#39;用户名：&#39;)QQ = input(&#39;qq:&#39;)re_str = r&#39;\w{6,20}&#39;result = fullmatch(re_str,user)if result == None:    print(&#39;用户名不合格，请重新输入&#39;)else:    print(&#39;用户名：%s 合格&#39;% user)# QQ由数字组成并且第一位不能是0re_str = r&#39;[1,9]+\d{4,11}&#39;result = fullmatch(re_str,QQ)if result == None:    print(&#39;用户名不合格，请重新输入&#39;)else:    print(&#39;用户名：%s 合格&#39;% QQ)</code></pre><h4 id="正则中的转义"><a href="#正则中的转义" class="headerlink" title="正则中的转义"></a>正则中的转义</h4><p>1.正则表达式中的转义和字符串中的转义字符没有任何关系，<br>在Python中的字符串前加r阻止的是字符串的转义，不能阻止正则表达式的转义<br>2.在正则表达式中，可以通过在特殊意义的符号前加\来表示符号本身<br>+  .  *  \?   \  ( )   [ ]  \^  \$  |<br>注意：<br>a. - 号只有在中括号中的两个字符之间才有特殊的意义<br>b.如果特殊符号放到[]中，作为字符集的内容，那么除了- 号在两个字符之间以外，其他的都不需要转义<br>c.\ 不管在哪都需要转义，^放到 中括号的最前需要转义</p><pre><code class="python">re_str = r&#39;a\+}&#39;result = fullmatch(re_str,&#39;a\+&#39;)print(result)re_str = r&#39;\+a&#39;result = fullmatch(re_str,&#39;+a&#39;)print(result)re_str = r&#39;\\w-a&#39;result = fullmatch(re_str,&#39;\w-a&#39;)print(result)re_str = r&#39;\(\d{3}&#39;result = fullmatch(re_str,&#39;(234&#39;)print(result)</code></pre><h4 id="re模块"><a href="#re模块" class="headerlink" title="re模块"></a>re模块</h4><p>1.compile(正则表达式)：将正则表达式转换成正则表达式对象</p><pre><code class="python">re_str = r&#39;\d+&#39;re_object = re.compile(re_str)print(re_object)</code></pre><pre><code class="python"># 不转成对象，调用相应的函数re.match(re_str,&#39;78hj&#39;)# 转换成对象，调用相应的方法re_object.fullmatch(&#39;78hj&#39;)</code></pre><p>2.match(正则表达式，字符串)和fullmatch<br>判断字符串的开头是否能够和正则表达式匹配<br>fullmatch：判断整个字符串是否能够和正则表达式匹配</p><pre><code class="python">re_str = r&#39;abc\d{3}&#39;result1 = re.match(re_str,&#39;abc234dafdad&#39;)result2 = re.fullmatch(re_str,&#39;abc234&#39;)print(result1)print(result2)</code></pre><pre><code class="python"># a.匹配范围,匹配结果字符的下标范围:（起始下标，结束下标）---- 结束下标取不到print(result2.span())# 获取起点print(result1.start())# 获取终点print(result1.end())</code></pre><p>注意：group参数，用来指定分组对应的相应的结果</p><pre><code class="python">re_str = r&#39;(\d{3})\+([A-z]{3})&#39;match1 = re.match(re_str,&#39;123+abcgg&#39;)print(match1)print(match1.span())# 在匹配中，获取第一个分组的范围print(match1.span(1))# 在匹配中，获取第二个分组的范围print(match1.span(2))# 在匹配结果中，获取第二个分组的起始下标print(match1.start(2))# b.获取匹配结果对应的字符串print(match1.group())print(match1.group(1))# c.获取被匹配的原字符串print(match1.string)</code></pre><ul><li>search（正则表达式，字符串）<br>在字符串中去查找第一个满足正则表达式的子串，如果找到就返回匹配对象，找不到返回None</li></ul><pre><code class="python">search1 = re.search(r&#39;\d+aa&#39;,&#39;he9aasda 78aadvsf world&#39;)print(search1)if search1:    print(search1.span())</code></pre><p>练习：使用search将一个字符串所有的数字字符串全部找到<br> ’工资10000元，年龄18岁，身高180，颜值100‘</p><pre><code class="python">str1 = &#39;工资10000元，年龄18岁，身高180，颜值100&#39;re_str = r&#39;[1-9]\d*&#39;search1 = re.search(re_str,str1)while search1:    print(search1.group())    end = search1.end()    str1 = str1[end:]    search1 = re.search(re_str,str1)</code></pre><ul><li>split（正则表达式，字符串）<br>按满足正则表达式的子串去切割字符串</li></ul><pre><code class="python">str1 = &#39;床前明月光，疑是地上霜。举头望明月，低头思故乡！&#39;result = re.split(r&#39;[,。，！]&#39;,str1)result = re.split(r&#39;\W&#39;,str1)print(result)</code></pre><p>中文也在\w的范围内</p><ul><li>sub（正则表达式，替换字符串，被替换的字符串）</li></ul><pre><code class="python">word = &#39;你丫是傻叉吗？我草拟大爷的，Fuck you&#39;result2 = re.sub(r&#39;傻叉|草|大爷|Fuck|傻逼&#39;,&#39;*&#39;,word)print(result2)</code></pre><ul><li>findall（正则表达式，字符串）</li></ul><pre><code class="python"># 获取字符串中所有满足正则表达式的子串# 返回值是列表# 注意：分组中的捕获效果在这儿有效result = re.findall(r&#39;\d([a-z])+&#39;,&#39;数据的恐怖残5and,125name按贷款&#39;)# 取的字符串是正则表达式最后一个字符result1 = re.findall(r&#39;\d([a-z]+)&#39;,&#39;数据的恐怖残5and,125name按贷款&#39;)# 取的字符串是正则表达式中的后一个分组print(result)print(result1)</code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>字典与集合</title>
      <link href="/2017/03/21/python/%E5%AD%97%E5%85%B8%E4%B8%8E%E9%9B%86%E5%90%88/"/>
      <url>/2017/03/21/python/%E5%AD%97%E5%85%B8%E4%B8%8E%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h4 id="一、recode"><a href="#一、recode" class="headerlink" title="一、recode"></a>一、recode</h4><h6 id="1-列表"><a href="#1-列表" class="headerlink" title="1.列表"></a>1.列表</h6><ul><li>1.一个列表可以保存多个数据。容器类型，有序（下标），可变的（增删改）<br>[元素，元素]—&gt; 元素可以是任意类型的数据</li><li>2.声明列表</li><li>3.元素的增删改查</li><li>4.遍历列表</li><li>5.列表存储（存地址，除了int、bool、float、str存的是值，其它的全是引用，存的是地址）</li><li>6.列表的相关方法</li><li>7.元组（元组是不可变的列表）<br>（元素，元素）–&gt;(元素）<br>查找单个，切片、遍历、in/not in 、+ 、* 、len()<br>颜色值（255,0,0），（0,255,0）坐标（100,200）<h4 id="二、字典"><a href="#二、字典" class="headerlink" title="二、字典"></a>二、字典</h4><h5 id="1-字典（dict-是容器类型（也是序列），以键值对作为元素（字典里面存的数据全是以键值对的形式出现的）"><a href="#1-字典（dict-是容器类型（也是序列），以键值对作为元素（字典里面存的数据全是以键值对的形式出现的）" class="headerlink" title="1.字典（dict)是容器类型（也是序列），以键值对作为元素（字典里面存的数据全是以键值对的形式出现的）"></a>1.字典（dict)是容器类型（也是序列），以键值对作为元素（字典里面存的数据全是以键值对的形式出现的）</h5><code>{key1:value1,key2:walue2,...}</code><h5 id="2-键值对：键：值（key-value"><a href="#2-键值对：键：值（key-value" class="headerlink" title="2.键值对：键：值（key:value)"></a>2.键值对：键：值（key:value)</h5></li><li>键（key):要唯一，不可变的（数字、布尔、字符串和元组，推荐使用字符串）</li><li>值（value):可以不唯一，可以是任何类型的数据</li></ul><h5 id="3-字典是可变的（增删改）—-可变的是字典里键值对的值和个数可变"><a href="#3-字典是可变的（增删改）—-可变的是字典里键值对的值和个数可变" class="headerlink" title="3.字典是可变的（增删改）— 可变的是字典里键值对的值和个数可变"></a>3.字典是可变的（增删改）— 可变的是字典里键值对的值和个数可变</h5><pre><code class="python"># 1.声明字典dict1 = {2:20,&#39;a&#39;:54,True:20,(10,10):&#39;begain&#39;,&#39;a&#39;:[1,2]}print(dict1)person1 = [&#39;smile&#39;,20,0]         # 列表存数据不明确</code></pre><ul><li>声明一个字典，有三个键值对，key分别是：name，age和work_age<br><code>person2 = {&#39;name&#39;:&#39;smile&#39;,&#39;age&#39;:20,&#39;work_age&#39;:0}</code><h5 id="2-查（获取值）"><a href="#2-查（获取值）" class="headerlink" title="2.查（获取值）"></a>2.查（获取值）</h5></li><li>获取字典的元素对应的值（字典存数据，实质还是存的value,key是获取value的手段）</li><li>字典[key]—通过key获取值，反着不可以<pre><code class="python">print(person2[&#39;name&#39;],person2[&#39;age&#39;])dict2 = {}    # 空的字典print(type(dict2))</code></pre></li><li><p>通过字典[key]获取value的时候，如果不存在会发生KeyError异常<br><code># print(person2[&#39;sex&#39;])     #  KeyError: &#39;sex&#39;</code></p><h5 id="b-字典-get-key"><a href="#b-字典-get-key" class="headerlink" title="b.字典.get(key)"></a>b.字典.get(key)</h5><p><code>print(person2.get(&#39;age&#39;))</code></p></li><li><p>字典.get(key)，如果key不存在不会报错，返回None</p><pre><code>print(person2.get(&#39;sex&#39;))       # None--python中的特殊值，代表没有</code></pre><h5 id="总结：确定key值肯定存在的时候用-语法获取value。"><a href="#总结：确定key值肯定存在的时候用-语法获取value。" class="headerlink" title="总结：确定key值肯定存在的时候用[]语法获取value。"></a>总结：确定key值肯定存在的时候用[]语法获取value。</h5></li><li>key值可能不存在，不存在的时候不希望报错，而是想要自己对它进行特殊处理的时候用get获取value<pre><code class="python">person = {&#39;name&#39;: &#39;张启灵&#39;,&#39;age&#39;:36,&#39;face_grade&#39;:90 }# 想要获取性别sex，如果没有就默认&#39;男’if person.get(&#39;sex&#39;): print(person[&#39;sex&#39;])else: print(&#39;男&#39;)</code></pre><h5 id="c-遍历"><a href="#c-遍历" class="headerlink" title="c.遍历"></a>c.遍历</h5><pre><code class="python">dog = {&#39;name&#39;: &#39;旺财&#39;, &#39;color&#39;: &#39;yellow&#39;, &#39;age&#39;: 5}for key in dog: # 打印key print(key) print(dog[key])</code></pre><h5 id="3-改（修改key对应的value）"><a href="#3-改（修改key对应的value）" class="headerlink" title="3.改（修改key对应的value）"></a>3.改（修改key对应的value）</h5></li><li>字典[key] = 新值       （key是本来就存在）<br><code>dog[&#39;name&#39;] = &#39;大黄&#39;print(dog)</code><h5 id="4-增（添加键值对）"><a href="#4-增（添加键值对）" class="headerlink" title="4.增（添加键值对）"></a>4.增（添加键值对）</h5></li><li>字典[key] = 值        （key本来不存在）<br><code>dog[&#39;type&#39;] = &#39;拉布拉多&#39;print(dog)</code><h5 id="5-删（删除键值对）"><a href="#5-删（删除键值对）" class="headerlink" title="5.删（删除键值对）"></a>5.删（删除键值对）</h5></li><li>a.del 字典[key]<br><code>del dog[&#39;color&#39;]print(dog)</code></li><li>b.字典.pop(key)<br><code>age = dog.pop(key)print(dog,age)</code><h4 id="三、字典相关的运算"><a href="#三、字典相关的运算" class="headerlink" title="三、字典相关的运算"></a>三、字典相关的运算</h4><h5 id="1-字典不支持’-’和’-’"><a href="#1-字典不支持’-’和’-’" class="headerlink" title="1.字典不支持’+’和’*’"></a>1.字典不支持’+’和’*’</h5><h5 id="2-in-和-not-in"><a href="#2-in-和-not-in" class="headerlink" title="2.in 和 not in"></a>2.in 和 not in</h5><pre><code class="python">computer = {&#39;color&#39;:&#39;write&#39;,&#39;brand&#39;:&#39;联想&#39;}print(&#39;color&#39; in computer)</code></pre><h5 id="3-len"><a href="#3-len" class="headerlink" title="3.len()"></a>3.len()</h5><code>print(len(computer))</code><h5 id="4-字典-clear-删除字典里所有的元素（键值对）"><a href="#4-字典-clear-删除字典里所有的元素（键值对）" class="headerlink" title="4.字典.clear():删除字典里所有的元素（键值对）"></a>4.字典.clear():删除字典里所有的元素（键值对）</h5><pre><code class="python">computer.clear()print(computer)</code></pre><h5 id="5-字典-copy-拷贝字典中所有的元素，放到一个新的字典中"><a href="#5-字典-copy-拷贝字典中所有的元素，放到一个新的字典中" class="headerlink" title="5.字典.copy():拷贝字典中所有的元素，放到一个新的字典中"></a>5.字典.copy():拷贝字典中所有的元素，放到一个新的字典中</h5><pre><code class="python">dict1 = {&#39;a&#39;: 1, &#39;b&#39;: 2}dict2 = dict1      # 将dict1中的地址赋给dict2，两个变量指向同一块内存区域dict3 = dict1.copy()  # 将dict1中的内容复制到一个新的内存区域中，然后将新的地址给dict3dict1[&#39;a&#39;] = 100print(dict2)      #{&#39;a&#39;: 100, &#39;b&#39;: 2}print(dict3)      #{&#39;a&#39;: 1, &#39;b&#39;: 2}</code></pre><h5 id="6-dict-fromkeys-序列，默认值-None"><a href="#6-dict-fromkeys-序列，默认值-None" class="headerlink" title="6.dict.fromkeys(序列，默认值 = None)"></a>6.dict.fromkeys(序列，默认值 = None)</h5></li><li>将序列中的每个值作为key，默认值为value创建一个新的字典<h5 id="注意：默认值可以不写，写的话只能写一个"><a href="#注意：默认值可以不写，写的话只能写一个" class="headerlink" title="注意：默认值可以不写，写的话只能写一个"></a>注意：默认值可以不写，写的话只能写一个</h5><pre><code class="python">print(dict.fromkeys(&#39;abc&#39;,0))   #{&#39;a&#39;: 0, &#39;b&#39;: 0, &#39;c&#39;: 0}print(dict.fromkeys([&#39;name&#39;,&#39;age&#39;,&#39;sex&#39;],[1,2]))</code></pre><h5 id="7-字典-key"><a href="#7-字典-key" class="headerlink" title="7.字典.key()"></a>7.字典.key()</h5></li><li>获取字典中所有的key，以dict_keys的形式返回<pre><code class="python">all_key = dict.keys()for key in all_key: print(all_key)</code></pre><h5 id="8-字典-values-了解"><a href="#8-字典-values-了解" class="headerlink" title="8.字典.values(了解)"></a>8.字典.values(了解)</h5></li><li>获取字典中所有的value<pre><code class="python">print(dict1)all_value = dict1.values()print(all_value)</code></pre><h5 id="9-字典-items"><a href="#9-字典-items" class="headerlink" title="9.字典.items()"></a>9.字典.items()</h5><pre><code class="python">print(dict1.items())for key,value in dict1.items():print(key,value)</code></pre><h5 id="10-字典-setdefault-key-默认值-None"><a href="#10-字典-setdefault-key-默认值-None" class="headerlink" title="10.字典.setdefault(key,默认值 = None)"></a>10.字典.setdefault(key,默认值 = None)</h5></li><li>给字典添加键值对.如果key本身就存在，这个方法五作为<pre><code class="python">dict1.setdefault(&#39;ab&#39;,&#39;abc&#39;)dict1.setdefault(&#39;dd&#39;)print(dict1)</code></pre><h5 id="11-字典1-update-字典2）"><a href="#11-字典1-update-字典2）" class="headerlink" title="11.字典1.update(字典2）"></a>11.字典1.update(字典2）</h5></li><li>将字典2中的键值对更新到字典1中</li><li>更新方式：如果字典2的key，在字典1重视存在的，就字典2中的值去更新字典1中的值，不存在就添加到字典1中<pre><code class="python">dict1 = {&#39;aa&#39;:1,&#39;bb&#39;:&#39;abc&#39;,&#39;cc&#39;:True}dict1.update({&#39;aa&#39;:99,&#39;bb&#39;:&#39;你好&#39;})print(dict1)</code></pre><h4 id="四、字典和列表的组合"><a href="#四、字典和列表的组合" class="headerlink" title="四、字典和列表的组合"></a>四、字典和列表的组合</h4><pre><code class="python"># 学生管理系统# 1.一个系统可以存储多个学生#   系统应该是一个容器：列表、字典# 2.一个学生可以存储：姓名，电话，籍贯，专业，学号ect.# 3.添加学生# 元组不能用# 4.删除学生# 5.修改学生的信息#。。。。</code></pre><h5 id="什么时候使用列表，什么时候使用字典？"><a href="#什么时候使用列表，什么时候使用字典？" class="headerlink" title="什么时候使用列表，什么时候使用字典？"></a>什么时候使用列表，什么时候使用字典？</h5><h5 id="1-保存的多个数据是同一个类型的时候，用列表"><a href="#1-保存的多个数据是同一个类型的时候，用列表" class="headerlink" title="1.保存的多个数据是同一个类型的时候，用列表"></a>1.保存的多个数据是同一个类型的时候，用列表</h5></li><li>例如：声明一个变量保存所有的数学成绩，声明一个变量保存所有的学生的信息<h5 id="2-保存的多个数据的类型不同，就使用字典"><a href="#2-保存的多个数据的类型不同，就使用字典" class="headerlink" title="2.保存的多个数据的类型不同，就使用字典"></a>2.保存的多个数据的类型不同，就使用字典</h5></li><li>声明一个变量保存一个学生的信息</li><li>列表中有字典<pre><code class="python">student_system = [{&#39;name&#39;:&#39;stu1&#39;,&#39;age&#39;:&#39;20&#39;,&#39;tel&#39;:110},               {&#39;name&#39;:&#39;stui2&#39;,&#39;age&#39;:18,&#39;tel&#39;:120}]#   字典中有列表py_class = {&#39;class&#39;:&#39;python1806&#39;,&#39;students&#39;:[         {&#39;name&#39;:&#39;stu1&#39;,&#39;age&#39;:20,&#39;id&#39;:110},         {&#39;name&#39;:&#39;stu2&#39;,&#39;age&#39;:18,&#39;id&#39;:120}]}print(py_class[&#39;class&#39;])# 取出第二个学生的名字print(py_class[&#39;students&#39;][1][&#39;name&#39;])</code></pre></li><li>练习：在班级python1806中添加一个学生，学生的信息自己输入，名字、年龄和id<pre><code class="python">name1 = input(&#39;姓名：&#39;)age1 = int(input(&#39;年龄：&#39;))id1 = input(&#39;id：&#39;)student = {&#39;name&#39;: name1,&#39;age&#39;: age1, &#39;id&#39;: id1}# 将学生对应的字典添加到列表中py_class[&#39;students&#39;].append(student)print(py_class)</code></pre></li><li>练习2：输入一个学生的姓名，根据姓名删除对应学生<br>name2 = input(‘请输入需要删除的学生姓名：’)<pre><code class="python"># 获取班级所有的学生all_student = py_class[&#39;students&#39;]# 遍历取出每个学生对应的字典for student_dict in all_student:  # 判断name2与取出的学生的姓名一样  if student_dict[&#39;name&#39;] == name2:      all_student.remove(student_dict)print(py_class)</code></pre><h4 id="五、集合"><a href="#五、集合" class="headerlink" title="五、集合"></a>五、集合</h4></li><li>集合（set）<h5 id="集合是python中的一种容器类型：无序的，可变的-值唯一，和数学中的集合差不多"><a href="#集合是python中的一种容器类型：无序的，可变的-值唯一，和数学中的集合差不多" class="headerlink" title="集合是python中的一种容器类型：无序的，可变的,值唯一，和数学中的集合差不多"></a>集合是python中的一种容器类型：无序的，可变的,值唯一，和数学中的集合差不多</h5><h5 id="1-声明一个集合"><a href="#1-声明一个集合" class="headerlink" title="1.声明一个集合"></a>1.声明一个集合</h5><pre><code class="python">set1 = {1,2,&#39;a&#39;}print(set1,type(set1))</code></pre></li><li>将其他的序列转换成集合，自带一个去重的功能<br><code>`</code>python<br>set2 = set(‘asjbdauhaicasbja’)<br>print(set2)</li></ul><p>set3 = {10,True,’abc’,52.01}<br>print(set3)</p><pre><code>#####  2.查（获取集合中的元素）+  集合石不能单独获取其中的某一个元素的```python# 遍历获取每一个元素for iteem in set3:    print(iteem)</code></pre><h5 id="3-增（添加元素）"><a href="#3-增（添加元素）" class="headerlink" title="3.增（添加元素）"></a>3.增（添加元素）</h5><ul><li>a.集合.add(元素)<pre><code class="python">set3.add(&#39;good&#39;)print(set3)</code></pre></li><li>b.集合1.update（集合2）:将集合2中的元素，添加到集合1中<pre><code class="python">set3.update({11,1111,2121})print(set3)</code></pre><h5 id="4-删"><a href="#4-删" class="headerlink" title="4.删"></a>4.删</h5></li><li>集合.remove(元素)<br><code>`</code>python<br>set3.remove(1111)<br>print(set3)</li></ul><h1 id="删除所有的元素"><a href="#删除所有的元素" class="headerlink" title="删除所有的元素"></a>删除所有的元素</h1><p>set3.clear()<br>print(set3)</p><pre><code>##### 5.改（改不了）#####  6.数学相关的集合运算+ a.判断包含情况：+ 集合１&gt;=　集合２：判断集合１中是否包含集合２- 集合1 &lt;=  集合2 ：判断集合2中是否包含集合1`print({1,2,3}&gt;= {1})`+  b.求并集：|```pythonset1 = {1,2,3,5,7}set2 = {3,4,2,6,8}print(set1 | set2)</code></pre><ul><li>c.求交集：&amp;<br><code>print(set1 &amp; set2)</code></li><li>d.求差集：-<br><code>print(set1 - set2)</code></li><li>e.求补集：^<br>求两个集合中除了公共部分以外的部分<br><code>`</code>python<br>print(set1 ^ set2)</li></ul><p>list1 = [1,2,2,3,4,5,6]<br>list2 = [5,2,100,20,56]<br>result = list(set(list1) &amp; set(list2))<br>print(result)</p><pre><code>#### 练习```pythonfrom tkinter import *from tkinter import messageboximport randomroot = Tk()root.title(&#39;表白你，做我女票吧&#39;)root.geometry(&#39;700x700+400+400&#39;)a = Button(root, text=&quot;不同意&quot;,bg=&#39;red&#39;)def call():    messagebox._show(&quot;你的眼光还是不错的！&quot;)    root.destroy()b = Button(root,text=&#39;同意&#39;,command = call,bg=&#39;green&#39;)def callback(event):    #print(&quot;clicked at&quot;, event.x, event.y)    i = random.randint(1, 9)    j = random.randint(1,9)    a.place(relx=(0.1*i),rely=(0.1*j))    root.update()def quit():    messagebox.showwarning(&#39;警告&#39;, &#39;快做选择！&#39;)root.bind(&quot;&lt;Button-1&gt;&quot;, callback)root.bind(&#39;Destroy&#39;,call)b.pack(side=&#39;left&#39;,padx=10)a.pack(side=&#39;right&#39;,padx=10)c=Label(text=&#39;同意我，退出程序！&#39;,font=&#39;Arial-10&#39;)c.pack()#a.pack()root.protocol(&quot;WM_DELETE_WINDOW&quot;, quit)root.mainloop()</code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dict </tag>
            
            <tag> set </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础语法</title>
      <link href="/2017/03/07/python/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
      <url>/2017/03/07/python/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>###（一）基础<br>1.快捷键：<br> control+/      注释/取消注释<br> control+s      保存（养成习惯）<br> control+c      复制、拷贝<br> control+v      粘贴<br> control+x      剪切<br> control+b      编译（编译执行——sublime）<br> control+r      编译执行（暂时不用）<br> control+a      全选<br> control+z      撤销<br> control+y（control+shift+z）      反撤销<br> control+f      查找<br> control+n      新建（文件）<br> control+shift+n       新建（工程）<br> 按住shift点鼠标，可以选中部分内容</p><p> 2.注意</p><ul><li>###写代码的时候，一定是在英文输入的状态下<pre><code class="python">print就是python中的打印函数，功能是在控制台将括号中的内容输出print(&#39;hello world !&#39;)</code></pre><h3 id="二-基础语法"><a href="#二-基础语法" class="headerlink" title="(二)基础语法"></a>(二)基础语法</h3>####1.注释<br>注释是不会参与代码的编译和执行的，只是对代码进行解释和说明的文字。（写注释养成习惯）<br>单行注释就是在注释文字前加#<br>多行注释如下<pre><code class="python">&#39;&#39;&#39;这是多行注释这是多行注释这是多行注释&#39;&#39;&#39;&quot;&quot;&quot;这是多行注释这是多行注释这是多行注释&quot;&quot;&quot;</code></pre>或者再多行前加#<h4 id="2-标识符"><a href="#2-标识符" class="headerlink" title="2.标识符"></a>2.标识符</h4>a.是由字母数字下划线组成（只能少不能多）<br>b.数字不能开头<br>c.大小写敏感（大小写的表示不一样，例如：abc、ABC不一样）<ul><li>python3以后，标识中可以包含非ASCII码（可以包含中文）,但是在实际开发中不建议使用</li></ul></li><li>版本A.B.C    A-大版本，重大修改    B-增加功能     C-修复BUG<pre><code class="python">nb = 90a1 = 10a1_ = 10姓名 = 900_hs = 100</code></pre></li></ul><pre><code class="python">错误表示： a&#39;sh = 100 h%10 = 100 9 = 100 1abc = 100</code></pre><h4 id="3-关键字（保留字）"><a href="#3-关键字（保留字）" class="headerlink" title="3.关键字（保留字）"></a>3.关键字（保留字）</h4><p> python中保留用来作为特殊语法和拥有特殊功能的一些单词</p><pre><code class="python">&#39;False&#39;, &#39;None&#39;, &#39;True&#39;, &#39;and&#39;, &#39;as&#39;, &#39;assert&#39;, &#39;break&#39;, &#39;class&#39;, &#39;continue&#39;, &#39;def&#39;, &#39;del&#39;, &#39;elif&#39;, &#39;else&#39;, &#39;except&#39;, &#39;finally&#39;, &#39;for&#39;, &#39;from&#39;, &#39;global&#39;, &#39;if&#39;, &#39;import&#39;, &#39;in&#39;, &#39;is&#39;, &#39;lambda&#39;, &#39;nonlocal&#39;, &#39;not&#39;, &#39;or&#39;, &#39;pass&#39;, &#39;raise&#39;, &#39;return&#39;, &#39;try&#39;, &#39;while&#39;, &#39;with&#39;, &#39;yield&#39;</code></pre><pre><code class="python">import keywordprint(keyword.kwlist)</code></pre><h4 id="4-行与缩进"><a href="#4-行与缩进" class="headerlink" title="4.行与缩进"></a>4.行与缩进</h4><p> #####缩进要求：<br>‘’’<br>a.同一级的代码必须保持同一缩进。(统一使用tab来产生缩进)<br>b.通过缩进来产生代码块（类似于其他语言中的{}）<br>‘’’</p><h5 id="行的规范"><a href="#行的规范" class="headerlink" title="行的规范"></a>行的规范</h5><p>a.声明函数的前后必须有两个换行<br>b.声明类的前后也需要两个换行<br>c.多个功能模块间用换行隔开</p><pre><code class="python">a = 10b = 20if a &gt; 10:   print(&#39;abc&#39;)   print(&#39;123&#39;)</code></pre><h4 id="5-多行显示-一句代码多行显示"><a href="#5-多行显示-一句代码多行显示" class="headerlink" title="5.多行显示(一句代码多行显示)"></a>5.多行显示(一句代码多行显示)</h4><p> a.在需要换行的地方加入\，然后在后面换行。换行后缩进不受限制</p><pre><code class="python">a = 10000 + 10000 - 1000\ * 1000 + 10000 /1000\  *2000 - 10000print (a)</code></pre><p> b.列表、字典、元祖和集合的字面量换行不用加\</p><pre><code class="python">[      120,      23,      &#39;asd&#39;,      278,      &#39;skda&#39;,      8444]</code></pre><h4 id="6-字面量-具体的值"><a href="#6-字面量-具体的值" class="headerlink" title="6.字面量(具体的值)"></a>6.字面量(具体的值)</h4><p> a.数字字面量：10,12.5,-10,+12,2e2(e表示10，e2表示10的平方),10j<br> b.布尔值：True(真),False（假）<br> c.字符串：’(all),asdj121’或者”hhea11120”<br> d.列表：[10,20,’python’,’java’]<br> e.字典:{‘a’:10,’name’:’XXX’}<br> 7.python中的基本数据类型<br> a.数字相关的:int(整型)，float(浮点型)，complex(复数)<br> b.布尔（bool）：只有True和False两个值<br> c.str(字符串)<br> d.list(列表)<br> e.dict(字典)<br> f.tuple(元祖)<br> g.set(集合)<br> h.function(函数)<br> i.bytes(字节)</p><h3 id="三-变量"><a href="#三-变量" class="headerlink" title="(三)变量"></a>(三)变量</h3><p>声明变量就是在内存中开辟 空间存储数据。（变量就是用来存储数据的）</p><p>#####python是动态语言</p><p>####1. 怎么声明变量</p><p>#####格式：变量=值</p><p>#####说明</p><ul><li>类型:<br>python声明变量的时候不需要确定类型</li><li>变量名：<br>标识符，不能是关键字；见名知义，PEP8命名规范（所有的字母都是小写，多个单词之间用_隔开）</li><li>=：<br>赋值符号，将右边的值赋值给左边的变量</li><li>值：<br>表达式（就是有结果的，例如：字面量，运算表达式（20+1），其他变量）<br>####2.声明一个变量name,赋值为‘路飞’。使用name的时候，就相当于在使用‘路飞’<pre><code class="python">name = &#39;路飞&#39;print（name）</code></pre><h4 id="3-声明一个变量class-name-保存’python1806’"><a href="#3-声明一个变量class-name-保存’python1806’" class="headerlink" title="3.声明一个变量class_name,保存’python1806’"></a>3.声明一个变量class_name,保存’python1806’</h4><pre><code class="python">class_name = &#39;python1806&#39;   (驼峰式：className)number = 100</code></pre><h4 id="4-声明一个变量，可以存储不同类型的数据"><a href="#4-声明一个变量，可以存储不同类型的数据" class="headerlink" title="4.声明一个变量，可以存储不同类型的数据"></a>4.声明一个变量，可以存储不同类型的数据</h4><pre><code class="python">number = &#39;娜美&#39;print(number)</code></pre><h4 id="5-python中每条语句结束可以不用加分号。但是如果一行要写多条语句，就用分号隔开"><a href="#5-python中每条语句结束可以不用加分号。但是如果一行要写多条语句，就用分号隔开" class="headerlink" title="5.python中每条语句结束可以不用加分号。但是如果一行要写多条语句，就用分号隔开"></a>5.python中每条语句结束可以不用加分号。但是如果一行要写多条语句，就用分号隔开</h4><pre><code class="python">number = 10;number = 10e2</code></pre><h4 id="6-同时声明两个变量，并且赋值一样"><a href="#6-同时声明两个变量，并且赋值一样" class="headerlink" title="6.同时声明两个变量，并且赋值一样"></a>6.同时声明两个变量，并且赋值一样</h4><pre><code class="python">str1 = str2 = str3 = &#39;abc&#39;</code></pre><h4 id="7-id函数"><a href="#7-id函数" class="headerlink" title="7.id函数"></a>7.id函数</h4>####id（变量）————查看变量地址<br>####python声明变量，和给变量赋值的原理：先在内存中开辟空间存储数据，然后再将变量名作为数据存储空间的名字<br><code>`</code>python<br>a = 10<br>print(id(a))<br>a = 100<br>print(id(a))</li></ul><p>a = 10<br>b = 10<br>print(id(a)),print(id(b))<br>b = 20<br>print(id(b))</p><pre><code>输出结果```python18351014881835104368183510148818351014881835101808</code></pre><h4 id="python-中的声明变量与JAVA中声明变量的区别："><a href="#python-中的声明变量与JAVA中声明变量的区别：" class="headerlink" title="python 中的声明变量与JAVA中声明变量的区别："></a>python 中的声明变量与JAVA中声明变量的区别：</h4><p>python是先存储数据，然后再给这个存储空间命名。（数据决定空间位置）<br> JAVA是先给空间命名，然后再存储数据。（变量决定空间位置）</p><h3 id="四-数字和布尔"><a href="#四-数字和布尔" class="headerlink" title="(四)数字和布尔"></a>(四)数字和布尔</h3><h4 id="1-int-整型"><a href="#1-int-整型" class="headerlink" title="1.int(整型)"></a>1.int(整型)</h4><p> 所有的整数都是整型，python3中的整型只有int,python2中有int和long</p><pre><code class="python">num1 = 10num2 = -100</code></pre><p> #####内置函数：type（）–获取括号中数据的类型</p><pre><code class="python">print(type(num1),type(num2))</code></pre><h4 id="2-float-浮点型"><a href="#2-float-浮点型" class="headerlink" title="2.float(浮点型)"></a>2.float(浮点型)</h4><p> 所有带小数点的数，都是浮点型。python中的浮点型只有float</p><pre><code class="python">num3 = 0.12num4 = +100.0num5 = 2e2num6 = -3.145print(type(num3),\    type(num4),\    type(num5),\    type(num6))</code></pre><h4 id="3-布尔类型"><a href="#3-布尔类型" class="headerlink" title="3.布尔类型"></a>3.布尔类型</h4><p>布尔只有True和false</p><pre><code class="python">bool1 = True bool2 = Falseprint(type(bool2),type(bool1))</code></pre><h3 id="五-运算符"><a href="#五-运算符" class="headerlink" title="(五)运算符"></a>(五)运算符</h3><p>####1.数学运算符：+(加)，-（减），*（乘），/（除），//(整除)，%（取余），**（幂运算）</p><h5 id="a-，-，-，-，-和数学中的加、减、乘、除、求余的功能是一样的。"><a href="#a-，-，-，-，-和数学中的加、减、乘、除、求余的功能是一样的。" class="headerlink" title="a.+，-，*，/，%和数学中的加、减、乘、除、求余的功能是一样的。"></a>a.+，-，*，/，%和数学中的加、减、乘、除、求余的功能是一样的。</h5><pre><code class="python">a = 10 + 10print(10+20)print(100-20)print(2*3.5)print(5/2)print(3%2)</code></pre><p>结果</p><pre><code class="python">308072.51</code></pre><p> #####b.//(整除)<br>求商，商只取整数部分</p><pre><code class="python">print(5//2)print(6.3//2)</code></pre><p>结果</p><pre><code class="python">23</code></pre><p> #####c.<strong>(幂运算)<br> x</strong>y–x的y次方</p><pre><code class="python">print(2**3)print(9**0.5)</code></pre><p>结果</p><pre><code class="python">83</code></pre><p> 取出一个4位整数的百位上的数。例如，取出3512中的5</p><pre><code class="python">number = 3512print((number%1000)//100)</code></pre><p><code>5</code></p><h4 id="2-比较运算：-gt-（大于），-lt-（小于），-（等于），-（不等于），-gt-大于等于"><a href="#2-比较运算：-gt-（大于），-lt-（小于），-（等于），-（不等于），-gt-大于等于" class="headerlink" title="2.比较运算：&gt;（大于），&lt;（小于），==（等于），!=（不等于），&gt;=(大于等于)"></a>2.比较运算：&gt;（大于），&lt;（小于），==（等于），!=（不等于），&gt;=(大于等于)</h4><p> 所有的比较运算的结果都是布尔值</p><pre><code class="python">print(10&gt;20)print(10&lt;20)print(10==20)print(10!=20)</code></pre><p>结果</p><pre><code class="python">falsetruefalsetrue</code></pre><h4 id="3-逻辑运算符：and（与），or-或-not-非"><a href="#3-逻辑运算符：and（与），or-或-not-非" class="headerlink" title="3.逻辑运算符：and（与），or(或),not(非)"></a>3.逻辑运算符：and（与），or(或),not(非)</h4><p> 逻辑运算符操作的数据是布尔值，输出的结果也是布尔值</p><p> #####a.and(与)–和、并且</p><pre><code class="python">  两个都是Ture结果才是True，只要有一个False，结果就是Falseprint(True and True)      Trueprint(True and False)     Falseprint(False and False)    False</code></pre><pre><code class="python">  要求学习成绩在3.5以上，并且操评分不低于90score1 = 4.0score2 = 80print(score1&gt;3.5 and score2&gt;90)   False</code></pre><h6 id="什么时候使用-：要求两个或者多个条件同时满足"><a href="#什么时候使用-：要求两个或者多个条件同时满足" class="headerlink" title="什么时候使用 ：要求两个或者多个条件同时满足"></a>什么时候使用 ：要求两个或者多个条件同时满足</h6><h5 id="b-or-或-–或者"><a href="#b-or-或-–或者" class="headerlink" title="b.or(或)–或者"></a>b.or(或)–或者</h5><pre><code class="python">只要有一个True结果就是True。两个都是False结果才是Falseprint(score1&gt;3.5 or score2&gt;=90)   True</code></pre><p> ######什么时候使用：要求有两个或者两个以上，满足一个就行</p><h5 id="c-not-非"><a href="#c-not-非" class="headerlink" title="c.not(非)"></a>c.not(非)</h5><pre><code class="python">True变成False,False就变成Trueage = 20年龄不小于18print(not age&lt;18)print(age&gt;=18)</code></pre><p> ####4.赋值运算符：=（赋值），+=，-=，*=，/=，%=，//=，**=<br> 赋值符号的左边必须是变量；运算顺序是（先算赋值符号右边的值，然后再将右边的值赋给左边）</p><h5 id="a-变量-值"><a href="#a-变量-值" class="headerlink" title="a.变量 = 值"></a>a.变量 = 值</h5><pre><code class="python">a = 10b = 10 + 10c = a + bd = a &gt; 10print(d)</code></pre><h5 id="b-变量-值"><a href="#b-变量-值" class="headerlink" title="b.变量 += 值"></a>b.变量 += 值</h5><ul><li>这儿的变量必须是已经声明过的变量<pre><code class="python">a += 2   相当于 a = a + 2print(a)b -= 2   相当于 b = b - 2</code></pre></li><li>补充：变量必须先声明，再使用<pre><code class="python">num1(错误表示，没有先定义)num1 = 10;num2 = 20num1</code></pre><h4 id="5-运算符的优先级"><a href="#5-运算符的优先级" class="headerlink" title="5.运算符的优先级"></a>5.运算符的优先级</h4>数学运算符 &gt; 比较运算符 &gt; 逻辑运算符 &gt; 赋值运算符<br>数学运算符：*<em> &gt; (</em>,/,//,%) &gt; (+,-)<br>先计算优先级高的，优先级一样，从左往右依次计算。可以通过加括号改变优先级<br><code>`</code>python<br>print(10 * 20 + (30 &lt; 40) / 2 - 100)</li></ul><p>print(2*2**3//8%2)</p><pre><code>### (六)进制######计算机中常用的进制：二进制、八进制、十进制、十六进制 ####十进制 1.基数：0,1,2,3,4,5,6,7,8,9 2.进位：逢10进1 3.十进制数上的每一位：123 = 10^2*1+10^1*2+10^0*3#### 二进制 1.基数：0,1   例如：110,1010 2.进位：逢2进1 3.二进制数上的每一位：1011 = 2^0*1 + 2^1*1 + 2^2*0 + 2^3*1 = 11#### 八进制 1.基数：0,1,2，3,4,5,6,7 2.进位：逢8进1 3.八进制数的每一位：123 = 8^0*3 + 8^1*2+8^2*1 = 83#### 十六进制 1.基数：0-9，a-f(A-F)--a(10)~f(15)    例如：1af 2.进位：逢16进1 3.十六进制数的每一位：123 = 19^0*3 + 16^1*2 + 16^2*1 = 291 ####进制间的转换 1.二进制、八进制、十六进制---&gt;十进制 进制数^位数（从0开始）*每一位上的值的和 2.八进制、十六进制----&gt;二进制 将一位的八进制转换成3位的二进制。将一位的十六进制转换成4位的二进制```python 123（8）---&gt;001 010 011 ---&gt;001010011（2） 123（16）--&gt;0001 0010 0011 --&gt;000100100011(2) 10(16)--&gt;0001 0000--&gt;00010000</code></pre><p> 3.二进制—&gt;八进制、十六进制<br> 将三位的二进制转换成一位的八进制，将四位的二进制转换成一位的十六进制</p><pre><code class="python"> 001 010 011(2)--&gt;123(8)</code></pre><p> 4.十进制—&gt;二进制 ： 相除取余</p><p> python进制的支持<br> python支持整数的二进制、八进制、十六进制</p><ul><li>python中二进制、八进制、十六进制的表示</li><li><h5 id="二进制：0b"><a href="#二进制：0b" class="headerlink" title="二进制：0b"></a>二进制：0b</h5><code>`</code>python<br>print(0b11)<br>print(11)</li></ul><p>print(bin(20))        将其他的数据转换成二进制   bin()<br>print(bin(0x20))</p><pre><code>+ ##### 八进制：0o  print(0o11)```pythonprint(oct(20))        将其他的数据转换成八进制   oct()print(oct(0b11011))</code></pre><ul><li>#####十六进制：0x<pre><code class="python">print(0xaf)print(hex(20))        将其他的数据转换成十六进制 hex()</code></pre></li></ul><h2 id="（七）字符"><a href="#（七）字符" class="headerlink" title="（七）字符"></a>（七）字符</h2><ul><li><p>常见的转义字符：</p><ul><li><p>\n ——— 换行</p></li><li><p>\t ———- 制表符（相当于tab）</p></li><li><p>\ ——— ,隔开</p></li><li><p>‘ ———— ’</p></li><li><p>“ ———– ”</p><p>在计算字符长度的时候，转义字符的长度是1</p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
