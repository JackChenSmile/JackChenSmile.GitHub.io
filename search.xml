<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>部署Django项目</title>
      <link href="/2018/12/14/Django/Django/"/>
      <url>/2018/12/14/Django/Django/</url>
      
        <content type="html"><![CDATA[<h3 id="安装MariaDB"><a href="#安装MariaDB" class="headerlink" title="安装MariaDB"></a>安装MariaDB</h3><p>安装命令</p><pre><code>yum -y install mariadb mariadb-server</code></pre><p>安装完成MariaDB，首先启动MariaDB</p><pre><code>systemctl start mariadb</code></pre><p>设置开机启动</p><pre><code>systemctl enable mariadb</code></pre><h3 id="设置密码"><a href="#设置密码" class="headerlink" title="设置密码"></a>设置密码</h3><p>命令: mysql_secure_installation</p><pre><code class="python">Enter current password for root:&lt;–初次运行直接回车设置密码Set root password? [Y/n] &lt;– 是否设置root用户密码，输入y并回车或直接回车New password: &lt;– 设置root用户的密码Re-enter new password: &lt;– 再输入一次你设置的密码其他配置Remove anonymous users? [Y/n] &lt;– 是否删除匿名用户，回车Disallow root login remotely? [Y/n] &lt;–是否禁止root远程登录,回车,Remove test database and access to it? [Y/n] &lt;– 是否删除test数据库，回车Reload privilege tables now? [Y/n] &lt;– 是否重新加载权限表，回车初始化MariaDB完成，接下来测试登录mysql -u root -p</code></pre><h3 id="开启远程连接"><a href="#开启远程连接" class="headerlink" title="开启远程连接"></a>开启远程连接</h3><p>在mysql数据库中的user表中可以看到默认是只能本地连接的，所有可以添加一个新的用户，该用户可以远程访问</p><h4 id="1-创建用户"><a href="#1-创建用户" class="headerlink" title="1. 创建用户"></a>1. 创建用户</h4><pre><code class="python"># 先使用数据库use mysql;# 针对ipcreate user &#39;root&#39;@&#39;192.168.10.10&#39; identified by &#39;password&#39;;#全部 create user &#39;root&#39;@&#39;%&#39; identified by &#39;password&#39;;</code></pre><h4 id="2-授权"><a href="#2-授权" class="headerlink" title="2. 授权"></a>2. 授权</h4><pre><code class="python"># 给用户最大权限grant all privileges on *.* to &#39;root&#39;@&#39;%&#39; identified by &#39;password&#39;;# 给部分权限(test 数据库)grant all privileges on test.* to &#39;root&#39;@&#39;%&#39; identified by &#39;password&#39; with grant option;# 刷新权限表</code></pre><pre><code> flush privileges;# 查看show grants for &#39;root&#39;@&#39;localhost&#39;;</code></pre><p>接下来就可以在远程的数据库可视化工具中直接访问该服务器中的mysql了。</p><pre><code># 访问数据库mysql -u root -p</code></pre><h3 id="安装python3-6"><a href="#安装python3-6" class="headerlink" title="安装python3.6"></a>安装python3.6</h3><p>在centos中，系统默认只提供python2.7的版本，但是项目我们使用的python3.6的版本。所有我们自己安装python3</p><h4 id="安装Python3的方法"><a href="#安装Python3的方法" class="headerlink" title="安装Python3的方法"></a>安装Python3的方法</h4><p>首先安装依赖包</p><p>安装Python3.6所需要的依赖包：</p><pre><code>yum -y groupinstall &quot;Development tools&quot;yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel</code></pre><p>安装Python3.7还需额外安装依赖包：</p><pre><code>yum install libffi-devel -y</code></pre><p>然后根据自己需求下载不同版本的Python3，我下载的是Python3.6.2</p><pre><code class="python">wget https://www.python.org/ftp/python/3.6.2/Python-3.6.2.tar.xz然后解压压缩包，进入该目录，安装Python3tar -xvJf  Python-3.6.2.tar.xzcd Python-3.6.2./configure --prefix=/usr/local/python3make &amp;&amp; make install</code></pre><p>最后创建软链接</p><pre><code>ln -s /usr/local/python3/bin/python3 /usr/bin/python3ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3</code></pre><h3 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h3><h4 id="1-安装virtualenv"><a href="#1-安装virtualenv" class="headerlink" title="1. 安装virtualenv"></a>1. 安装virtualenv</h4><pre><code>yum install python-virtualenv</code></pre><h4 id="2-创建虚拟环境"><a href="#2-创建虚拟环境" class="headerlink" title="2. 创建虚拟环境"></a>2. 创建虚拟环境</h4><pre><code>virtualenv --no-site-packages envcd env# 激活虚拟环境source bin/activate</code></pre><h4 id="3-安装环境需要的包"><a href="#3-安装环境需要的包" class="headerlink" title="3. 安装环境需要的包"></a>3. 安装环境需要的包</h4><pre><code>pip3 install -r re_install.txt其中re_install.txt文件中记录的是需要安装包的名称以及对应的版本</code></pre><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>该部署采用的是cenots7系统来部署</p><p>Django的项目中，在工程目录下settings.py文件中有一个DEBUG=True参数，如果DEBUG=False则会出现js,css，img无法加载的情况出现。</p><p>原因如下：</p><p>Django框架仅在开发模式下提供静态文件服务。当我开启DEBUG模式时，Django内置的服务器是提供静态文件的服务的，所以css等文件访问都没有问题，但是关闭DEBUG模式后，Django便不提供静态文件服务了。想一想这是符合Django的哲学的：这部分事情标准服务器都很擅长，就让服务器去做吧！</p><h4 id="1-测试环境中部署方式"><a href="#1-测试环境中部署方式" class="headerlink" title="1. 测试环境中部署方式"></a>1. 测试环境中部署方式</h4><h5 id="urls-py中的修改"><a href="#urls-py中的修改" class="headerlink" title="urls.py中的修改"></a>urls.py中的修改</h5><p>在测试环境中一般都直接使用python manage.py runserver的方式去运行项目。其中就涉及到DEBUG=False的修改，静态目录的修改等，具体修改如下：</p><pre><code class="python">a) 修改settings.py配置文件中的DEBUG=False模式，修改ALLOEWD_HOST=[&#39;*&#39;]b) 修改工程目录下的urls.pyfrom django.views.static import serveurlpatterns = [    url(r&#39;^admin/&#39;, admin.site.urls),    url(r&#39;^axf/&#39;, include(&#39;axf.urls&#39;, namespace=&#39;axf&#39;)),    # 增加以下的url路由    url(r&#39;^static/(?P&lt;path&gt;.*)$&#39;, serve, {&quot;document_root&quot;: settings.STATICFILES_DIRS[0]}),    url(r&#39;^media/(?P&lt;path&gt;.*)$&#39;, serve, {&quot;document_root&quot;: settings.MEDIA_ROOT}),</code></pre><pre><code>    url(r&#39;^$&#39;, views.home)]</code></pre><h5 id="中间件的修改"><a href="#中间件的修改" class="headerlink" title="中间件的修改"></a>中间件的修改</h5><p>如果中间件是过滤哪些地址不需要登录验证的话，可以设置如下的static和media过滤地址的参数：</p><pre><code class="python"># 验证用户的登录状态paths = [&#39;/user/login/&#39;, &#39;/user/register/&#39;,         &#39;/axf/market/&#39;, &#39;/axf/marketparams/(\d+)/(\d+)/(\d+)/&#39;,        &#39;/static/[0-9a-zA-Z/\.]&#39;, &#39;/media/[0-9a-zA-Z/\.]&#39;]for path in paths:    if re.match(path, request.path):        return None</code></pre><h4 id="2-正式环境中部署方式"><a href="#2-正式环境中部署方式" class="headerlink" title="2. 正式环境中部署方式"></a>2. 正式环境中部署方式</h4><p>正式环境中部署为nginx+uwsgi来部署django项目</p><h5 id="2-1-安装nginx"><a href="#2-1-安装nginx" class="headerlink" title="2.1 安装nginx"></a>2.1 安装nginx</h5><p>a）添加nginx存储库<br>​<br>​    yum install epel-release</p><p>b) 安装nginx</p><pre><code>yum install nginx</code></pre><p>c) 运行nginx</p><p>Nginx不会自行启动。要运行Nginx<br>​<br>​    systemctl start nginx</p><p>nginx的运行命令：</p><pre><code class="python"> systemctl status nginx 查看nginx的状态 systemctl start/stop/enable/disable nginx 启动/关闭/设置开机启动/禁止开机启动</code></pre><p>d）系统启动时启用Nginx<br>​<br>​    systemctl enable nginx</p><p>e）如果您正在运行防火墙，请运行以下命令以允许HTTP和HTTPS通信：<br>​    </p><pre><code class="python">sudo firewall-cmd --permanent --zone=public --add-service=http sudo firewall-cmd --permanent --zone=public --add-service=httpssudo firewall-cmd --reload</code></pre><h4 id="3-配置uwsgi"><a href="#3-配置uwsgi" class="headerlink" title="3.配置uwsgi"></a>3.配置uwsgi</h4><h5 id="3-1-安装uwsgi"><a href="#3-1-安装uwsgi" class="headerlink" title="3.1 安装uwsgi"></a>3.1 安装uwsgi</h5><p>在虚拟环境中安装uwsgi，假设虚拟环境安装在/home/env/axfenv中</p><pre><code>/home/env/axfeng/bin/python3/pip3 install uwsgi</code></pre><h4 id="4-配置项目代码，配置项目nginx，配置uwsgi-ini等"><a href="#4-配置项目代码，配置项目nginx，配置uwsgi-ini等" class="headerlink" title="4. 配置项目代码，配置项目nginx，配置uwsgi.ini等"></a>4. 配置项目代码，配置项目nginx，配置uwsgi.ini等</h4><p><strong>在home文件中创建如下四个文件夹</strong></p><p>conf是配置文件，用于存放项目的nginx.conf文件，uwsgi.ini文件</p><p>logs是日志文件，用于存放nginx的启动成功和失败文件，以及uwsgi的运行日志文件</p><p>env是用于存放虚拟环境</p><p>src是项目文件，该目录下上传的是目录代码</p><h4 id="4-1-配置nginx-conf文件"><a href="#4-1-配置nginx-conf文件" class="headerlink" title="4.1 配置nginx.conf文件"></a>4.1 配置nginx.conf文件</h4><p><b>首先</b>：编写自己项目的nginx.conf文件如下：</p><p>每一个项目对应有一个自己定义的nginx的配置文件，比如爱鲜蜂项目，我定义为axfnginx.conf文件</p><pre><code class="python">server {     listen       80;     server_name 39.104.176.9 localhost;     access_log /home/logs/access.log;     error_log /home/logs/error.log;     location / {         include uwsgi_params;         uwsgi_pass 127.0.0.1:8890;     }     location /static/ {         alias /home/src/axf/static/;         expires 30d;     } }</code></pre><p><b>其次</b>：修改总的nginx的配置文件，让总的nginx文件包含我们自定义的项目的axfnginx.conf文件</p><p>总的nginx配置文件在：/etc/nginx/nginx.conf中</p><p><img src="/2018/12/14/Django/Django/django_centos_nginx_peizhi.png" alt="django_centos_nginx_peizhi"></p><p>以上步骤操作完成以后，需要重启nginx：</p><pre><code class="python">systemctl restart nginx</code></pre><h4 id="4-2-配置uwsgi文件"><a href="#4-2-配置uwsgi文件" class="headerlink" title="4.2 配置uwsgi文件"></a>4.2 配置uwsgi文件</h4><p>在conf文件夹下除了包含自定义的axfnginx.conf文件，还有我们定义的uwsgi.ini文件</p><pre><code class="python">[uwsgi]projectname = axfbase = /home/src# 守护进程master = true# 进程个数processes = 4# 虚拟环境pythonhome = /home/env/axfenv# 项目地址chdir = %(base)/%(projectname)# 指定python版本pythonpath = /usr/local/python3/bin/python3# 指定uwsgi文件module = %(projectname).wsgi# 和nginx通信地址:端口socket = 127.0.0.1:8890# 日志文件地址logto = /home/logs/uwsgi.log</code></pre><p>​<br>运行项目:</p><pre><code class="python">/home/env/axfeng/bin/python3/uwsgi --ini uwsgi.ini</code></pre>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django项目部署 </tag>
            
            <tag> MariaDB安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>practice linkman</title>
      <link href="/2018/10/20/%E6%95%B0%E6%8D%AE%E5%BA%93/practice-linkman/"/>
      <url>/2018/10/20/%E6%95%B0%E6%8D%AE%E5%BA%93/practice-linkman/</url>
      
        <content type="html"><![CDATA[<h3 id="MY简单的联系人练习"><a href="#MY简单的联系人练习" class="headerlink" title="MY简单的联系人练习"></a>MY简单的联系人练习</h3><pre><code class="python">import pymysqldef add_con(con):    while True:        telname = input(&#39;联系人姓名：&#39;)        relation = input(&#39;与联系人关系：&#39;)        tel = input(&#39;联系人电话：&#39;)        with con.cursor() as cursor:            result = cursor.execute(                args=(telname, relation, tel),                query=&quot;insert into tb_cont values (default, %s, %s, %s)&quot;)            if result == 1:                print(&#39;添加成功!&#39;)                print(&#39;-&#39; * 30)                option = str(input(&#39;是否继续添加 yes / no  :&#39;))                if option == &#39;yes&#39;:                    continue                else:                    break            else:                print(&#39;添加失败，请重新添加&#39;)                continuedef function(cursor):    print(&#39;编号    \t姓名    \t   关系    \t电话    &#39;)    print(&#39;=&#39; * 50)    for row in cursor.fetchall():        print(str(row[&#39;id&#39;]).ljust(8), end=&#39;&#39;)        print((row[&#39;telname&#39;].ljust(8) if len(row[&#39;telname&#39;]) == 3 else row[&#39;telname&#39;].ljust(9)), end=&#39;&#39;)        print(str(row[&#39;relation&#39;]).ljust(9), end=&#39;&#39;)        print(str(row[&#39;tel&#39;]).ljust(15))    print(&#39;=&#39; * 50)def check_all_con(con):    figure = 0    while True:        print(&#39;=&#39; * 50)        with con.cursor() as cursor:            cursor.execute(                args=(figure,),                query=&quot;select id, telname, relation, tel from tb_cont order by id limit %s, 5&quot;)            function(cursor)        print(&#39;1.删除联系人&#39;)        print(&#39;2.查看下一页&#39;)        print(&#39;3.查看上一页&#39;)        print(&#39;4.修改联系人信息&#39;)        print(&#39;5.返回上一级&#39;)        print(&#39;-&#39; * 30)        elect = input(&#39;请选择：&#39;)        if elect == &#39;1&#39;:            del_con(con)        elif elect == &#39;2&#39;:            figure += 5            continue        elif elect == &#39;3&#39;:            if figure &gt;= 5:                figure -= 5            else:                print(&#39;没有上一页，请重新选择&#39;)            continue        elif elect == &#39;4&#39;:            updeat_con(con)        else:            breakdef fuzzy1(con):    figure = 0    while True:        content = str(input(&#39;请输入搜索内容：&#39;))        with con.cursor() as cursor:            cursor.execute(                args=(&quot;%&quot; + content + &quot;%&quot;, figure),                query=&quot; select id, telname, relation, tel from tb_cont where telname like %s &quot;                      &quot; order by id limit %s, 5&quot;)            function(cursor)        print(&#39;1.删除联系人&#39;)        print(&#39;2.查看下一页&#39;)        print(&#39;3.查看上一页&#39;)        print(&#39;4.退出搜索&#39;)        elect = input(&#39;请选择：&#39;)        if elect == &#39;1&#39;:            cho = int(input(&#39;请输入要删除联系人的编号：&#39;))            with con.cursor() as cursor:                result = cursor.execute(                    args=(cho,),                    query=&quot;delete from tb_cont where id=%s&quot;)                if result == 1:                    print(&#39;删除成功！&#39;)                    print(&#39;-&#39; * 30)                    option = str(input(&#39;是否继续删除 yes / no  :&#39;))                    if option == &#39;yes&#39;:                        del_con(con)                    else:                        break                else:                    print(&#39;删除失败，请重新删除&#39;)                    continue        elif elect == &#39;2&#39;:            figure += 5            continue        else:            breakdef fuzzy2(con):    figure = 0    while True:        content = str(input(&#39;请输入搜索电话：&#39;))        with con.cursor() as cursor:            cursor.execute(                args=(&quot;%&quot; + content + &quot;%&quot;, figure),                query=&quot; select id, telname, relation, tel from tb_cont where tel like %s &quot;                      &quot; order by id limit %s, 5 &quot;)            function(cursor)        print(&#39;1.删除联系人&#39;)        print(&#39;2.查看下一页&#39;)        print(&#39;3.查看上一页&#39;)        print(&#39;4.退出搜索&#39;)        elect = input(&#39;请选择：&#39;)        if elect == &#39;1&#39;:            cho = int(input(&#39;请输入要删除联系人的编号：&#39;))            with con.cursor() as cursor:                result = cursor.execute(                    args=(cho,),                    query=&quot;delete from tb_cont where id=%s&quot;)                if result == 1:                    print(&#39;删除成功！&#39;)                    print(&#39;-&#39; * 30)                    option = str(input(&#39;是否继续删除 yes / no  :&#39;))                    if option == &#39;yes&#39;:                        del_con(con)                    else:                        break                else:                    print(&#39;删除失败，请重新删除&#39;)                    continue        elif elect == &#39;2&#39;:            figure += 5            continue        elif elect == &#39;3&#39;:            if figure &gt;= 5:                figure -= 5            else:                print(&#39;没有上一页，请重新选择&#39;)            continue        else:            breakdef updeat_con(con):    while True:        id = int(input(&#39;请输入要修改的联系人编号：&#39;))        telname = input(&#39;联系人姓名：&#39;)        relation = input(&#39;与联系人关系：&#39;)        tel = input(&#39;联系人电话：&#39;)        with con.cursor() as cursor:            result = cursor.execute(                args=(telname, relation, tel, id),                query=&quot;update tb_cont set telname=%s, relation=%s, tel=%s where id=%s&quot;)            if result == 1:                print(&#39;修改成功！&#39;)                print(&#39;-&#39; * 30)                option = str(input(&#39;是否继续修改 yes / no  :&#39;))                if option == &#39;yes&#39;:                    continue                else:                    break            else:                print(&#39;修改失败，请重新修改&#39;)                continuedef del_con(con):    while True:        cho = int(input(&#39;请输入要删除联系人的编号：&#39;))        with con.cursor() as cursor:            result = cursor.execute(                args=(cho,),                query=&quot;delete from tb_cont where id=%s&quot;)            if result == 1:                print(&#39;删除成功！&#39;)                print(&#39;-&#39; * 30)                option = str(input(&#39;是否继续删除 yes / no  :&#39;))                if option == &#39;yes&#39;:                    continue                else:                    break            else:                print(&#39;删除失败！&#39;)                print(&#39;-&#39; * 30)                option = str(input(&#39;是否继续删除 yes / no  :&#39;))                if option == &#39;yes&#39;:                    continue                else:                    breakdef check_con(con):    while True:        print(&#39;-&#39; * 30)        print(&#39;1.查看全部联系人&#39;)        print(&#39;2.搜索联系人&#39;)        print(&#39;3.返回上一级&#39;)        print(&#39;-&#39; * 30)        sel = input(&#39;请选择查看方式：&#39;)        if sel == &#39;1&#39;:            check_all_con(con)        elif sel == &#39;2&#39;:            while True:                print(&#39;-&#39; * 30)                print(&#39;1.按姓名搜索&#39;)                print(&#39;2.按电话搜索&#39;)                print(&#39;3.退出搜索&#39;)                print(&#39;-&#39; * 30)                choose = input(&#39;请选择搜索方式：&#39;)                if choose == &#39;1&#39;:                    fuzzy1(con)                elif choose == &#39;2&#39;:                    fuzzy2(con)                else:                    break        elif sel == &#39;3&#39;:            break        else:            print(&#39;输入错误，请重新选择&#39;)            continuedef clo(con):    print(&#39;欢迎再次使用！&#39;)    con.close()def main():    while True:        print(&#39;1.添加联系人&#39;)        print(&#39;2.查看联系人&#39;)        print(&#39;3.退出系统&#39;)        print(&#39;-&#39; * 30)        con = pymysql.connect(            host=&#39;localhost&#39;, port=3306, user=&#39;root&#39;, db=&#39;contact&#39;, charset=&#39;utf8&#39;, password=&#39;123456&#39;,            autocommit=True, cursorclass=pymysql.cursors.DictCursor)        num = input(&#39;请选择：&#39;)        if num == &#39;1&#39;:            add_con(con)        elif num == &#39;2&#39;:            check_con(con)        elif num == &#39;3&#39;:            clo(con)            break        else:            print(&#39;输入错误，请重新选择&#39;)            continueif __name__ == &#39;__main__&#39;:    main()</code></pre>]]></content>
      
      
      <categories>
          
          <category> databases </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linkman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>practice</title>
      <link href="/2018/10/16/%E6%95%B0%E6%8D%AE%E5%BA%93/practice/"/>
      <url>/2018/10/16/%E6%95%B0%E6%8D%AE%E5%BA%93/practice/</url>
      
        <content type="html"><![CDATA[<h3 id="practice1"><a href="#practice1" class="headerlink" title="practice1"></a>practice1</h3><h5 id="创建列表过程"><a href="#创建列表过程" class="headerlink" title="创建列表过程"></a>创建列表过程</h5><ul><li><p>创建SRS数据库</p><pre><code class="mysql">drop database if exists SRS;create database SRS default charset utf8 collate utf8_bin;</code></pre></li><li><p>切换到SRS数据库</p><pre><code class="mysql">use SRS;</code></pre></li><li><p>创建学院表</p><pre><code class="mysql">create table tb_college(collid int not null auto_increment comment &#39;学院编号&#39;,collname varchar(50) not null comment &#39;学院名称&#39;,collmaster varchar(20) not null comment &#39;院长姓名&#39;,collweb varchar(511) default &#39;&#39; comment &#39;学院网站&#39;,primary key (collid));</code></pre></li><li><p>添加唯一约束</p><pre><code class="mysql">alter table tb_college add constraint uni_college_collname unique (collname);</code></pre></li><li><p>创建学生表</p><pre><code class="mysql">create table tb_student(stuid int not null comment &#39;学号&#39;,sname varchar(20) not null comment &#39;学生姓名&#39;,gender bit default 1 comment &#39;性别&#39;,birth date not null comment &#39;出生日期&#39;,addr varchar(255) default &#39;&#39; comment &#39;籍贯&#39;,collid int not null comment &#39;所属学院编号&#39;,primary key (stuid));</code></pre></li><li><p>添加外键约束</p><pre><code class="mysql">- alter table tb_student add constraint fk_student_collid foreign key (collid) references tb_college (collid);</code></pre></li><li><p>创建教师表</p><pre><code class="mysql">create table tb_teacher(teaid int not null comment &#39;教师工号&#39;,tname varchar(20) not null comment &#39;教师姓名&#39;,title varchar(10) default &#39;&#39; comment &#39;职称&#39;,collid int not null comment &#39;所属学院编号&#39;);</code></pre></li><li><p>添加主键约束</p><pre><code class="mysql">alter table tb_teacher add constraint pk_teacher primary key (teaid);</code></pre></li><li><p>添加外键约束</p><pre><code class="mysql">alter table tb_teacher add constraint fk_teacher_collid foreign key (collid) references tb_college (collid);</code></pre></li><li><p>创建课程表</p><pre><code class="mysql">create table tb_course(couid int not null comment &#39;课程编号&#39;,cname varchar(50) not null comment &#39;课程名称&#39;,credit tinyint not null comment &#39;学分&#39;,teaid int not null comment &#39;教师工号&#39;,primary key (couid));</code></pre></li><li><p>添加外键约束</p><pre><code class="mysql">alter table tb_course add constraint fk_course_tid foreign key (teaid) references tb_teacher (teaid);</code></pre></li><li><p>创建学生选课表</p><pre><code class="mysql">create table tb_score(scid int not null auto_increment comment &#39;选课编号&#39;,sid int not null comment &#39;学号&#39;,cid int not null comment &#39;课程编号&#39;,seldate date comment &#39;选课时间日期&#39;,mark decimal(4,1) comment &#39;考试成绩&#39;,primary key (scid));</code></pre></li><li><p>添加外键约束</p><pre><code class="mysql">alter table tb_score add constraint fk_score_sid foreign key (sid) references tb_student (stuid);alter table tb_score add constraint fk_score_cid foreign key (cid) references tb_course (couid);-- 添加唯一约束alter table tb_score add constraint uni_score_sid_cid unique (sid, cid);</code></pre></li><li><p>插入学院数据</p><pre><code class="mysql">insert into tb_college (collname, collmaster, collweb) values (&#39;计算机学院&#39;, &#39;左冷禅&#39;, &#39;http://www.abc.com&#39;),(&#39;外国语学院&#39;, &#39;岳不群&#39;, &#39;http://www.xyz.com&#39;),(&#39;经济管理学院&#39;, &#39;风清扬&#39;, &#39;http://www.foo.com&#39;);</code></pre></li><li><p>插入学生数据</p><pre><code class="mysql">insert into tb_student (stuid, sname, gender, birth, addr, collid) values(1001, &#39;杨逍&#39;, 1, &#39;1990-3-4&#39;, &#39;四川成都&#39;, 1),(1002, &#39;任我行&#39;, 1, &#39;1992-2-2&#39;, &#39;湖南长沙&#39;, 1),(1033, &#39;王语嫣&#39;, 0, &#39;1989-12-3&#39;, &#39;四川成都&#39;, 1),(1572, &#39;岳不群&#39;, 1, &#39;1993-7-19&#39;, &#39;陕西咸阳&#39;, 1),(1378, &#39;纪嫣然&#39;, 0, &#39;1995-8-12&#39;, &#39;四川绵阳&#39;, 1),(1954, &#39;林平之&#39;, 1, &#39;1994-9-20&#39;, &#39;福建莆田&#39;, 1),(2035, &#39;东方不败&#39;, 1, &#39;1988-6-30&#39;, null, 2),(3011, &#39;林震南&#39;, 1, &#39;1985-12-12&#39;, &#39;福建莆田&#39;, 3),(3755, &#39;项少龙&#39;, 1, &#39;1993-1-25&#39;, null, 3),(3923, &#39;杨不悔&#39;, 0, &#39;1985-4-17&#39;, &#39;四川成都&#39;, 3);</code></pre></li><li><p>插入老师数据</p><pre><code class="mysql">insert into tb_teacher (teaid, tname, title, collid) values (1122, &#39;张三丰&#39;, &#39;教授&#39;, 1),(1133, &#39;宋远桥&#39;, &#39;副教授&#39;, 1),(1144, &#39;杨逍&#39;, &#39;副教授&#39;, 1),(2255, &#39;范遥&#39;, &#39;副教授&#39;, 2),(3366, &#39;韦一笑&#39;, &#39;讲师&#39;, 3);</code></pre></li><li><p>插入课程数据</p><pre><code class="mysql">insert into tb_course (couid, cname, credit, teaid) values (1111, &#39;Python程序设计&#39;, 3, 1122),(2222, &#39;Web前端开发&#39;, 2, 1122),(3333, &#39;操作系统&#39;, 4, 1122),(4444, &#39;计算机网络&#39;, 2, 1133),(5555, &#39;编译原理&#39;, 4, 1144),(6666, &#39;算法和数据结构&#39;, 3, 1144),(7777, &#39;经贸法语&#39;, 3, 2255),(8888, &#39;成本会计&#39;, 2, 3366),(9999, &#39;审计学&#39;, 3, 3366);</code></pre></li><li><p>插入选课数据</p><pre><code class="mysql">insert into tb_score (sid, cid, seldate, mark) values (1001, 1111, &#39;2017-09-01&#39;, 95),(1001, 2222, &#39;2017-09-01&#39;, 87.5),(1001, 3333, &#39;2017-09-01&#39;, 100),(1001, 4444, &#39;2018-09-03&#39;, null),(1001, 6666, &#39;2017-09-02&#39;, 100),(1002, 1111, &#39;2017-09-03&#39;, 65),(1002, 5555, &#39;2017-09-01&#39;, 42),(1033, 1111, &#39;2017-09-03&#39;, 92.5),(1033, 4444, &#39;2017-09-01&#39;, 78),(1033, 5555, &#39;2017-09-01&#39;, 82.5),(1572, 1111, &#39;2017-09-02&#39;, 78),(1378, 1111, &#39;2017-09-05&#39;, 82),(1378, 7777, &#39;2017-09-02&#39;, 65.5),(2035, 7777, &#39;2018-09-03&#39;, 88),(2035, 9999, date(now()), null),(3755, 1111, date(now()), null),(3755, 8888, date(now()), null),(3755, 9999, &#39;2017-09-01&#39;, 92);</code></pre></li></ul><h5 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h5><ul><li><p>查询所有学生信</p><pre><code class="mysql">select * from tb_student;</code></pre></li><li><p>查询所有课程名称及学分(投影和别名)</p><pre><code class="mysql">select cname as 课程名称,credit as 学分 from tb_course;</code></pre></li><li><p>查询所有女学生的姓名和出生日期(筛选)</p><pre><code class="mysql">select sname as 姓名,birth as 出生日期 from tb_student where gender=0;</code></pre></li><li><p>查询所有80后学生的姓名、性别和出生日期(筛选)</p><pre><code class="mysql">判断方法一(只适用于mysql数据库)：select sname,if(gender, &#39;男&#39;, &#39;女&#39;),birth from tb_student where birth between&#39;1980-1-1&#39; and &#39;1989-12-31&#39;;方法二(适用于所有数据库)：select sname,case gender when 1 then &#39;男&#39; else &#39;女&#39; end,birth from tb_student where birth between&#39;1980-1-1&#39; and &#39;1989-12-31&#39;;</code></pre></li><li><p>查询姓”杨“的学生姓名和性别(模糊)</p><pre><code class="mysql">select sname,gender from tb_student where sname like &#39;杨%&#39;;</code></pre></li><li><p>查询姓”杨“名字两个字的学生姓名和性别(模糊)</p><pre><code class="mysql">select sname,gender from tb_student where sname like &#39;杨_&#39;;</code></pre></li><li><p>查询姓”杨“名字三个字的学生姓名和性别(模糊)</p><pre><code class="mysql">select sname,gender from tb_student where sname like &#39;杨__&#39;;</code></pre></li><li><p>查询名字中有”不“字或“嫣”字的学生的姓名(模糊)</p><pre><code class="mysql">select sname from tb_student where sname like &#39;%不%&#39; or sname like &#39;%嫣%&#39;;</code></pre></li><li><p>查询没有录入家庭住址的学生姓名(空值)</p><pre><code class="mysql">select sname from tb_student where addr is null or addr=&#39;&#39;;</code></pre></li><li><p>查询录入了家庭住址的学生姓名(空值)</p><pre><code class="mysql">select sname from tb_student where addr is not null and addr&lt;&gt;&#39;&#39;;</code></pre></li><li><p>查询学生选课的所有日期(diatinct —– 去重)</p><pre><code class="mysql">select distinct seldate from tb_score;</code></pre></li><li><p>查询学生的家庭住址</p><pre><code class="mysql">select distinct addr from tb_student where addr is not null and addr&lt;&gt;&#39;&#39;;</code></pre></li><li><p>查询学生的姓名和生日按年龄从大到小排列(排序)</p><pre><code class="mysql">查询生日：select sname,birth from tb_student order by birth asc;查询年龄：select sname,year(now()) - year(birth) as 年龄 from tb_student order by birth asc;</code></pre></li><li><p>查询所有男学生的姓名和生日按年龄从大到小排列(排序)( order by ——- 排序)</p><pre><code class="mysql">select sname,birth from tb_student where gender=1 order by birth asc;</code></pre></li><li><p>查询年龄最大的学生的出生日期(聚合函数)</p><pre><code class="mysql">select min(birth) from tb_student;</code></pre></li><li><p>查询年龄最小的学生的出生日期(聚合函数)</p><pre><code class="mysql">select max(birth) from tb_student;</code></pre></li><li><p>查询男女学生的人数(分组和聚合函数)( 分组——— group by)</p><pre><code class="mysql">按人数排降序：select if(gender, &#39;男&#39;, &#39;女&#39;) as 性别, count(gender) as 人数 from tb_student group by gender order by 人数 desc;</code></pre></li><li><p>查询课程编号为1111的课程的平均成绩(筛选和聚合函数)</p><pre><code class="mysql">select avg(mark) as 平均分 from tb_score where cid=1111;</code></pre></li><li><p>查询学号为1001的学生所有课程的总成绩(筛选和聚合函数)</p><pre><code class="mysql">select sum(mark) as 平均分 from tb_score where cid=1001;</code></pre></li><li><p>查询每个学生的学号和平均成绩(分组和聚合函数)</p><pre><code class="mysql">select sid,avg(mark) from tb_score where mark is not null group by sid;</code></pre></li><li><p>查询平均成绩大于等于90分的学生的学号和平均成绩(先分组，再筛选 ——— 分组后跟having)</p><pre><code class="mysql">select sid,avgmark from tb_score group by sid having avg(mark)&gt;=90;</code></pre></li><li><p>查询年龄最大的学生的姓名(子查询)</p><ul><li><p>子查询 — 在一个查询中又使用到了另外一个查询的结果</p></li><li><p>查询年龄最大的学生的姓名（子查询）</p><pre><code class="mysql">select sname from tb_student where birth= (select min(birth) from tb_student);</code></pre></li></ul></li><li><p>查询年龄最大的学生的姓名和年龄</p><pre><code class="mysql">select sname as 姓名, year(now()) - year(birth) as 年龄from tb_student where birth= (select min(birth) from tb_student); </code></pre></li><li><p>查询选了两门以上的课程的学生姓名(子查询/分组条件/集合运算)</p><pre><code class="mysql">select sname from tb_student where stuid in (select sid from tb_score group by sid having count(sid)&gt;2);</code></pre></li><li><p>查询选课学生的姓名和平均成绩(子查询和连接查询)</p><pre><code class="mysql">select sname, avgmark from tb_student t1,(select sid, avg(mark) as avgmark from tb_score group by sid) t2where stuid=sid;select sname,cname,mark from tb_studentinner join tb_score on stuid=sidinner join tb_course on couid=cidwhere mark is not null;-- 注意：在连接查询时结果没有给出连接条件就会形成笛卡尔积-- 笛卡儿积-- A(a, b, c)*B(d, e)={ad, ae,bd, be, cd, ce}-- 查询学生姓名、所选课程名称和成绩(连接查询)-- 连接查询(连接查询/连结查询)select sname,cname,markfrom tb_score, tb_student, tb_coursewhere stuid=sid and couid=cid and mark is not null;-- 查询每个学生的姓名和选课数量（左外连接和子查询）-- 左外连接(left outer join) ----- 把左表（写在连接前面的表）不满足连接条件的记录也查询出来对应记录补null值-- 右外连接(right outer join) ----- 把右表（写在连接后面的表）不满足连接条件的记录也查询出来对应记录补null值-- 全外连接(full outer join) ------ 把满足和不满足条件的记录全部查出来，mysql数据库不支持此操作select sname as 姓名, conter as 选课数量 from tb_student left join,(select sid, count(sid) as conter from tb_score group by sid)t2on stuid(+)=sid;</code></pre></li></ul><h3 id="表的连接关系"><a href="#表的连接关系" class="headerlink" title="表的连接关系"></a>表的连接关系</h3><p><img src="/2018/10/16/数据库/practice/表连接1.png" alt="表连接1"></p><h4 id="内连接的方式"><a href="#内连接的方式" class="headerlink" title="内连接的方式"></a>内连接的方式</h4><p><img src="/2018/10/16/数据库/practice/表连接2.png" alt="表连接2"></p><h4 id="自连接的方式"><a href="#自连接的方式" class="headerlink" title="自连接的方式"></a>自连接的方式</h4><p><img src="/2018/10/16/数据库/practice/表连接3.png" alt="表连接3"></p><h4 id="外连接的方式"><a href="#外连接的方式" class="headerlink" title="外连接的方式"></a>外连接的方式</h4><p><img src="/2018/10/16/数据库/practice/表连接4.png" alt="表连接4"></p><h2 id="practice2"><a href="#practice2" class="headerlink" title="practice2"></a>practice2</h2><ul><li><p>创建人力资源管理系统数据库</p><pre><code class="mysql">drop database if exists HRS;create database HRS default charset utf8 collate utf8_bin;</code></pre></li><li><p>切换数据库上下文环境<br><code>use HRS;</code></p></li><li><p>删除表</p><pre><code class="mysql">drop table if exists TbEmp;drop table if exists TbDept;</code></pre></li><li><p>创建部门表</p><pre><code class="mysql">create table TbDept(dno tinyint not null comment &#39;部门编号&#39;,dname varchar(10) not null comment &#39;部门名称&#39;,dloc varchar(20) not null comment &#39;部门所在地&#39;,primary key (dno));</code></pre></li><li><p>添加部门记录</p><pre><code class="mysql">insert into TbDept values (10, &#39;会计部&#39;, &#39;北京&#39;);insert into TbDept values (20, &#39;研发部&#39;, &#39;成都&#39;);insert into TbDept values (30, &#39;销售部&#39;, &#39;重庆&#39;);insert into TbDept values (40, &#39;运维部&#39;, &#39;深圳&#39;);</code></pre></li><li><p>创建员工表</p><pre><code class="mysql">create table TbEmp(eno int not null comment &#39;员工编号&#39;,ename varchar(20) not null comment &#39;员工姓名&#39;,job varchar(20) not null comment &#39;员工职位&#39;,mgr int comment &#39;主管编号&#39;,sal int not null comment &#39;月薪&#39;,comm int comment &#39;月补贴&#39;,dno tinyint comment &#39;所在部门编号&#39;,primary key (eno));</code></pre></li><li><p>添加外键约束</p><pre><code class="mysql">alter table TbEmp add constraint fk_dno foreign key (dno) references TbDept(dno) on delete set null on update cascade;-- 更新，删除后赋值为null，所以前面创建的时候就不能添加（is not null)-- on delete set null on update cascade;</code></pre></li><li><p>添加员工记录</p><pre><code class="mysql">insert into TbEmp values (7800, &#39;张三丰&#39;, &#39;总裁&#39;, null, 9000, 1200, 20),(2056, &#39;乔峰&#39;, &#39;分析师&#39;, 7800, 5000, 1500, 20),(3088, &#39;李莫愁&#39;, &#39;设计师&#39;, 2056, 3500, 800, 20),(3211, &#39;张无忌&#39;, &#39;程序员&#39;, 2056, 3200, null, 20),(3233, &#39;丘处机&#39;, &#39;程序员&#39;, 2056, 3400, null, 20),(3251, &#39;张翠山&#39;, &#39;程序员&#39;, 2056, 4000, null, 20),(5566, &#39;宋远桥&#39;, &#39;会计师&#39;, 7800, 4000, 1000, 10),(5234, &#39;郭靖&#39;, &#39;出纳&#39;, 5566, 2000, null, 10),(3344, &#39;黄蓉&#39;, &#39;销售主管&#39;, 7800, 3000, 800, 30),(1359, &#39;胡一刀&#39;, &#39;销售员&#39;, 3344, 1800, 200, 30),(4466, &#39;苗人凤&#39;, &#39;销售员&#39;, 3344, 2500, null, 30),(3244, &#39;欧阳锋&#39;, &#39;程序员&#39;, 3088, 3200, null, 20),(3577, &#39;杨过&#39;, &#39;会计&#39;, 5566, 2200, null, 10),(3588, &#39;朱九真&#39;, &#39;会计&#39;, 5566, 2500, null, 10);</code></pre><h4 id="习题-1"><a href="#习题-1" class="headerlink" title="习题"></a>习题</h4></li><li><p>查询薪资最高的员工姓名和工资</p><pre><code class="mysql">-- select ename, sal+comm from TbEmp order by sal desc limit 0, 1;        ------- 排序出现的问题：可能前几个人的工资一样select ename as 总裁, sal as 工资 from tbempwhere sal=(select max(sal) from tbemp);</code></pre></li><li><p>查询员工的姓名和年薪((月薪+补贴)*12)</p><pre><code class="mysql">-- select ename as 姓名, sal12 + if(comm12,comm12,0) as 年薪 from TbEmp; orselect ename as 姓名, (sal + ifnull(comm,0))12 as 年薪 from TbEmp;</code></pre></li><li><p>查询年薪大于5万的员工的姓名和年薪</p><pre><code class="mysql">select ename as 姓名, (sal + ifnull(comm,0))12 as 年薪-- from TbEmp where 年薪&gt;50000;from TbEmp where (sal + ifnull(comm,0))12&gt;50000;</code></pre></li><li><p>查询有员工的部门的编号和人数<br><code>select dno,count(dno) as 人数 from TbEmp group by dno;</code>.</p></li><li><p>查询所有部门的名称和人数</p></li></ul><pre><code class="mysql">select dno as 部门编号,dname as 部门名称,counter as 人数 from tbdept as t1,(select dno as d,count(dno) as counter from tbemp group by dno)t2where t1.dno=t2.d;</code></pre><pre><code class="mysql">select dname as 部门名称, ifnull(total, 0) as 人数 from tbdept t1 left join(select dno, count(dno) as total from tbemp group by dno)t2on t1.dno=t2.dno;</code></pre><ul><li><p>查询薪资最高的员工(Boss除外)的姓名和工资</p><pre><code class="mysql">-- select ename as 姓名, sal+if(comm, comm, 0) as 工资 from TbEmp-- order by (sal+if(comm, comm, 0)) desc limit 1, 1;select ename as 员工, sal as 工资 from tbempwhere sal=(select max(sal) from tbemp where mgr is not null);</code></pre></li><li><p>查询薪水超过平均薪水的员工的姓名和工资</p><pre><code class="mysql">select ename as 姓名, sal as 工资 from tbempwhere (sal+if(comm, comm, 0))&gt;(select avg(sal+if(comm, comm, 0)) from tbemp);</code></pre><pre><code class="mysql">select ename as 姓名, sal as 工资 from TbEmpwhere sal&gt;(select avg(sal) from tbemp);</code></pre></li><li><p>查询薪水超过其所在部门平均薪水的员工的姓名、部门编号和工资</p><pre><code class="mysql">select ename, t1.dno, avgsal from tbemp t1,(select dno, avg(sal) as avgsal from tbemp group by dno)t2where t1.dno=t2.dno and sal&gt;avgsal;-- 多个连表条件之间用and连接</code></pre></li><li><p>查询薪水超过其所在部门平均薪水的员工的姓名、部门名称和工资</p><pre><code class="mysql">select ename, dname, sal from tbemp t1,(select dno, avg(sal) as avgsal from tbemp group by dno)t2,tbdept t3where t1.dno=t2.dno and sal&gt;avgsal and t2.dno=t3.dno;</code></pre></li><li><p>查询部门中薪水最高的人姓名、工资和所在部门名称</p><pre><code class="mysql">select ename, dname, sal from tbemp t1,(select dno, max(sal) as maxsal from tbemp group by dno)t2,tbdept t3where t1.dno=t2.dno and t2.dno=t3.dno and sal=maxsal;</code></pre></li><li><p>查询主管的姓名</p><pre><code class="mysql">- -- select ename from tbemp where job like&#39;%主管%&#39;;select ename, job from tbempwhere eno in (select distinct mgr from tbemp where mgr is not null);-- 说明：去重操作和集合运算效率是非常低的,可以使用以下方法select ename as 主管, job as 职位 from tbemp t1 where exists (select &#39;x&#39; from tbemp t2 where t1.eno=t2.mgr) order by eno desc;</code></pre></li><li><p>通常建议用exists或者not exists操作来代替去重和集合运算</p><pre><code class="mysql">select ename, job from tbemp t1where exists (select &#39;x&#39; from tbemp t2 where t1.eno=t2.mgr);</code></pre></li><li><p>视图是查询的快照</p><pre><code class="mysql">-- 创建视图create view vw_dept_emp_count asselect dno, count(dno) from tbemp group by dno;-- 查看视图select * from vw_dept_emp_count;-- 通过视图可以将用户对表的访问权限进一步加以限制-- 也就是说普通用户看到的就是限制的视图内容create view emp_no_sal asselect ename, dname, sal from tbemp t1,(select dno, avg(sal) as avgsal from tbemp group by dno)t2,tbdept t3where t1.dno=t2.dno and sal&gt;avgsal and t2.dno=t3.dno;-- 查看视图,限制条件select ename, dname from emp_no_sal;</code></pre></li><li><p>用硬件做的事情，用软件也可以做；反之亦可</p></li><li><p>索引(相当于一本书的目录）</p><ul><li><p>为表创建索引可以加速查询(用空间换时间)</p></li><li><p>索引不能滥用：</p><ul><li><p>一、索引会让增删改变得更慢，应为增删改的操作可能会导致更新索引</p></li><li><p>二、索引会占用额外的存储空间</p></li><li>索引应该建在经常被用于查询的筛选条件的列上面，主键上有默认的索引(唯一索引)</li></ul></li></ul></li><li><p>创建索引</p><pre><code class="mysql">-- 说明：使用模糊查询 ----- 如果查询条件不以%开头，索引有效;反之,无效create index idx_emp_ename on tbemp(ename);-- 唯一索引create unique index uni_emp_ename on tbemp(ename);</code></pre></li><li><p>删除索引<br><code>alter table tbemp drop index uni_emp_ename;</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> databases </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL</title>
      <link href="/2018/10/16/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/"/>
      <url>/2018/10/16/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/</url>
      
        <content type="html"><![CDATA[<p>MySQL是一种<a href="https://baike.baidu.com/item/%E5%BC%80%E6%94%BE%E6%BA%90%E4%BB%A3%E7%A0%81" target="_blank" rel="noopener">开放源代码</a>的关系型<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86" target="_blank" rel="noopener">数据库管理</a>系统（RDBMS），MySQL<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F" target="_blank" rel="noopener">数据库系统</a>使用最常用的数据库管理语言–<a href="https://baike.baidu.com/item/%E7%BB%93%E6%9E%84%E5%8C%96%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80" target="_blank" rel="noopener">结构化查询语言</a>（SQL）进行数据库管理。</p><p>端口是IP地址区分不同服务的</p><ul><li>Docker —- 屏蔽硬件和软件的差异</li><li>虚拟机（Virtual Machine）指通过软件模拟的具有完整硬件系统功能的、运行在一个完全隔离环境中的完整计算机系统</li></ul><p>图形化的MySQL客户端工具</p><ul><li>Navicat for MySQL</li><li>Tod for MySQL</li><li>SQLyog</li></ul><h3 id="ER-—–-实体关系图"><a href="#ER-—–-实体关系图" class="headerlink" title="ER —– 实体关系图"></a>ER —– 实体关系图</h3><p><img src="/2018/10/16/数据库/MySQL/表与表的关系.png" alt="image"></p><h3 id="MySQL中表与表的关系"><a href="#MySQL中表与表的关系" class="headerlink" title="MySQL中表与表的关系"></a>MySQL中表与表的关系</h3><p>一对一：一个实体只对应一个实体</p><p>一对多：一个实体可以对应多个实体</p><p>多对多：多个实体对应多个实体</p><h5 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h5><p>外键/外键约束 ——- 外来的主键 —- 参照完整性</p><p>数据的完整性</p><ul><li>实体完整性==：==<ul><li>每条记录都是独一无二的，没有冗余</li><li>主键/唯一索引（唯一的约束）</li></ul></li></ul><p><code>alter table tb_college add constraint uni_college_collname unique(collname)</code></p><ul><li>参照完整性：<ul><li>B表参照了A表，A表没有的记录在B表中决不能出现</li><li>外键(外键约束)<pre><code>alter table tb_student add column coll_stuid int;alter table tb_student add constraint fk_teacher_coll_stuidforeign key (coll_stuid) references tb_college (num);</code></pre></li></ul></li><li>域完整性：录入的数据都是有效的<ul><li>数据类型/非空约束/默认值约束/检查约束(MySQL中不生效)</li></ul></li></ul><p>数据的一致性</p><h4 id="聚合函数：在所有的数据库中都支持的函数"><a href="#聚合函数：在所有的数据库中都支持的函数" class="headerlink" title="聚合函数：在所有的数据库中都支持的函数"></a>聚合函数：在所有的数据库中都支持的函数</h4><ul><li>max()/ main()/ sum()/ avg()/ count()</li></ul>]]></content>
      
      
      <categories>
          
          <category> databases </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚拟机 </tag>
            
            <tag> 集合函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python</title>
      <link href="/2018/10/15/README/"/>
      <url>/2018/10/15/README/</url>
      
        <content type="html"><![CDATA[<p>学习是一件庄严而又神圣的事情，贵在坚持</p><p>不断地积累,才能体会到其中的乐趣</p><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><h3 id="第1天"><a href="#第1天" class="headerlink" title="第1天"></a>第1天</h3><ol><li>前端页面 = 标签(内容) + CSS(显示) + JavaScript(行为)</li><li>JavaScript = ECMAScript + BOM(window) + DOM(document)</li><li>window <ul><li>alert() / prompt() / confirm() / close()</li><li>setInterval() / setTimeout() / clearInterval() / clearTimeout()</li></ul></li><li>document<ul><li>getElementById() / getElementsByTagName() / getElementsByClassName()</li><li>querySelector() / querySelectorAll()</li></ul></li><li>HTMLElement<ul><li>textContent / innerHTML</li></ul></li><li>其他知识<ul><li>Date: getFullYear() / getMonth() / getDate() / getDay()</li><li>Math: Math.random()</li><li>parseInt() / parseFloat()</li></ul></li></ol><h3 id="第2天"><a href="#第2天" class="headerlink" title="第2天"></a>第2天</h3><ol><li>JavaScript中的事件处理<ul><li>在标签上使用onXXX属性来进行事件绑定</li><li>通过代码获取标签绑定onXXX属性</li><li>通过代码获取标签然后使用addEventListener()绑定事件<br>使用removeEventListener()反绑定事件<br>这里有浏览器兼容性问题 对于低版本IE要使用<br>attachEvent() / detachEvent()</li></ul></li><li>事件回调函数和事件对象<ul><li>绑定事件监听器的函数都需要传入事件的回调函数</li><li>程序员知道事件发生的时候需要做什么样的处理但是不知道事件什么时候发生</li><li>所以传入一个函数在将来发生事件的时候由系统进行调用 这种函数就称为回调函数</li><li>回调函数的第一个参数代表事件对象（封装了和事件相关的所有信息）对于低版本IE</li><li>可以通过window.event来获取事件对象</li><li>事件对象的属性和方法：<ul><li>target / srcElement - 事件源（引发事件的标签）</li><li>preventDefault() / returnValue=false - 阻止事件的默认行为</li><li>处理事件有两种顺序：事件冒泡（默认，从内向外）/ 事件捕获（从外向内）</li><li>如果要阻止事件的传播行为（例如阻止事件冒泡）可以使用<br>stopPropagation() / cancelBubble=true</li></ul></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL</title>
      <link href="/2018/10/15/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL%E9%A2%84%E4%B9%A0/"/>
      <url>/2018/10/15/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL%E9%A2%84%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>MySQL的海豚标志的名字叫“sakila”，它是由MySQL AB的创始人从用户在“海豚命名”的竞赛中建议的大量的名字表中选出的。获胜的名字是由来自非洲斯威士兰的开源软件开发者Ambrose Twebaze提供。</p><h1 id="MySQL预习"><a href="#MySQL预习" class="headerlink" title="MySQL预习"></a>MySQL预习</h1><h3 id="MySQL目录结构"><a href="#MySQL目录结构" class="headerlink" title="MySQL目录结构"></a>MySQL目录结构</h3><ul><li>bin目录，存储可执行文件</li><li>data目录，存储数据文件</li><li>docs，文档</li><li>include目录，存储包含的头文件</li><li>lib目录，存储库文件</li><li>share，错误消息和字符集文件</li></ul><h3 id="MySQL的配置选项"><a href="#MySQL的配置选项" class="headerlink" title="MySQL的配置选项"></a>MySQL的配置选项</h3><ul><li><p><strong>修改编码方式</strong></p><p><strong>[mysql]</strong></p><p><strong>default-character-set=utf8</strong></p><p><strong>[mysqld]</strong></p><p><strong>character-set-server=utf8</strong></p></li></ul><h3 id="MySQL服务的启动和关闭"><a href="#MySQL服务的启动和关闭" class="headerlink" title="MySQL服务的启动和关闭"></a>MySQL服务的启动和关闭</h3><ul><li><p><strong>启动MySQL服务</strong></p><p><strong>net start mysql</strong></p></li><li><p><strong>关闭MySQL服务</strong></p><p><strong>net stop mysql</strong></p></li></ul><h3 id="MySQL的使用"><a href="#MySQL的使用" class="headerlink" title="MySQL的使用"></a>MySQL的使用</h3><ol><li><p><strong>MySQL登录</strong></p><ul><li><p>mysql  参数</p><p><img src="/2018/10/15/数据库/MySQL预习/MySQL1.jpg" alt="MySQL1"></p></li></ul></li><li><p><strong>MySQL退出</strong></p><ul><li><strong>mysql &gt; exit;</strong></li><li><strong>mysql &gt; quit;</strong></li><li><strong>mysql &gt; \q;</strong></li></ul></li></ol><h3 id="修改MySQL提示符"><a href="#修改MySQL提示符" class="headerlink" title="修改MySQL提示符"></a>修改MySQL提示符</h3><ul><li><p><strong>连接客户端时通过参数指定</strong></p><p><code>shell&gt;mysql -uroot -proot -prompt 提示符</code>    </p></li><li><p><strong>连接上客户端后，通过prompt的命令来实现</strong></p><ul><li><code>mysql&gt;prompt 提示符</code>    <ul><li><strong>\D ———– 完整的日期</strong></li><li><strong>\d ———– 当前数据库</strong></li><li><strong>\h ———– 服务器的名称</strong></li><li><strong>\u ———– 当前用户</strong></li></ul></li></ul></li></ul><h3 id="MySQL常用命令"><a href="#MySQL常用命令" class="headerlink" title="MySQL常用命令"></a>MySQL常用命令</h3><ul><li><p><strong>显示当前服务器版本</strong></p><p><strong>SELECT  VERSION();</strong></p></li><li><p><strong>显示当前日期时间</strong></p><p><strong>SELECT  NOW();</strong></p></li><li><p><strong>显示当前用户</strong></p><p><strong>SELECT  USER();</strong></p></li></ul><h3 id="MySQL语句的规范"><a href="#MySQL语句的规范" class="headerlink" title="MySQL语句的规范"></a>MySQL语句的规范</h3><ul><li><strong>关键字与函数名称全部大写</strong></li><li><strong>数据库名称、表名称、字段名称全部小写</strong></li><li><strong>SQL语句必须以分号结尾</strong></li></ul><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><ul><li><p><strong>CREATE {DATABASE | SCHEMA} [IF NOT EXISTS] DB_name</strong></p><p><strong>[DEFAULT] CHARACTER SET [=] charset_name</strong></p></li></ul><h3 id="查看当前服务器下的数据表列表"><a href="#查看当前服务器下的数据表列表" class="headerlink" title="查看当前服务器下的数据表列表"></a>查看当前服务器下的数据表列表</h3><ul><li><p><strong>SHOW {DATABASES | SCHEMAS}</strong></p><p><strong>[LIKE ‘pattern‘ | WHERE expr]</strong></p></li></ul><h3 id="修改数据库"><a href="#修改数据库" class="headerlink" title="修改数据库"></a>修改数据库</h3><ul><li><p><strong>ALTER {DATABASE | SCHEMA} [db_name]</strong></p><p><strong>[DEFAULT] CHARACTER SET [=] charset_name</strong></p></li></ul><h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><ul><li><strong>DROP {DATABASE | SCHEMA} [IF EXISTS] bd_name</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> databases </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>pymysql</title>
      <link href="/2018/08/22/%E6%95%B0%E6%8D%AE%E5%BA%93/pymysql/"/>
      <url>/2018/08/22/%E6%95%B0%E6%8D%AE%E5%BA%93/pymysql/</url>
      
        <content type="html"><![CDATA[<h3 id="learn"><a href="#learn" class="headerlink" title="learn"></a>learn</h3><p>insert/update/delete</p><pre><code class="python">import pymysqldef main():    no = int(input(&#39;部门编号：&#39;))    name = input(&#39;部门名称：&#39;)    loc = input(&#39;部门所在地：&#39;)    # 创建连接(主机、端口、用户、密码、数据库名)    con = pymysql.connect(host=&#39;localhost&#39;, port=3306,                          user=&#39;root&#39;, password=&#39;123456&#39;,                          database=&#39;hrs&#39;, charset=&#39;utf8&#39;, autocommit=True)    try:        # 通过连接对象的cursor方法获取游标        &#39;&#39;&#39;        # 添加操作        with con.cursor() as cursor:            # 通过游标对象的execute方法向数据库服务器发出SQL            # executemany方法可以一次性执行多个SQL操作，相当于是以批处理的方式执行SQL，效率高            result = cursor.execute(                &#39;insert into tbdept values (%s, %s, %s)&#39;,                (no, name, loc)            )            # 处理服务器返回的信息            if result == 1:                print(&#39;添加成功&#39;)                # con.commit()        # 更新操作        with con.cursor() as cursor:            result1 = cursor.execute(                &#39;update tbdept set dname=%s,dloc=%s where dno=%s&#39;,                (name, loc, no)            )            if result1 == 1:                print(&#39;更新成功&#39;)        &#39;&#39;&#39;        # 删除操作        with con.cursor() as cursor:            result1 = cursor.execute(                &#39;delete from tbdept where dno=%s&#39;,                (no,)            )            if result1 == 1:                print(&#39;删除成功&#39;)    except pymysql.MySQLError as e:        print(e)        # con.rollback()    finally:        # 关闭连接，释放资源        con.close()if __name__ == &#39;__main__&#39;:    main()</code></pre><p>select</p><pre><code class="python">import pymysqlclass Dept(object):    def __init__(self, no, name, loc):        self.no = no        self.name = name        self.loc = loc    def __str__(self):        return f&#39;{self.no}\t{self.name}\t{self.loc}&#39;def main():    con = pymysql.connect(host=&#39;localhost&#39;,                          port=3306,                          user=&#39;root&#39;,                          password=&#39;123456&#39;,                          database=&#39;hrs&#39;,                          charset=&#39;utf8&#39;,                          cursorclass=pymysql.cursors.DictCursor)    try:        with con.cursor() as cursor:            # cursor.execute(&#39;select * from tbdept&#39;)            # depts = cursor.fetchall()            # for dept in depts:            #     print(f&#39;{dept[0]} | {dept[1]} | {dept[2]}&#39;)            #     print(&#39;-&#39; * 18)            cursor.execute(&#39;select dno no, dname name, dloc loc from tbdept&#39;)            depts = cursor.fetchall()            for dept_dict in depts:                # print(dept[&#39;no&#39;], dept[&#39;name&#39;], dept[&#39;loc&#39;])                dept = Dept(**dept_dict)                print(dept)    except pymysql.MySQLError as e:        print(e)    finally:        con.close()if __name__ == &#39;__main__&#39;:    main()</code></pre>]]></content>
      
      
      <categories>
          
          <category> databases </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>redis_order</title>
      <link href="/2018/08/18/%E6%95%B0%E6%8D%AE%E5%BA%93/redis-order/"/>
      <url>/2018/08/18/%E6%95%B0%E6%8D%AE%E5%BA%93/redis-order/</url>
      
        <content type="html"><![CDATA[<h2 id="redis-命令"><a href="#redis-命令" class="headerlink" title="redis 命令"></a>redis 命令</h2><ul><li>Redis：REmote Dictionary Server</li><li>Server(Redis)远程字典服务器，为网站提供高速缓存服务</li></ul><h4 id="网站优化两大定律"><a href="#网站优化两大定律" class="headerlink" title="网站优化两大定律"></a>网站优化两大定律</h4><p>1.缓存 —– 用空间换时间（redis/Memcached）</p><p>2.削峰 —— 能推迟的事情都不要马上做(RabbitMQ/ RocketMQ)</p><h4 id="信息隐藏"><a href="#信息隐藏" class="headerlink" title="信息隐藏:"></a>信息隐藏:</h4><p>&emsp;&emsp;信息隐藏是指在设计和确定模块时，使得一个模块内包含的特定信息（过程或数据），对于不需要这些信息的其他模块来说，是不可访问的</p><h5 id="启动Redis服务器步骤-谨慎"><a href="#启动Redis服务器步骤-谨慎" class="headerlink" title="启动Redis服务器步骤(谨慎):"></a>启动Redis服务器步骤(谨慎):</h5><pre><code class="mysql">1.修改Redis配置文件redis.conf(安装文件目录下)    cp redis-4.0.11/redis.conf redis.conf    # redis-server --post -- requirepass   ----- 也可以修改配置    vim redis.conf    bind 内网地址    requirepass 密码    appendonly yes2.启动服务器    redis-server redis.conf(配置文件) &gt; redis.log &amp;3.启动客户端    redis-cli -h ip地址(私用ip地址)4.验证身份    auth 密码5.停止服务器   1.kill 进程号   2.把进程放到前台，Ctrl c   3.客户端&gt;shutdown6.测试连接输入ping 回应PONG表示连接成功</code></pre><h5 id="操作命令-——-http-redisdoc-com"><a href="#操作命令-——-http-redisdoc-com" class="headerlink" title="操作命令  ——- http://redisdoc.com/"></a>操作命令  ——- <a href="http://redisdoc.com/" target="_blank" rel="noopener">http://redisdoc.com/</a></h5><pre><code class="mysql">操作:    keys *  查看所有键    select 1切换到1号数据库    select 15切换到15号数据库    flushall 删掉所有数据库的所有数据    flushdb 删掉当前一个数据库的数据删掉    save 保存数据    bgsave 后台保存    set key value ex 存活时间 ：设置键值对并设置存活时间    ttl key:查看数据的存活时间（ttl time to live),如果看到-1说明这个数据永不超时，如果-2说明没这个数据    expire key 时间: 设置已有键的存活时间    ince key:增加值    decr key:减少值基准测试：    redis-benchmark -h ip -a 密码    测试redis性能    LBS：Location-Base Service字符串:    setnx:如果不存在才赋值    setex:在设置键值对的时候同时设置存活时间    mset:一次放很多键值对    mget:一次获取多个键值对哈希表(hash)    hset:设置hash类型    hget:获取值 hget key filed    hgetall:获取对应key的所有值（hgetall key）    hmget:一次性获取多个值    hmset:一次性赋值多个        hmset stu1 id 101 name baiyuan age 12 gender male    hdel:删除哈希数据        hdel stu1 age    hexists:判断对应键是否存在某字典        hexists stu1 mile    hlen:统计键有多少字段    hkey:取出对应键的所有字段    hvals:取出对应键的所有值    hscan:遍历键值对列表:(List)    lpush:向列表放原始(从左边开始放)        lpush list1 1 2 3 4 5    lpop:从左边开始取    rpop:从右边开始取    rpush:(从右边开始放)    lrange:指定范围取元素()        lrange list1 start end        lrange list1 0 -1    lset:修改列表指定下标的值        lset list 1 1000    blpop:如果列表没东西，且时间未超时就阻塞，有东西拿走，超时就结束（从左边取）        blpop list1 20    brpop：如果列表没东西，且时间未超时就阻塞，有东西拿走，超时就结束（从右边取）    brpoplpush:从右边取一个元素，并把这个元素放到另一个列表的左边（阻塞式）集合(Set):    sadd:向集合添加元素        sadd set1 10 20 10 20 30    smebers:查看集合中的元素            smerbers set1    sinter:交集        sinter 集合1 集合2    sunion:并集        sunion 集合1 集合2    sdiff:差集        sdiff 集合1 集合2    sismenber:判断元素在不在集合中        sismenber 集合 元素    spop:从集合中取出一个元素    srandmenber:从集合中随机返回一个元素（实际没有拿走）    srem:移除集合中的一个或者多个元素，如果不存在就忽略浮点数表示法的问题    有序集合（SortedSet）    zadd:添加有序集合        zadd 集合名 值 元素    zrange:查看元素        zrange zs1 0 -1        zrange zs1 0 -1 withscores 显示元素的时候把分数值也显示出来    zrangebyscore:指定搜索范围来搜索数据        zrangebyscore zs1 10 20    zrank:查看元素的排名        zrank zs1 apple    zreverange:从大到小排序查询        zreverange zs1type(值)：查看对应值的类型事务:mult开始事务exec:执行discard：放弃执行服务器:bgsave：后台保存dbsize: 查看数据库有多少键slaveof:把redis设置成那个的奴隶（主从复制，读写分离）shutdown：关闭服务器info:查看服务器相关信息redis-check-aof -fix appendonly.aof    修复aof的文件</code></pre><ul><li>type —– 查看键的类型</li><li>setnx —– 设置已存在键的值</li><li>sentex —- 设置键值对的同时设置时间</li></ul><h4 id="Hash-——-保存对象"><a href="#Hash-——-保存对象" class="headerlink" title="Hash ——- 保存对象"></a>Hash ——- 保存对象</h4><ul><li>hset —– 创建key</li><li>hget —– 取出key</li><li>hgetall —- 取出key的全部属性</li><li>hmset ——- 创建key并设置多个属性</li><li>hmget ——- 取出key的多个属性</li><li>hdel —– 删除key的一个或多个属性</li><li>hexists —– 查看key是否存在</li><li>hlen —– 统计key对应多少个字段</li><li>hkeys ——- 返回key中的所有的域</li><li>hscan ——- 遍历key及域（遍历字典的键和值）</li></ul><h4 id="List"><a href="#List" class="headerlink" title="List"></a>List</h4><p><strong><code>lset list1 0 name</code></strong></p><ul><li>lset —— 给列表1中的下标为0的元素赋值为name</li><li>lpop —— 取出列表的头元素（左边第一个）元素</li><li>rpop —— 取出列表的尾元素（右边第一个）元素</li><li>lpush —— 在表头插入一个或多个值</li><li>rpush —— 在表尾插入一个或多个值</li><li>lrange —— 取出指定的元素</li><li>lset —— 修改原有列表的特定元素值</li><li>blpop —— 阻塞式从左边取出元素（有元素，不阻塞，没有元素，等待输入元素，然后取出）</li><li>blpop —— 阻塞式从右边取出元素（有元素，不阻塞，没有元素，等待输入元素，然后取出）</li><li>rpoplpush A B —— 从A中取出，从B中左边存入</li></ul><h4 id="Set（集合）"><a href="#Set（集合）" class="headerlink" title="Set（集合）"></a>Set（集合）</h4><ul><li>sadd —– 添加一个或多个元素</li><li>srem —– 删除一个或多个指定的元素</li><li>scard —— 查看集合中有多少个元素</li><li>smembers —– 查看集合的元素</li><li>sinter —— 查看两个集合的交集</li><li>sunion —– 查看两个集合的并集</li><li>sdiff —— 查看两个集合的差集</li><li>sismember —— 查看一个集合中是否存在一个给定的元素</li><li>spop —– 取出一个随机元素（不同）</li><li>srandmember —— 取出一个随机元素（可能相同）</li></ul><h4 id="Sortedset（有序集合）"><a href="#Sortedset（有序集合）" class="headerlink" title="Sortedset（有序集合）"></a>Sortedset（有序集合）</h4><ul><li>zadd —– 添加元素</li><li>zrange —– 查看元素（排好序的）</li><li>zrangebyscore —- 指定范围查看</li><li>zrank —– 排名（从0开始排的）</li><li>zrem —– 删除</li><li>zrevrange —— 倒序排列</li></ul><h3 id="复制："><a href="#复制：" class="headerlink" title="复制："></a>复制：</h3><h5 id="主从复制（读写分离）修改内容："><a href="#主从复制（读写分离）修改内容：" class="headerlink" title="主从复制（读写分离）修改内容："></a>主从复制（读写分离）修改内容：</h5><ul><li>master不用修改配置</li><li>slave修改两条配置<ul><li>slaveof master的IP地址 master的端口</li><li>masterrauth master的口令</li></ul></li><li>info replication ——- 查看是否有奴隶</li><li>info ——- 查看服务器信息 </li><li>ps -ef | grep deris | grep -v grep | awk ‘{print $2}’ | xargs kill ——- 杀掉所有的奴隶</li><li>slaveof no one ——— 拒绝当奴隶</li></ul><h6 id="故障处理"><a href="#故障处理" class="headerlink" title="故障处理"></a>故障处理</h6><p>配置哨兵（sentinel.conf）</p><ul><li>修改sentinel.conf配置文件<ul><li>修改69行的监视窗口 跟上票数</li><li>98行master的死亡时间设置<ul><li>在规定的时间回来了，还是master，没回来就重选</li></ul></li><li>131行的意思：master在3分钟内回来，也只能当奴隶，没回来，就直接杀死</li></ul></li><li>redis-server sentinel.conf –sentinel ——– 启动哨兵文件</li></ul><h3 id="MySQL-MongoDB"><a href="#MySQL-MongoDB" class="headerlink" title="MySQL / MongoDB"></a>MySQL / MongoDB</h3><ul><li><p>热（点）数据 —- 经常被访问的数据</p></li><li><p>redis放的应该是体量不大的热点数据</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> databases </category>
          
      </categories>
      
      
        <tags>
            
            <tag> order </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库</title>
      <link href="/2018/08/15/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2018/08/15/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>​        数据库（Database）是按照数据结构来组织、存储和管理数据的仓库，</p><p>每个数据库都有一个或多个不同的API用于创建，访问，管理，搜索和复制所保存的数据。</p><p>—– 从删库，到跑路额！</p><ul><li>数据库 —– database - 数据的仓库（集散地）<ul><li>通过数据库可以实现数据的持久化</li><li>数据持久化：文件操作（读写文件）-文本文件 / Excel</li><li>使用数据库的原因：当我们做数据持久化操作时不仅仅是希望能够把数据长久的保存下来，更为重要的是我们很方便的管理数据，在需要数据的时候能够很方便的把需要的数据取出来</li></ul></li><li>1907s IBM - 关系型数据库<ul><li>理论基础：关系代数和集合论</li><li>具体表象：用二维表（行，列）来组织数据<ul><li>行：记录（1212 电脑城 男） - 实体的具体记录</li><li>列：字段（学号，姓名，性别） - 实体的属性</li></ul></li><li>关系型数据库自己的编程语言 - SQL（结构化查询语言）</li><li>DDL（数据定义语言）：create / drop / alter(修改）</li><li>DML（数据操作语言）: insert / delete /update / select</li><li>DCL（数据控制语言）: grant(授权）/ revoke(撤销）</li><li>关系型数据库产品：<ul><li>Oracle - Oracle 12c</li><li>MySQL -Oracle</li><li>SQLServer</li><li>PostgreSQl</li><li>DB2<h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4></li></ul></li></ul></li><li>SQL （Structred Query Language)</li><li>DDL（数据定义语言）：create / drop / alter(修改）</li><li>DML（数据操作语言）: insert / delete /update / select</li><li>DCL（数据控制语言）: grant(授权）/ revoke(撤销)</li><li>DDL(Data Default Language)</li></ul><h2 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h2><h3 id="创建数据库-1"><a href="#创建数据库-1" class="headerlink" title="创建数据库"></a>创建数据库</h3><p><code>create database school default charset utf8;</code></p><h4 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h4><p><code>drop database if exists school;</code></p><h4 id="切换到数据库school"><a href="#切换到数据库school" class="headerlink" title="切换到数据库school"></a>切换到数据库school</h4><p><code>use school;</code></p><h4 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h4><p><code>drop table if exists tb_student;</code></p><h4 id="创建二维表保存数据"><a href="#创建二维表保存数据" class="headerlink" title="创建二维表保存数据"></a>创建二维表保存数据</h4><ul><li>列名 数据类型 约束条件</li><li>非空约束 —- not null</li><li>默认值约束 —– default</li><li>主键 ——- 表中能够唯一标识一条记录的列</li><li>主键约束 —— primary key<pre><code class="mysql">create table tb_student(stuid int not null,stuname varchar(4) not null,gender bit default 1,brith date,addr varchar(50),primary key (stuid));</code></pre></li><li>修改表<pre><code class="mysql">alter table tb_student add column tel char(11) not null;alter table tb_student drop column brith;alter table tb_student add score int not null;</code></pre></li><li>插入数据<br>– DMl (Data Manipulation Language)<pre><code class="mysql">insert into tb_student values (1001, &#39;天明&#39;, 0, &#39;四川&#39;, &#39;17640141329&#39;, 90);insert into tb_student values (1002, &#39;王大锤&#39;, 1, &#39;四川&#39;, &#39;17640141329&#39;,80);insert into tb_student (stuid, tel, stuname, score, addr) values(1003, &#39;17640141329&#39;, &#39;盖聂&#39;, 100, &#39;四川成都&#39;);insert into tb_student (stuid, tel, stuname, score) values(1004, &#39;17640141329&#39;, &#39;张三&#39;, 60),(1005, &#39;17640141329&#39;, &#39;豆丁&#39;, 85),(1006, &#39;17640141329&#39;, &#39;小明&#39;, 55);</code></pre></li><li>删除数据<pre><code class="mysql">delete from tb_student where stuid=1006;delete from tb_student where stuname=&#39;天明&#39;;delete from tb_student where stuid in (1004, 1006, 2000);</code></pre></li><li>截断数据（删除全表）<br><code>truncate table tb_student;</code></li><li>更新数据<pre><code class="mysql">update tb_student set addr=&#39;四川绵阳&#39;, gender=0 where stuid in (1003, 1004);</code></pre></li><li>查询数据<pre><code class="mysql">select * from tb_student;-- 投影select stuname, gender from tb_student;-- 别名（alias --- as）select stuname as 姓名,gender 性别 from tb_student;select stuname as 姓名,if(gender, &#39;男&#39;, &#39;女&#39;) as 性别 from tb_student;select stuname as 姓名,case gender when 1 then &#39;男&#39; else &#39;女&#39; end as 性别 from tb_student;</code></pre></li><li>对列做运算<br>select concat(stuname, ‘: ‘, tel) as 信息 from tb_student;</li><li>筛选<br>select * from tb_student where stuid=1001;</li><li>不等号用&lt;&gt;表示<br><code>`</code>mysql<br>select <em> from tb_student where stuid&lt;&gt;1001;<br>select </em> from tb_student where stuid in (1001, 1003, 1005);<br>select stuid, stuname, gender from tb_student where stuid&gt;1002;<br>select stuid, stuname, gender from tb_student where stuid&lt;=1002;<br>select stuid, stuname, gender from tb_student where gender=0;<br>select <em> from tb_student where stuid between 1002 and 1004;<br>select </em> from tb_student where stuid&gt;1004 and gender=0;<br>select * from tb_student where stuid&gt;1004 or gender=0;</li><li>注意：判断一个字段是否为null不能用=和&lt;&gt;<br>select <em> from tb_student where addr is null;<br>select </em> from tb_student where addr is not null;<br><code>`</code></li><li>%是一个通配符表示零个或任意多个字符<pre><code class="mysql">select * from tb_student where stuname like &#39;张%&#39;;select * from tb_student where stuname like &#39;%三%&#39;;</code></pre></li><li>_也是一个通配符，它表示一个字符<pre><code class="mysql">select * from tb_student where stuname like &#39;张_&#39;;select * from tb_student where stuname like &#39;张__&#39;;</code></pre></li><li>排序——order by </li><li>默认升序（ascending）可以不写，降序descending必须写<pre><code class="mysql">select * from tb_student order by stuid desc;select * from tb_student order by tel asc;select * from tb_student order by gender asc, stuid desc;select * from tb_student where gender=0 order by stuid desc;</code></pre></li><li>分页（限制）<pre><code class="mysql">select * from tb_student limit 3;select * from tb_student limit 3 offset 3;</code></pre></li><li><p>跳过6条信息，查3条信息<br><code>select * from tb_student limit 3 offset 6;</code></p></li><li><p>跳过2条信息，查4条信息</p><pre><code class="mysql">select * from tb_student limit 2,4;select * from tb_student where gender=1 order by stuid desc limit 0, 3;</code></pre></li></ul><h2 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h2><ul><li><p>创建hellokitty用户并设置口令</p><pre><code class="mysql">create user &#39;hellokitty&#39;@&#39;%&#39;identified by &#39;123123&#39;;</code></pre></li><li><p>给hellokitty授权</p><pre><code class="mysql">grant select on srs.* to &#39;hellokitty&#39;@&#39;%&#39;;grant insert, delete, update on srs.* to &#39;hellokitty&#39;@&#39;%&#39;;grant create, drop, alter on srs.* to &#39;hellokitty&#39;@&#39;%&#39;;</code></pre></li><li><p>获得srs的所有权限，但不能授权给别人</p><pre><code class="mysql">grant all privileges on srs.* to &#39;hellokitty&#39;@&#39;%&#39;;grant all privileges on *.* to &#39;hellokitty&#39;@&#39;%&#39;;</code></pre></li><li><p>将hellokitty自己得到的权限再授权给别人</p><pre><code class="mysql">grant all privileges on srs.* to &#39;hellokitty&#39;@&#39;%&#39; with grant option;</code></pre></li><li><p>召回权限</p><pre><code class="mysql">revoke all privileges on srs.* from &#39;hellokitty&#39;@&#39;%&#39;;</code></pre></li></ul><h5 id="事务控制"><a href="#事务控制" class="headerlink" title="事务控制"></a>事务控制</h5><ul><li><p>创建hellokitty用户并设置口令</p><pre><code class="mysql">create user &#39;hellokitty&#39;@&#39;%&#39;identified by &#39;123123&#39;;</code></pre></li><li><p>给hellokitty授权</p><pre><code class="mysql">grant select on srs.* to &#39;hellokitty&#39;@&#39;%&#39;;grant insert, delete, update on srs.* to &#39;hellokitty&#39;@&#39;%&#39;;grant create, drop, alter on srs.* to &#39;hellokitty&#39;@&#39;%&#39;;</code></pre></li><li><p>获得srs的所有权限，但不能授权给别人</p><pre><code class="mysql">grant all privileges on srs.* to &#39;hellokitty&#39;@&#39;%&#39;;grant all privileges on *.* to &#39;hellokitty&#39;@&#39;%&#39;;</code></pre></li><li><p>将hellokitty自己得到的权限再授权给别人</p><pre><code class="mysql">grant all privileges on srs.* to &#39;hellokitty&#39;@&#39;%&#39; with grant option;</code></pre></li><li><p>召回权限</p><pre><code class="mysql">revoke all privileges on srs.* from &#39;hellokitty&#39;@&#39;%&#39;;</code></pre></li></ul><h6 id="事务控制-1"><a href="#事务控制-1" class="headerlink" title="事务控制"></a>事务控制</h6><ul><li><p>开启事务环境</p><pre><code class="mysql">begin-- start transactionupdate tb_score set mark=mark-2 where sid=1001 and mark is not null;update tb_score set mark=mark+2 where sid=1002 and mark is not null;</code></pre></li><li><p>事务提交<br><code>commit；</code></p></li><li>事务回滚<br><code>rollback；</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> databases </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> 表格 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
