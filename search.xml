<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>web-the firstone</title>
      <link href="/2018/10/22/web-the-firstone/"/>
      <url>/2018/10/22/web-the-firstone/</url>
      
        <content type="html"><![CDATA[<h3 id="Django-Python-Web应用开发框架"><a href="#Django-Python-Web应用开发框架" class="headerlink" title="Django:Python Web应用开发框架"></a>Django:Python Web应用开发框架</h3><p>&emsp;&emsp;Django 应该是最出名的Python框架，GAE甚至Erlang都有框架受它影响。Django是走大而全的方向，它最出名的是其全自动化的管理后台：只需要使用起ORM，做简单的对象定义，它就能自动生成数据库结构、以及全功能的管理后台。</p><h3 id="MVC："><a href="#MVC：" class="headerlink" title="MVC："></a>MVC：</h3><p>&emsp;&emsp;MVC（Model View Controller）是模型-视图-控制器，一种软件设计典范，用一种业务逻辑、数据、界面显示分离的方法组织代码，将业务逻辑狙击到一个部件里，在改进和个性化定制界面及用户交互的同时，不需要重新编写业务逻辑。MVC被独特的发展起来用于映射传统的输入、处理和输出功能在一个逻辑的图形化用户界面的结构中。通俗的来讲就是，强制性的使应用程序的输入，处理和输出分开。</p><p><img src="/2018/10/22/web-the-firstone/QQ截图20181022103251.png" alt="QQ截图20181022103251"></p><h3 id="MVT："><a href="#MVT：" class="headerlink" title="MVT："></a>MVT：</h3><p>&emsp;&emsp;严格来说，Django的模式应该是MVT模式，本质上和MVC没什么区别，也是各组件之间为了保持松耦合关系，只是定义上有些许不同。</p><p>Model： 负责业务与数据库(ORM)的对象</p><p>View： 负责业务逻辑并适当调用Model和Template</p><p>Template: 负责把页面渲染展示给用户</p><p>注意： Django中还有一个url分发器，也叫作路由。主要用于将url请求发送给不同的View处理，View在进行相关的业务逻辑处理。</p><h3 id="操作命令"><a href="#操作命令" class="headerlink" title="操作命令"></a>操作命令</h3><h5 id="VIRTUALENV创建虚拟环境"><a href="#VIRTUALENV创建虚拟环境" class="headerlink" title="VIRTUALENV创建虚拟环境"></a>VIRTUALENV创建虚拟环境</h5><p>1.在cmd中能通过python去启动，如果不可以，直接跳到第三部</p><p><img src="/2018/10/22/web-the-firstone/python.png" alt="python"></p><p>2.在cmd中能通过pip3启动安装软件，如果不可以直接跳到第三步</p><p><img src="/2018/10/22/web-the-firstone/pip3.png" alt="pip3"></p><p>3.配置python环境和pip环境</p><p><img src="/2018/10/22/web-the-firstone/python_pip_envir.png" alt="python_pip_envir"></p><p>4.确认pip安装成功，如果Scrip文件夹下没有pip可执行文件，则执行第五步</p><p>5.由于python3.6安装以后，在Scrip文件中没有pip的可执行软件，需要输入下一个命令进行安装</p><p><code>python -m ensurepip</code></p><p><img src="/2018/10/22/web-the-firstone/ensurepip.png" alt="ensurepip"></p><p>注：现在在python的安装文件夹Scripts下就有pip.exe以及easy_install.exe等可执行文件了，就可以使用pip安装</p><h5 id="window中安装使用"><a href="#window中安装使用" class="headerlink" title="window中安装使用"></a>window中安装使用</h5><p>1.安装virtualenv</p><p><code>pip install virtualenv</code></p><p><img src="/2018/10/22/web-the-firstone/pip_virtualenv.png" alt="pip_virtualenv"></p><p>2.创建虚拟环境</p><p>先查看一下安装虚拟环境有那些参数，是必须填写的</p><p><img src="/2018/10/22/web-the-firstone/virtualenv_help.png" alt="virtualenv_help"></p><p>参数： –no-site-package 和-p参数</p><p><code>virtualenv --no-site-package venv</code></p><p>以下是指定安装虚拟环境中的python版本和安装方式：</p><p><img src="/2018/10/22/web-the-firstone/virtualenv_env_p.png" alt="virtualenv_env_p"></p><p>3.进入/退出evn</p><pre><code>进入 cd env/Scripts/文件夹 在activate命令退出 deactivate</code></pre><p>ubuntu中安装使用</p><p>1.安装virtualenv</p><p><code>apt-get install python-virtualenv</code></p><p>2.创建包含python3版本的虚拟环境</p><p><code>virtualenv -p /usr/bin/python3 env</code></p><p>env代表创建的虚拟环境的名称</p><p>3.进入/退出env</p><pre><code>进入 source env/bin/activate    pip list    pip install django==1.11 ---------- 安装django退出 deactivate</code></pre><p>4.pip使用</p><p>查看虚拟环境下安装的所有包</p><p><code>pip list</code></p><p>查看虚拟环境中通过pip安装的包</p><p><code>pip freeze</code></p><h4 id="创建虚拟环境（2）"><a href="#创建虚拟环境（2）" class="headerlink" title="创建虚拟环境（2）"></a>创建虚拟环境（2）</h4><p>1.新建文件夹  ——–&gt;  env</p><p>2.在env中 新建文件 ——— djenv6</p><p>3.在djenv6中，保存pip所有需要的文件</p><p>4.通过<code>pip list</code>查看虚拟环境下安装的所有包</p><p>5.安装Django</p><p><code>pip install django==1.11</code></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>practice linkman</title>
      <link href="/2018/10/20/practice-linkman/"/>
      <url>/2018/10/20/practice-linkman/</url>
      
        <content type="html"><![CDATA[<h3 id="简单的联系人练习"><a href="#简单的联系人练习" class="headerlink" title="简单的联系人练习"></a>简单的联系人练习</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pymysql<span class="token keyword">def</span> <span class="token function">add_con</span><span class="token punctuation">(</span>con<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        telname <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'联系人姓名：'</span><span class="token punctuation">)</span>        relation <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'与联系人关系：'</span><span class="token punctuation">)</span>        tel <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'联系人电话：'</span><span class="token punctuation">)</span>        <span class="token keyword">with</span> con<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> cursor<span class="token punctuation">:</span>            result <span class="token operator">=</span> cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>                args<span class="token operator">=</span><span class="token punctuation">(</span>telname<span class="token punctuation">,</span> relation<span class="token punctuation">,</span> tel<span class="token punctuation">)</span><span class="token punctuation">,</span>                query<span class="token operator">=</span><span class="token string">"insert into tb_cont values (default, %s, %s, %s)"</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> result <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'添加成功!'</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">)</span>                option <span class="token operator">=</span> str<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'是否继续添加 yes / no  :'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> option <span class="token operator">==</span> <span class="token string">'yes'</span><span class="token punctuation">:</span>                    <span class="token keyword">continue</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">break</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'添加失败，请重新添加'</span><span class="token punctuation">)</span>                <span class="token keyword">continue</span><span class="token keyword">def</span> <span class="token function">function</span><span class="token punctuation">(</span>cursor<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'编号    \t姓名    \t   关系    \t电话    '</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'='</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token string">'telname'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token keyword">if</span> len<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token string">'telname'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span> <span class="token keyword">else</span> row<span class="token punctuation">[</span><span class="token string">'telname'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token string">'relation'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token string">'tel'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'='</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">check_all_con</span><span class="token punctuation">(</span>con<span class="token punctuation">)</span><span class="token punctuation">:</span>    figure <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'='</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>        <span class="token keyword">with</span> con<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> cursor<span class="token punctuation">:</span>            cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>                args<span class="token operator">=</span><span class="token punctuation">(</span>figure<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                query<span class="token operator">=</span><span class="token string">"select id, telname, relation, tel from tb_cont order by id limit %s, 5"</span><span class="token punctuation">)</span>            function<span class="token punctuation">(</span>cursor<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'1.删除联系人'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'2.查看下一页'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'3.查看上一页'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'4.修改联系人信息'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'5.返回上一级'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">)</span>        elect <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请选择：'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> elect <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">:</span>            del_con<span class="token punctuation">(</span>con<span class="token punctuation">)</span>        <span class="token keyword">elif</span> elect <span class="token operator">==</span> <span class="token string">'2'</span><span class="token punctuation">:</span>            figure <span class="token operator">+=</span> <span class="token number">5</span>            <span class="token keyword">continue</span>        <span class="token keyword">elif</span> elect <span class="token operator">==</span> <span class="token string">'3'</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> figure <span class="token operator">>=</span> <span class="token number">5</span><span class="token punctuation">:</span>                figure <span class="token operator">-=</span> <span class="token number">5</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'没有上一页，请重新选择'</span><span class="token punctuation">)</span>            <span class="token keyword">continue</span>        <span class="token keyword">elif</span> elect <span class="token operator">==</span> <span class="token string">'4'</span><span class="token punctuation">:</span>            updeat_con<span class="token punctuation">(</span>con<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">break</span><span class="token keyword">def</span> <span class="token function">fuzzy1</span><span class="token punctuation">(</span>con<span class="token punctuation">)</span><span class="token punctuation">:</span>    figure <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        content <span class="token operator">=</span> str<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入搜索内容：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">with</span> con<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> cursor<span class="token punctuation">:</span>            cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>                args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"%"</span> <span class="token operator">+</span> content <span class="token operator">+</span> <span class="token string">"%"</span><span class="token punctuation">,</span> figure<span class="token punctuation">)</span><span class="token punctuation">,</span>                query<span class="token operator">=</span><span class="token string">" select id, telname, relation, tel from tb_cont where telname like %s "</span>                      <span class="token string">" order by id limit %s, 5"</span><span class="token punctuation">)</span>            function<span class="token punctuation">(</span>cursor<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'1.删除联系人'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'2.查看下一页'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'3.查看上一页'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'4.退出搜索'</span><span class="token punctuation">)</span>        elect <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请选择：'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> elect <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">:</span>            cho <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入要删除联系人的编号：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">with</span> con<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> cursor<span class="token punctuation">:</span>                result <span class="token operator">=</span> cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>                    args<span class="token operator">=</span><span class="token punctuation">(</span>cho<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    query<span class="token operator">=</span><span class="token string">"delete from tb_cont where id=%s"</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> result <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'删除成功！'</span><span class="token punctuation">)</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">)</span>                    option <span class="token operator">=</span> str<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'是否继续删除 yes / no  :'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">if</span> option <span class="token operator">==</span> <span class="token string">'yes'</span><span class="token punctuation">:</span>                        del_con<span class="token punctuation">(</span>con<span class="token punctuation">)</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        <span class="token keyword">break</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'删除失败，请重新删除'</span><span class="token punctuation">)</span>                    <span class="token keyword">continue</span>        <span class="token keyword">elif</span> elect <span class="token operator">==</span> <span class="token string">'2'</span><span class="token punctuation">:</span>            figure <span class="token operator">+=</span> <span class="token number">5</span>            <span class="token keyword">continue</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">break</span><span class="token keyword">def</span> <span class="token function">fuzzy2</span><span class="token punctuation">(</span>con<span class="token punctuation">)</span><span class="token punctuation">:</span>    figure <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        content <span class="token operator">=</span> str<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入搜索电话：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">with</span> con<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> cursor<span class="token punctuation">:</span>            cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>                args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"%"</span> <span class="token operator">+</span> content <span class="token operator">+</span> <span class="token string">"%"</span><span class="token punctuation">,</span> figure<span class="token punctuation">)</span><span class="token punctuation">,</span>                query<span class="token operator">=</span><span class="token string">" select id, telname, relation, tel from tb_cont where tel like %s "</span>                      <span class="token string">" order by id limit %s, 5 "</span><span class="token punctuation">)</span>            function<span class="token punctuation">(</span>cursor<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'1.删除联系人'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'2.查看下一页'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'3.查看上一页'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'4.退出搜索'</span><span class="token punctuation">)</span>        elect <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请选择：'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> elect <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">:</span>            cho <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入要删除联系人的编号：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">with</span> con<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> cursor<span class="token punctuation">:</span>                result <span class="token operator">=</span> cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>                    args<span class="token operator">=</span><span class="token punctuation">(</span>cho<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    query<span class="token operator">=</span><span class="token string">"delete from tb_cont where id=%s"</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> result <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'删除成功！'</span><span class="token punctuation">)</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">)</span>                    option <span class="token operator">=</span> str<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'是否继续删除 yes / no  :'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">if</span> option <span class="token operator">==</span> <span class="token string">'yes'</span><span class="token punctuation">:</span>                        del_con<span class="token punctuation">(</span>con<span class="token punctuation">)</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        <span class="token keyword">break</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'删除失败，请重新删除'</span><span class="token punctuation">)</span>                    <span class="token keyword">continue</span>        <span class="token keyword">elif</span> elect <span class="token operator">==</span> <span class="token string">'2'</span><span class="token punctuation">:</span>            figure <span class="token operator">+=</span> <span class="token number">5</span>            <span class="token keyword">continue</span>        <span class="token keyword">elif</span> elect <span class="token operator">==</span> <span class="token string">'3'</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> figure <span class="token operator">>=</span> <span class="token number">5</span><span class="token punctuation">:</span>                figure <span class="token operator">-=</span> <span class="token number">5</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'没有上一页，请重新选择'</span><span class="token punctuation">)</span>            <span class="token keyword">continue</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">break</span><span class="token keyword">def</span> <span class="token function">updeat_con</span><span class="token punctuation">(</span>con<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        id <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入要修改的联系人编号：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        telname <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'联系人姓名：'</span><span class="token punctuation">)</span>        relation <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'与联系人关系：'</span><span class="token punctuation">)</span>        tel <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'联系人电话：'</span><span class="token punctuation">)</span>        <span class="token keyword">with</span> con<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> cursor<span class="token punctuation">:</span>            result <span class="token operator">=</span> cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>                args<span class="token operator">=</span><span class="token punctuation">(</span>telname<span class="token punctuation">,</span> relation<span class="token punctuation">,</span> tel<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">,</span>                query<span class="token operator">=</span><span class="token string">"update tb_cont set telname=%s, relation=%s, tel=%s where id=%s"</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> result <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'修改成功！'</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">)</span>                option <span class="token operator">=</span> str<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'是否继续修改 yes / no  :'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> option <span class="token operator">==</span> <span class="token string">'yes'</span><span class="token punctuation">:</span>                    <span class="token keyword">continue</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">break</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'修改失败，请重新修改'</span><span class="token punctuation">)</span>                <span class="token keyword">continue</span><span class="token keyword">def</span> <span class="token function">del_con</span><span class="token punctuation">(</span>con<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        cho <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入要删除联系人的编号：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">with</span> con<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> cursor<span class="token punctuation">:</span>            result <span class="token operator">=</span> cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>                args<span class="token operator">=</span><span class="token punctuation">(</span>cho<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                query<span class="token operator">=</span><span class="token string">"delete from tb_cont where id=%s"</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> result <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'删除成功！'</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">)</span>                option <span class="token operator">=</span> str<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'是否继续删除 yes / no  :'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> option <span class="token operator">==</span> <span class="token string">'yes'</span><span class="token punctuation">:</span>                    <span class="token keyword">continue</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">break</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'删除失败！'</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">)</span>                option <span class="token operator">=</span> str<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'是否继续删除 yes / no  :'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> option <span class="token operator">==</span> <span class="token string">'yes'</span><span class="token punctuation">:</span>                    <span class="token keyword">continue</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">break</span><span class="token keyword">def</span> <span class="token function">check_con</span><span class="token punctuation">(</span>con<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'1.查看全部联系人'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'2.搜索联系人'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'3.返回上一级'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">)</span>        sel <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请选择查看方式：'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> sel <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">:</span>            check_all_con<span class="token punctuation">(</span>con<span class="token punctuation">)</span>        <span class="token keyword">elif</span> sel <span class="token operator">==</span> <span class="token string">'2'</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'1.按姓名搜索'</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'2.按电话搜索'</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'3.退出搜索'</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">)</span>                choose <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请选择搜索方式：'</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> choose <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">:</span>                    fuzzy1<span class="token punctuation">(</span>con<span class="token punctuation">)</span>                <span class="token keyword">elif</span> choose <span class="token operator">==</span> <span class="token string">'2'</span><span class="token punctuation">:</span>                    fuzzy2<span class="token punctuation">(</span>con<span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">break</span>        <span class="token keyword">elif</span> sel <span class="token operator">==</span> <span class="token string">'3'</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'输入错误，请重新选择'</span><span class="token punctuation">)</span>            <span class="token keyword">continue</span><span class="token keyword">def</span> <span class="token function">clo</span><span class="token punctuation">(</span>con<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'欢迎再次使用！'</span><span class="token punctuation">)</span>    con<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'1.添加联系人'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'2.查看联系人'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'3.退出系统'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">)</span>        con <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>            host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span> db<span class="token operator">=</span><span class="token string">'contact'</span><span class="token punctuation">,</span> charset<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">'123456'</span><span class="token punctuation">,</span>            autocommit<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> cursorclass<span class="token operator">=</span>pymysql<span class="token punctuation">.</span>cursors<span class="token punctuation">.</span>DictCursor<span class="token punctuation">)</span>        num <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请选择：'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> num <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">:</span>            add_con<span class="token punctuation">(</span>con<span class="token punctuation">)</span>        <span class="token keyword">elif</span> num <span class="token operator">==</span> <span class="token string">'2'</span><span class="token punctuation">:</span>            check_con<span class="token punctuation">(</span>con<span class="token punctuation">)</span>        <span class="token keyword">elif</span> num <span class="token operator">==</span> <span class="token string">'3'</span><span class="token punctuation">:</span>            clo<span class="token punctuation">(</span>con<span class="token punctuation">)</span>            <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'输入错误，请重新选择'</span><span class="token punctuation">)</span>            <span class="token keyword">continue</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> linkman </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>redis_order</title>
      <link href="/2018/10/18/redis-order/"/>
      <url>/2018/10/18/redis-order/</url>
      
        <content type="html"><![CDATA[<h2 id="redis-命令"><a href="#redis-命令" class="headerlink" title="redis 命令"></a>redis 命令</h2><ul><li>Redis：REmote Dictionary Server</li><li>Server(Redis)远程字典服务器，为网站提供高速缓存服务</li></ul><h4 id="网站优化两大定律"><a href="#网站优化两大定律" class="headerlink" title="网站优化两大定律"></a>网站优化两大定律</h4><p>1.缓存 —– 用空间换时间（redis/Memcached）</p><p>2.削峰 —— 能推迟的事情都不要马上做(RabbitMQ/ RocketMQ)</p><h4 id="信息隐藏"><a href="#信息隐藏" class="headerlink" title="信息隐藏:"></a>信息隐藏:</h4><p>&emsp;&emsp;信息隐藏是指在设计和确定模块时，使得一个模块内包含的特定信息（过程或数据），对于不需要这些信息的其他模块来说，是不可访问的</p><h5 id="启动Redis服务器步骤-谨慎"><a href="#启动Redis服务器步骤-谨慎" class="headerlink" title="启动Redis服务器步骤(谨慎):"></a>启动Redis服务器步骤(谨慎):</h5><pre class=" language-mysql"><code class="language-mysql">1.修改Redis配置文件redis.conf(安装文件目录下)    cp redis-4.0.11/redis.conf redis.conf    # redis-server --post -- requirepass   ----- 也可以修改配置    vim redis.conf    bind 内网地址    requirepass 密码    appendonly yes2.启动服务器    redis-server redis.conf(配置文件) > redis.log &3.启动客户端    redis-cli -h ip地址(私用ip地址)4.验证身份    auth 密码5.停止服务器   1.kill 进程号   2.把进程放到前台，Ctrl c   3.客户端>shutdown6.测试连接输入ping 回应PONG表示连接成功</code></pre><h5 id="操作命令-——-http-redisdoc-com"><a href="#操作命令-——-http-redisdoc-com" class="headerlink" title="操作命令  ——- http://redisdoc.com/"></a>操作命令  ——- <a href="http://redisdoc.com/" target="_blank" rel="noopener">http://redisdoc.com/</a></h5><pre class=" language-mysql"><code class="language-mysql">操作:    keys *  查看所有键    select 1切换到1号数据库    select 15切换到15号数据库    flushall 删掉所有数据库的所有数据    flushdb 删掉当前一个数据库的数据删掉    save 保存数据    bgsave 后台保存    set key value ex 存活时间 ：设置键值对并设置存活时间    ttl key:查看数据的存活时间（ttl time to live),如果看到-1说明这个数据永不超时，如果-2说明没这个数据    expire key 时间: 设置已有键的存活时间    ince key:增加值    decr key:减少值基准测试：    redis-benchmark -h ip -a 密码    测试redis性能    LBS：Location-Base Service字符串:    setnx:如果不存在才赋值    setex:在设置键值对的时候同时设置存活时间    mset:一次放很多键值对    mget:一次获取多个键值对哈希表(hash)    hset:设置hash类型    hget:获取值 hget key filed    hgetall:获取对应key的所有值（hgetall key）    hmget:一次性获取多个值    hmset:一次性赋值多个        hmset stu1 id 101 name baiyuan age 12 gender male    hdel:删除哈希数据        hdel stu1 age    hexists:判断对应键是否存在某字典        hexists stu1 mile    hlen:统计键有多少字段    hkey:取出对应键的所有字段    hvals:取出对应键的所有值    hscan:遍历键值对列表:(List)    lpush:向列表放原始(从左边开始放)        lpush list1 1 2 3 4 5    lpop:从左边开始取    rpop:从右边开始取    rpush:(从右边开始放)    lrange:指定范围取元素()        lrange list1 start end        lrange list1 0 -1    lset:修改列表指定下标的值        lset list 1 1000    blpop:如果列表没东西，且时间未超时就阻塞，有东西拿走，超时就结束（从左边取）        blpop list1 20    brpop：如果列表没东西，且时间未超时就阻塞，有东西拿走，超时就结束（从右边取）    brpoplpush:从右边取一个元素，并把这个元素放到另一个列表的左边（阻塞式）集合(Set):    sadd:向集合添加元素        sadd set1 10 20 10 20 30    smebers:查看集合中的元素            smerbers set1    sinter:交集        sinter 集合1 集合2    sunion:并集        sunion 集合1 集合2    sdiff:差集        sdiff 集合1 集合2    sismenber:判断元素在不在集合中        sismenber 集合 元素    spop:从集合中取出一个元素    srandmenber:从集合中随机返回一个元素（实际没有拿走）    srem:移除集合中的一个或者多个元素，如果不存在就忽略浮点数表示法的问题    有序集合（SortedSet）    zadd:添加有序集合        zadd 集合名 值 元素    zrange:查看元素        zrange zs1 0 -1        zrange zs1 0 -1 withscores 显示元素的时候把分数值也显示出来    zrangebyscore:指定搜索范围来搜索数据        zrangebyscore zs1 10 20    zrank:查看元素的排名        zrank zs1 apple    zreverange:从大到小排序查询        zreverange zs1type(值)：查看对应值的类型事务:mult开始事务exec:执行discard：放弃执行服务器:bgsave：后台保存dbsize: 查看数据库有多少键slaveof:把redis设置成那个的奴隶（主从复制，读写分离）shutdown：关闭服务器info:查看服务器相关信息redis-check-aof -fix appendonly.aof    修复aof的文件</code></pre><ul><li>type —– 查看键的类型</li><li>setnx —– 设置已存在键的值</li><li>sentex —- 设置键值对的同时设置时间</li></ul><h4 id="Hash-——-保存对象"><a href="#Hash-——-保存对象" class="headerlink" title="Hash ——- 保存对象"></a>Hash ——- 保存对象</h4><ul><li>hset —– 创建key</li><li>hget —– 取出key</li><li>hgetall —- 取出key的全部属性</li><li>hmset ——- 创建key并设置多个属性</li><li>hmget ——- 取出key的多个属性</li><li>hdel —– 删除key的一个或多个属性</li><li>hexists —– 查看key是否存在</li><li>hlen —– 统计key对应多少个字段</li><li>hkeys ——- 返回key中的所有的域</li><li>hscan ——- 遍历key及域（遍历字典的键和值）</li></ul><h4 id="List"><a href="#List" class="headerlink" title="List"></a>List</h4><p><strong><code>lset list1 0 name</code></strong></p><ul><li>lset —— 给列表1中的下标为0的元素赋值为name</li><li>lpop —— 取出列表的头元素（左边第一个）元素</li><li>rpop —— 取出列表的尾元素（右边第一个）元素</li><li>lpush —— 在表头插入一个或多个值</li><li>rpush —— 在表尾插入一个或多个值</li><li>lrange —— 取出指定的元素</li><li>lset —— 修改原有列表的特定元素值</li><li>blpop —— 阻塞式从左边取出元素（有元素，不阻塞，没有元素，等待输入元素，然后取出）</li><li>blpop —— 阻塞式从右边取出元素（有元素，不阻塞，没有元素，等待输入元素，然后取出）</li><li>rpoplpush A B —— 从A中取出，从B中左边存入</li></ul><h4 id="Set（集合）"><a href="#Set（集合）" class="headerlink" title="Set（集合）"></a>Set（集合）</h4><ul><li>sadd —– 添加一个或多个元素</li><li>srem —– 删除一个或多个指定的元素</li><li>scard —— 查看集合中有多少个元素</li><li>smembers —– 查看集合的元素</li><li>sinter —— 查看两个集合的交集</li><li>sunion —– 查看两个集合的并集</li><li>sdiff —— 查看两个集合的差集</li><li>sismember —— 查看一个集合中是否存在一个给定的元素</li><li>spop —– 取出一个随机元素（不同）</li><li>srandmember —— 取出一个随机元素（可能相同）</li></ul><h4 id="Sortedset（有序集合）"><a href="#Sortedset（有序集合）" class="headerlink" title="Sortedset（有序集合）"></a>Sortedset（有序集合）</h4><ul><li>zadd —– 添加元素</li><li>zrange —– 查看元素（排好序的）</li><li>zrangebyscore —- 指定范围查看</li><li>zrank —– 排名（从0开始排的）</li><li>zrem —– 删除</li><li>zrevrange —— 倒序排列</li></ul><h3 id="复制："><a href="#复制：" class="headerlink" title="复制："></a>复制：</h3><h5 id="主从复制（读写分离）修改内容："><a href="#主从复制（读写分离）修改内容：" class="headerlink" title="主从复制（读写分离）修改内容："></a>主从复制（读写分离）修改内容：</h5><ul><li>master不用修改配置</li><li>slave修改两条配置<ul><li>slaveof master的IP地址 master的端口</li><li>masterrauth master的口令</li></ul></li><li>info replication ——- 查看是否有奴隶</li><li>info ——- 查看服务器信息 </li><li>ps -ef | grep deris | grep -v grep | awk ‘{print $2}’ | xargs kill ——- 杀掉所有的奴隶</li><li>slaveof no one ——— 拒绝当奴隶</li></ul><h6 id="故障处理"><a href="#故障处理" class="headerlink" title="故障处理"></a>故障处理</h6><p>配置哨兵（sentinel.conf）</p><ul><li>修改sentinel.conf配置文件<ul><li>修改69行的监视窗口 跟上票数</li><li>98行master的死亡时间设置<ul><li>在规定的时间回来了，还是master，没回来就重选</li></ul></li><li>131行的意思：master在3分钟内回来，也只能当奴隶，没回来，就直接杀死</li></ul></li><li>redis-server sentinel.conf –sentinel ——– 启动哨兵文件</li></ul><h3 id="MySQL-MongoDB"><a href="#MySQL-MongoDB" class="headerlink" title="MySQL / MongoDB"></a>MySQL / MongoDB</h3><ul><li><p>热（点）数据 —- 经常被访问的数据</p></li><li><p>redis放的应该是体量不大的热点数据</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> order </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python_database</title>
      <link href="/2018/10/17/python-database/"/>
      <url>/2018/10/17/python-database/</url>
      
        <content type="html"><![CDATA[<h2 id="数据库的微操做"><a href="#数据库的微操做" class="headerlink" title="数据库的微操做"></a>数据库的微操做</h2><p>进行数据的增加，修改，删除，查看</p><p>在信息化社会，充分有效地管理和利用各类信息资源，是进行科学研究和决策管理的前提条件。</p><p>—– 从删库，到跑路额！</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pymysql<span class="token keyword">class</span> <span class="token class-name">Dept</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> no<span class="token punctuation">,</span> name<span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>no <span class="token operator">=</span> no        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>location <span class="token operator">=</span> location<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    no = int(input('部门编号：'))    name = input('部门名称：')    location = input('部门地址：')    '''</span>    <span class="token comment" spellcheck="true"># 1.创建数据库连接</span>    conn <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>                           db<span class="token operator">=</span><span class="token string">'hrs'</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span>                           charset<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">'123456'</span><span class="token punctuation">,</span>                           autocommit<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                           cursorclass<span class="token operator">=</span>pymysql<span class="token punctuation">.</span>cursors<span class="token punctuation">.</span>DictCursor<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 2.获得游标对象</span>        <span class="token keyword">with</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> cursor<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 3.向数据库服务器发出SQL</span>            <span class="token comment" spellcheck="true"># cursor 游标，上下文语法</span>            <span class="token triple-quoted-string string">'''            # 删除            result = cursor.execute(                'delete from TbDept where dno=40')            if result == 1:                print('删除成功!')           '''</span>            <span class="token triple-quoted-string string">'''            # 添加            result = cursor.execute(                args=(no, name, location),                query="insert into TbDept values (%s, %s, %s)")            if result == 1:                print('添加成功!')            '''</span>            <span class="token triple-quoted-string string">'''            如果没有添加autocommit这个属性，就可以添加下面这一段代码来提交数据            try:                result                conn.commit()            except:                conn.rollback()            '''</span>            <span class="token triple-quoted-string string">'''            # 修改            result = cursor.execute(                args=(name, location, no),                query="update TbDept set dname=%s, dloc=%s where dno=%s")            if result == 1:                print('修改成功！')            '''</span>            <span class="token triple-quoted-string string">'''            # 命名占位符            result = cursor.execute(                args={'no':no, 'name':name, 'loc':location},                query="update TbDept set dname=%(name)s, dloc=%(loc)s where dno=%(no)s")            if result == 1:                print('修改成功！')            '''</span>            <span class="token triple-quoted-string string">'''            # 查看信息1            cursor.execute(                "select dno, dname, dloc from TbDept")            for row in cursor.fetchall():                print(f'部门编号：{row[0]}')                print(f'部门名称：{row[1]}')                print(f'部门地址：{row[2]}')                print('-' * 20)            '''</span>            <span class="token triple-quoted-string string">'''            # 查看信息2            cursor.execute("select dno as no, dname as name, dloc as loc from TbDept")            print('-' * 20)            for row in cursor.fetchall():                print(row['no'], end='\t')                print(row['name'], end='\t')                print(row['loc'])            '''</span>            <span class="token comment" spellcheck="true"># 查看信息3</span>            cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">" select dno as no, dname as name, dloc as location "</span>                           <span class="token string">" from TbDept"</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> row <span class="token keyword">in</span> cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span>                dept <span class="token operator">=</span> Dept<span class="token punctuation">(</span><span class="token operator">**</span>row<span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>dept<span class="token punctuation">.</span>no<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>dept<span class="token punctuation">.</span>name<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>dept<span class="token punctuation">.</span>location<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span>    <span class="token keyword">finally</span><span class="token punctuation">:</span>        conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>基础语法</title>
      <link href="/2018/10/16/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
      <url>/2018/10/16/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>###（一）基础<br>1.快捷键：<br> control+/      注释/取消注释<br> control+s      保存（养成习惯）<br> control+c      复制、拷贝<br> control+v      粘贴<br> control+x      剪切<br> control+b      编译（编译执行——sublime）<br> control+r      编译执行（暂时不用）<br> control+a      全选<br> control+z      撤销<br> control+y（control+shift+z）      反撤销<br> control+f      查找<br> control+n      新建（文件）<br> control+shift+n       新建（工程）<br> 按住shift点鼠标，可以选中部分内容</p><p> 2.注意</p><ul><li>###写代码的时候，一定是在英文输入的状态下<pre class=" language-python"><code class="language-python"><span class="token keyword">print</span>就是python中的打印函数，功能是在控制台将括号中的内容输出<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello world !'</span><span class="token punctuation">)</span></code></pre><h3 id="二-基础语法"><a href="#二-基础语法" class="headerlink" title="(二)基础语法"></a>(二)基础语法</h3>####1.注释<br>注释是不会参与代码的编译和执行的，只是对代码进行解释和说明的文字。（写注释养成习惯）<br>单行注释就是在注释文字前加#<br>多行注释如下<pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">'''这是多行注释这是多行注释这是多行注释'''</span><span class="token triple-quoted-string string">"""这是多行注释这是多行注释这是多行注释"""</span></code></pre>或者再多行前加#<h4 id="2-标识符"><a href="#2-标识符" class="headerlink" title="2.标识符"></a>2.标识符</h4>a.是由字母数字下划线组成（只能少不能多）<br>b.数字不能开头<br>c.大小写敏感（大小写的表示不一样，例如：abc、ABC不一样）<ul><li>python3以后，标识中可以包含非ASCII码（可以包含中文）,但是在实际开发中不建议使用</li></ul></li><li>版本A.B.C    A-大版本，重大修改    B-增加功能     C-修复BUG<pre class=" language-python"><code class="language-python">nb <span class="token operator">=</span> <span class="token number">90</span>a1 <span class="token operator">=</span> <span class="token number">10</span>a1_ <span class="token operator">=</span> <span class="token number">10</span>姓名 <span class="token operator">=</span> <span class="token number">900</span>_hs <span class="token operator">=</span> <span class="token number">100</span></code></pre></li></ul><pre class=" language-python"><code class="language-python">错误表示： a'sh <span class="token operator">=</span> <span class="token number">100</span> h<span class="token operator">%</span><span class="token number">10</span> <span class="token operator">=</span> <span class="token number">100</span> <span class="token number">9</span> <span class="token operator">=</span> <span class="token number">100</span> <span class="token number">1abc</span> <span class="token operator">=</span> <span class="token number">100</span></code></pre><h4 id="3-关键字（保留字）"><a href="#3-关键字（保留字）" class="headerlink" title="3.关键字（保留字）"></a>3.关键字（保留字）</h4><p> python中保留用来作为特殊语法和拥有特殊功能的一些单词</p><pre class=" language-python"><code class="language-python"><span class="token string">'False'</span><span class="token punctuation">,</span> <span class="token string">'None'</span><span class="token punctuation">,</span> <span class="token string">'True'</span><span class="token punctuation">,</span> <span class="token string">'and'</span><span class="token punctuation">,</span> <span class="token string">'as'</span><span class="token punctuation">,</span> <span class="token string">'assert'</span><span class="token punctuation">,</span> <span class="token string">'break'</span><span class="token punctuation">,</span> <span class="token string">'class'</span><span class="token punctuation">,</span> <span class="token string">'continue'</span><span class="token punctuation">,</span> <span class="token string">'def'</span><span class="token punctuation">,</span> <span class="token string">'del'</span><span class="token punctuation">,</span> <span class="token string">'elif'</span><span class="token punctuation">,</span> <span class="token string">'else'</span><span class="token punctuation">,</span> <span class="token string">'except'</span><span class="token punctuation">,</span> <span class="token string">'finally'</span><span class="token punctuation">,</span> <span class="token string">'for'</span><span class="token punctuation">,</span> <span class="token string">'from'</span><span class="token punctuation">,</span> <span class="token string">'global'</span><span class="token punctuation">,</span> <span class="token string">'if'</span><span class="token punctuation">,</span> <span class="token string">'import'</span><span class="token punctuation">,</span> <span class="token string">'in'</span><span class="token punctuation">,</span> <span class="token string">'is'</span><span class="token punctuation">,</span> <span class="token string">'lambda'</span><span class="token punctuation">,</span> <span class="token string">'nonlocal'</span><span class="token punctuation">,</span> <span class="token string">'not'</span><span class="token punctuation">,</span> <span class="token string">'or'</span><span class="token punctuation">,</span> <span class="token string">'pass'</span><span class="token punctuation">,</span> <span class="token string">'raise'</span><span class="token punctuation">,</span> <span class="token string">'return'</span><span class="token punctuation">,</span> <span class="token string">'try'</span><span class="token punctuation">,</span> <span class="token string">'while'</span><span class="token punctuation">,</span> <span class="token string">'with'</span><span class="token punctuation">,</span> <span class="token string">'yield'</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> keyword<span class="token keyword">print</span><span class="token punctuation">(</span>keyword<span class="token punctuation">.</span>kwlist<span class="token punctuation">)</span></code></pre><h4 id="4-行与缩进"><a href="#4-行与缩进" class="headerlink" title="4.行与缩进"></a>4.行与缩进</h4><p> #####缩进要求：<br>‘’’<br>a.同一级的代码必须保持同一缩进。(统一使用tab来产生缩进)<br>b.通过缩进来产生代码块（类似于其他语言中的{}）<br>‘’’</p><h5 id="行的规范"><a href="#行的规范" class="headerlink" title="行的规范"></a>行的规范</h5><p>a.声明函数的前后必须有两个换行<br>b.声明类的前后也需要两个换行<br>c.多个功能模块间用换行隔开</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">10</span>b <span class="token operator">=</span> <span class="token number">20</span><span class="token keyword">if</span> a <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span></code></pre><h4 id="5-多行显示-一句代码多行显示"><a href="#5-多行显示-一句代码多行显示" class="headerlink" title="5.多行显示(一句代码多行显示)"></a>5.多行显示(一句代码多行显示)</h4><p> a.在需要换行的地方加入\，然后在后面换行。换行后缩进不受限制</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">10000</span> <span class="token operator">+</span> <span class="token number">10000</span> <span class="token operator">-</span> <span class="token number">1000</span>\ <span class="token operator">*</span> <span class="token number">1000</span> <span class="token operator">+</span> <span class="token number">10000</span> <span class="token operator">/</span><span class="token number">1000</span>\  <span class="token operator">*</span><span class="token number">2000</span> <span class="token operator">-</span> <span class="token number">10000</span><span class="token keyword">print</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span></code></pre><p> b.列表、字典、元祖和集合的字面量换行不用加\</p><pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span>      <span class="token number">120</span><span class="token punctuation">,</span>      <span class="token number">23</span><span class="token punctuation">,</span>      <span class="token string">'asd'</span><span class="token punctuation">,</span>      <span class="token number">278</span><span class="token punctuation">,</span>      <span class="token string">'skda'</span><span class="token punctuation">,</span>      <span class="token number">8444</span><span class="token punctuation">]</span></code></pre><h4 id="6-字面量-具体的值"><a href="#6-字面量-具体的值" class="headerlink" title="6.字面量(具体的值)"></a>6.字面量(具体的值)</h4><p> a.数字字面量：10,12.5,-10,+12,2e2(e表示10，e2表示10的平方),10j<br> b.布尔值：True(真),False（假）<br> c.字符串：’(all),asdj121’或者”hhea11120”<br> d.列表：[10,20,’python’,’java’]<br> e.字典:{‘a’:10,’name’:’XXX’}<br> 7.python中的基本数据类型<br> a.数字相关的:int(整型)，float(浮点型)，complex(复数)<br> b.布尔（bool）：只有True和False两个值<br> c.str(字符串)<br> d.list(列表)<br> e.dict(字典)<br> f.tuple(元祖)<br> g.set(集合)<br> h.function(函数)<br> i.bytes(字节)</p><h3 id="三-变量"><a href="#三-变量" class="headerlink" title="(三)变量"></a>(三)变量</h3><p>声明变量就是在内存中开辟 空间存储数据。（变量就是用来存储数据的）</p><p>#####python是动态语言</p><p>####1. 怎么声明变量</p><p>#####格式：变量=值</p><p>#####说明</p><ul><li>类型:<br>python声明变量的时候不需要确定类型</li><li>变量名：<br>标识符，不能是关键字；见名知义，PEP8命名规范（所有的字母都是小写，多个单词之间用_隔开）</li><li>=：<br>赋值符号，将右边的值赋值给左边的变量</li><li>值：<br>表达式（就是有结果的，例如：字面量，运算表达式（20+1），其他变量）<br>####2.声明一个变量name,赋值为‘路飞’。使用name的时候，就相当于在使用‘路飞’<pre class=" language-python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">'路飞'</span><span class="token keyword">print</span>（name）</code></pre><h4 id="3-声明一个变量class-name-保存’python1806’"><a href="#3-声明一个变量class-name-保存’python1806’" class="headerlink" title="3.声明一个变量class_name,保存’python1806’"></a>3.声明一个变量class_name,保存’python1806’</h4><pre class=" language-python"><code class="language-python">class_name <span class="token operator">=</span> <span class="token string">'python1806'</span>   <span class="token punctuation">(</span>驼峰式：className<span class="token punctuation">)</span>number <span class="token operator">=</span> <span class="token number">100</span></code></pre><h4 id="4-声明一个变量，可以存储不同类型的数据"><a href="#4-声明一个变量，可以存储不同类型的数据" class="headerlink" title="4.声明一个变量，可以存储不同类型的数据"></a>4.声明一个变量，可以存储不同类型的数据</h4><pre class=" language-python"><code class="language-python">number <span class="token operator">=</span> <span class="token string">'娜美'</span><span class="token keyword">print</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span></code></pre><h4 id="5-python中每条语句结束可以不用加分号。但是如果一行要写多条语句，就用分号隔开"><a href="#5-python中每条语句结束可以不用加分号。但是如果一行要写多条语句，就用分号隔开" class="headerlink" title="5.python中每条语句结束可以不用加分号。但是如果一行要写多条语句，就用分号隔开"></a>5.python中每条语句结束可以不用加分号。但是如果一行要写多条语句，就用分号隔开</h4><pre class=" language-python"><code class="language-python">number <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>number <span class="token operator">=</span> <span class="token number">10e2</span></code></pre><h4 id="6-同时声明两个变量，并且赋值一样"><a href="#6-同时声明两个变量，并且赋值一样" class="headerlink" title="6.同时声明两个变量，并且赋值一样"></a>6.同时声明两个变量，并且赋值一样</h4><pre class=" language-python"><code class="language-python">str1 <span class="token operator">=</span> str2 <span class="token operator">=</span> str3 <span class="token operator">=</span> <span class="token string">'abc'</span></code></pre><h4 id="7-id函数"><a href="#7-id函数" class="headerlink" title="7.id函数"></a>7.id函数</h4>####id（变量）————查看变量地址<br>####python声明变量，和给变量赋值的原理：先在内存中开辟空间存储数据，然后再将变量名作为数据存储空间的名字<br><code>`</code>python<br>a = 10<br>print(id(a))<br>a = 100<br>print(id(a))</li></ul><p>a = 10<br>b = 10<br>print(id(a)),print(id(b))<br>b = 20<br>print(id(b))</p><pre><code>输出结果```python18351014881835104368183510148818351014881835101808</code></pre><h4 id="python-中的声明变量与JAVA中声明变量的区别："><a href="#python-中的声明变量与JAVA中声明变量的区别：" class="headerlink" title="python 中的声明变量与JAVA中声明变量的区别："></a>python 中的声明变量与JAVA中声明变量的区别：</h4><p>python是先存储数据，然后再给这个存储空间命名。（数据决定空间位置）<br> JAVA是先给空间命名，然后再存储数据。（变量决定空间位置）</p><h3 id="四-数字和布尔"><a href="#四-数字和布尔" class="headerlink" title="(四)数字和布尔"></a>(四)数字和布尔</h3><h4 id="1-int-整型"><a href="#1-int-整型" class="headerlink" title="1.int(整型)"></a>1.int(整型)</h4><p> 所有的整数都是整型，python3中的整型只有int,python2中有int和long</p><pre class=" language-python"><code class="language-python">num1 <span class="token operator">=</span> <span class="token number">10</span>num2 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">100</span></code></pre><p> #####内置函数：type（）–获取括号中数据的类型</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">,</span>type<span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h4 id="2-float-浮点型"><a href="#2-float-浮点型" class="headerlink" title="2.float(浮点型)"></a>2.float(浮点型)</h4><p> 所有带小数点的数，都是浮点型。python中的浮点型只有float</p><pre class=" language-python"><code class="language-python">num3 <span class="token operator">=</span> <span class="token number">0.12</span>num4 <span class="token operator">=</span> <span class="token operator">+</span><span class="token number">100.0</span>num5 <span class="token operator">=</span> <span class="token number">2e2</span>num6 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3.145</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>num3<span class="token punctuation">)</span><span class="token punctuation">,</span>\    type<span class="token punctuation">(</span>num4<span class="token punctuation">)</span><span class="token punctuation">,</span>\    type<span class="token punctuation">(</span>num5<span class="token punctuation">)</span><span class="token punctuation">,</span>\    type<span class="token punctuation">(</span>num6<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h4 id="3-布尔类型"><a href="#3-布尔类型" class="headerlink" title="3.布尔类型"></a>3.布尔类型</h4><p>布尔只有True和false</p><pre class=" language-python"><code class="language-python">bool1 <span class="token operator">=</span> <span class="token boolean">True</span> bool2 <span class="token operator">=</span> <span class="token boolean">False</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>bool2<span class="token punctuation">)</span><span class="token punctuation">,</span>type<span class="token punctuation">(</span>bool1<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="五-运算符"><a href="#五-运算符" class="headerlink" title="(五)运算符"></a>(五)运算符</h3><p>####1.数学运算符：+(加)，-（减），*（乘），/（除），//(整除)，%（取余），**（幂运算）</p><h5 id="a-，-，-，-，-和数学中的加、减、乘、除、求余的功能是一样的。"><a href="#a-，-，-，-，-和数学中的加、减、乘、除、求余的功能是一样的。" class="headerlink" title="a.+，-，*，/，%和数学中的加、减、乘、除、求余的功能是一样的。"></a>a.+，-，*，/，%和数学中的加、减、乘、除、求余的功能是一样的。</h5><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">+</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span><span class="token number">3.5</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">)</span></code></pre><p>结果</p><pre class=" language-python"><code class="language-python"><span class="token number">30</span><span class="token number">80</span><span class="token number">7</span><span class="token number">2.5</span><span class="token number">1</span></code></pre><p> #####b.//(整除)<br>求商，商只取整数部分</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">6.3</span><span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">)</span></code></pre><p>结果</p><pre class=" language-python"><code class="language-python"><span class="token number">2</span><span class="token number">3</span></code></pre><p> #####c.<strong>(幂运算)<br> x</strong>y–x的y次方</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token operator">**</span><span class="token number">0.5</span><span class="token punctuation">)</span></code></pre><p>结果</p><pre class=" language-python"><code class="language-python"><span class="token number">8</span><span class="token number">3</span></code></pre><p> 取出一个4位整数的百位上的数。例如，取出3512中的5</p><pre class=" language-python"><code class="language-python">number <span class="token operator">=</span> <span class="token number">3512</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>number<span class="token operator">%</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">100</span><span class="token punctuation">)</span></code></pre><p><code>5</code></p><h4 id="2-比较运算：-gt-（大于），-lt-（小于），-（等于），-（不等于），-gt-大于等于"><a href="#2-比较运算：-gt-（大于），-lt-（小于），-（等于），-（不等于），-gt-大于等于" class="headerlink" title="2.比较运算：&gt;（大于），&lt;（小于），==（等于），!=（不等于），&gt;=(大于等于)"></a>2.比较运算：&gt;（大于），&lt;（小于），==（等于），!=（不等于），&gt;=(大于等于)</h4><p> 所有的比较运算的结果都是布尔值</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">></span><span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">&lt;</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">==</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">!=</span><span class="token number">20</span><span class="token punctuation">)</span></code></pre><p>结果</p><pre class=" language-python"><code class="language-python">falsetruefalsetrue</code></pre><h4 id="3-逻辑运算符：and（与），or-或-not-非"><a href="#3-逻辑运算符：and（与），or-或-not-非" class="headerlink" title="3.逻辑运算符：and（与），or(或),not(非)"></a>3.逻辑运算符：and（与），or(或),not(非)</h4><p> 逻辑运算符操作的数据是布尔值，输出的结果也是布尔值</p><p> #####a.and(与)–和、并且</p><pre class=" language-python"><code class="language-python">  两个都是Ture结果才是<span class="token boolean">True</span>，只要有一个<span class="token boolean">False</span>，结果就是<span class="token boolean">False</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token boolean">True</span> <span class="token operator">and</span> <span class="token boolean">True</span><span class="token punctuation">)</span>      <span class="token boolean">True</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token boolean">True</span> <span class="token operator">and</span> <span class="token boolean">False</span><span class="token punctuation">)</span>     <span class="token boolean">False</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token boolean">False</span> <span class="token operator">and</span> <span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token boolean">False</span></code></pre><pre class=" language-python"><code class="language-python">  要求学习成绩在<span class="token number">3.5</span>以上，并且操评分不低于<span class="token number">90</span>score1 <span class="token operator">=</span> <span class="token number">4.0</span>score2 <span class="token operator">=</span> <span class="token number">80</span><span class="token keyword">print</span><span class="token punctuation">(</span>score1<span class="token operator">></span><span class="token number">3.5</span> <span class="token operator">and</span> score2<span class="token operator">></span><span class="token number">90</span><span class="token punctuation">)</span>   <span class="token boolean">False</span></code></pre><h6 id="什么时候使用-：要求两个或者多个条件同时满足"><a href="#什么时候使用-：要求两个或者多个条件同时满足" class="headerlink" title="什么时候使用 ：要求两个或者多个条件同时满足"></a>什么时候使用 ：要求两个或者多个条件同时满足</h6><h5 id="b-or-或-–或者"><a href="#b-or-或-–或者" class="headerlink" title="b.or(或)–或者"></a>b.or(或)–或者</h5><pre class=" language-python"><code class="language-python">只要有一个<span class="token boolean">True</span>结果就是<span class="token boolean">True</span>。两个都是<span class="token boolean">False</span>结果才是<span class="token boolean">False</span><span class="token keyword">print</span><span class="token punctuation">(</span>score1<span class="token operator">></span><span class="token number">3.5</span> <span class="token operator">or</span> score2<span class="token operator">>=</span><span class="token number">90</span><span class="token punctuation">)</span>   <span class="token boolean">True</span></code></pre><p> ######什么时候使用：要求有两个或者两个以上，满足一个就行</p><h5 id="c-not-非"><a href="#c-not-非" class="headerlink" title="c.not(非)"></a>c.not(非)</h5><pre class=" language-python"><code class="language-python"><span class="token boolean">True</span>变成<span class="token boolean">False</span><span class="token punctuation">,</span><span class="token boolean">False</span>就变成<span class="token boolean">True</span>age <span class="token operator">=</span> <span class="token number">20</span>年龄不小于<span class="token number">18</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">not</span> age<span class="token operator">&lt;</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>age<span class="token operator">>=</span><span class="token number">18</span><span class="token punctuation">)</span></code></pre><p> ####4.赋值运算符：=（赋值），+=，-=，*=，/=，%=，//=，**=<br> 赋值符号的左边必须是变量；运算顺序是（先算赋值符号右边的值，然后再将右边的值赋给左边）</p><h5 id="a-变量-值"><a href="#a-变量-值" class="headerlink" title="a.变量 = 值"></a>a.变量 = 值</h5><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">10</span>b <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">10</span>c <span class="token operator">=</span> a <span class="token operator">+</span> bd <span class="token operator">=</span> a <span class="token operator">></span> <span class="token number">10</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span></code></pre><h5 id="b-变量-值"><a href="#b-变量-值" class="headerlink" title="b.变量 += 值"></a>b.变量 += 值</h5><ul><li>这儿的变量必须是已经声明过的变量<pre class=" language-python"><code class="language-python">a <span class="token operator">+=</span> <span class="token number">2</span>   相当于 a <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">2</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>b <span class="token operator">-=</span> <span class="token number">2</span>   相当于 b <span class="token operator">=</span> b <span class="token operator">-</span> <span class="token number">2</span></code></pre></li><li>补充：变量必须先声明，再使用<pre class=" language-python"><code class="language-python">num1<span class="token punctuation">(</span>错误表示，没有先定义<span class="token punctuation">)</span>num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>num2 <span class="token operator">=</span> <span class="token number">20</span>num1</code></pre><h4 id="5-运算符的优先级"><a href="#5-运算符的优先级" class="headerlink" title="5.运算符的优先级"></a>5.运算符的优先级</h4>数学运算符 &gt; 比较运算符 &gt; 逻辑运算符 &gt; 赋值运算符<br>数学运算符：*<em> &gt; (</em>,/,//,%) &gt; (+,-)<br>先计算优先级高的，优先级一样，从左往右依次计算。可以通过加括号改变优先级<br><code>`</code>python<br>print(10 * 20 + (30 &lt; 40) / 2 - 100)</li></ul><p>print(2*2**3//8%2)</p><pre><code>### (六)进制######计算机中常用的进制：二进制、八进制、十进制、十六进制 ####十进制 1.基数：0,1,2,3,4,5,6,7,8,9 2.进位：逢10进1 3.十进制数上的每一位：123 = 10^2*1+10^1*2+10^0*3#### 二进制 1.基数：0,1   例如：110,1010 2.进位：逢2进1 3.二进制数上的每一位：1011 = 2^0*1 + 2^1*1 + 2^2*0 + 2^3*1 = 11#### 八进制 1.基数：0,1,2，3,4,5,6,7 2.进位：逢8进1 3.八进制数的每一位：123 = 8^0*3 + 8^1*2+8^2*1 = 83#### 十六进制 1.基数：0-9，a-f(A-F)--a(10)~f(15)    例如：1af 2.进位：逢16进1 3.十六进制数的每一位：123 = 19^0*3 + 16^1*2 + 16^2*1 = 291 ####进制间的转换 1.二进制、八进制、十六进制---&gt;十进制 进制数^位数（从0开始）*每一位上的值的和 2.八进制、十六进制----&gt;二进制 将一位的八进制转换成3位的二进制。将一位的十六进制转换成4位的二进制```python 123（8）---&gt;001 010 011 ---&gt;001010011（2） 123（16）--&gt;0001 0010 0011 --&gt;000100100011(2) 10(16)--&gt;0001 0000--&gt;00010000</code></pre><p> 3.二进制—&gt;八进制、十六进制<br> 将三位的二进制转换成一位的八进制，将四位的二进制转换成一位的十六进制</p><pre class=" language-python"><code class="language-python"> <span class="token number">001</span> <span class="token number">010</span> <span class="token number">011</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">123</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span></code></pre><p> 4.十进制—&gt;二进制 ： 相除取余</p><p> python进制的支持<br> python支持整数的二进制、八进制、十六进制</p><ul><li>python中二进制、八进制、十六进制的表示</li><li><h5 id="二进制：0b"><a href="#二进制：0b" class="headerlink" title="二进制：0b"></a>二进制：0b</h5><code>`</code>python<br>print(0b11)<br>print(11)</li></ul><p>print(bin(20))        将其他的数据转换成二进制   bin()<br>print(bin(0x20))</p><pre><code>+ ##### 八进制：0o  print(0o11)```pythonprint(oct(20))        将其他的数据转换成八进制   oct()print(oct(0b11011))</code></pre><ul><li>#####十六进制：0x<pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">0xaf</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>hex<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        将其他的数据转换成十六进制 hex<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li></ul><h2 id="（七）字符"><a href="#（七）字符" class="headerlink" title="（七）字符"></a>（七）字符</h2><ul><li><p>常见的转义字符：</p><ul><li><p>\n ——— 换行</p></li><li><p>\t ———- 制表符（相当于tab）</p></li><li><p>\ ——— ,隔开</p></li><li><p>‘ ———— ’</p></li><li><p>“ ———– ”</p><p>在计算字符长度的时候，转义字符的长度是1</p></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>practice</title>
      <link href="/2018/10/16/practice/"/>
      <url>/2018/10/16/practice/</url>
      
        <content type="html"><![CDATA[<p><strong>好记心不如烂笔头</strong></p><p><strong>站在岸上学不会游泳</strong></p><p><strong>人生在于不断地学习</strong></p><h3 id="practice1"><a href="#practice1" class="headerlink" title="practice1"></a>practice1</h3><h5 id="创建列表过程"><a href="#创建列表过程" class="headerlink" title="创建列表过程"></a>创建列表过程</h5><ul><li><p>创建SRS数据库</p><pre class=" language-mysql"><code class="language-mysql">drop database if exists SRS;create database SRS default charset utf8 collate utf8_bin;</code></pre></li><li><p>切换到SRS数据库</p><pre class=" language-mysql"><code class="language-mysql">use SRS;</code></pre></li><li><p>创建学院表</p><pre class=" language-mysql"><code class="language-mysql">create table tb_college(collid int not null auto_increment comment '学院编号',collname varchar(50) not null comment '学院名称',collmaster varchar(20) not null comment '院长姓名',collweb varchar(511) default '' comment '学院网站',primary key (collid));</code></pre></li><li><p>添加唯一约束</p><pre class=" language-mysql"><code class="language-mysql">alter table tb_college add constraint uni_college_collname unique (collname);</code></pre></li><li><p>创建学生表</p><pre class=" language-mysql"><code class="language-mysql">create table tb_student(stuid int not null comment '学号',sname varchar(20) not null comment '学生姓名',gender bit default 1 comment '性别',birth date not null comment '出生日期',addr varchar(255) default '' comment '籍贯',collid int not null comment '所属学院编号',primary key (stuid));</code></pre></li><li><p>添加外键约束</p><pre class=" language-mysql"><code class="language-mysql">- alter table tb_student add constraint fk_student_collid foreign key (collid) references tb_college (collid);</code></pre></li><li><p>创建教师表</p><pre class=" language-mysql"><code class="language-mysql">create table tb_teacher(teaid int not null comment '教师工号',tname varchar(20) not null comment '教师姓名',title varchar(10) default '' comment '职称',collid int not null comment '所属学院编号');</code></pre></li><li><p>添加主键约束</p><pre class=" language-mysql"><code class="language-mysql">alter table tb_teacher add constraint pk_teacher primary key (teaid);</code></pre></li><li><p>添加外键约束</p><pre class=" language-mysql"><code class="language-mysql">alter table tb_teacher add constraint fk_teacher_collid foreign key (collid) references tb_college (collid);</code></pre></li><li><p>创建课程表</p><pre class=" language-mysql"><code class="language-mysql">create table tb_course(couid int not null comment '课程编号',cname varchar(50) not null comment '课程名称',credit tinyint not null comment '学分',teaid int not null comment '教师工号',primary key (couid));</code></pre></li><li><p>添加外键约束</p><pre class=" language-mysql"><code class="language-mysql">alter table tb_course add constraint fk_course_tid foreign key (teaid) references tb_teacher (teaid);</code></pre></li><li><p>创建学生选课表</p><pre class=" language-mysql"><code class="language-mysql">create table tb_score(scid int not null auto_increment comment '选课编号',sid int not null comment '学号',cid int not null comment '课程编号',seldate date comment '选课时间日期',mark decimal(4,1) comment '考试成绩',primary key (scid));</code></pre></li><li><p>添加外键约束</p><pre class=" language-mysql"><code class="language-mysql">alter table tb_score add constraint fk_score_sid foreign key (sid) references tb_student (stuid);alter table tb_score add constraint fk_score_cid foreign key (cid) references tb_course (couid);-- 添加唯一约束alter table tb_score add constraint uni_score_sid_cid unique (sid, cid);</code></pre></li><li><p>插入学院数据</p><pre class=" language-mysql"><code class="language-mysql">insert into tb_college (collname, collmaster, collweb) values ('计算机学院', '左冷禅', 'http://www.abc.com'),('外国语学院', '岳不群', 'http://www.xyz.com'),('经济管理学院', '风清扬', 'http://www.foo.com');</code></pre></li><li><p>插入学生数据</p><pre class=" language-mysql"><code class="language-mysql">insert into tb_student (stuid, sname, gender, birth, addr, collid) values(1001, '杨逍', 1, '1990-3-4', '四川成都', 1),(1002, '任我行', 1, '1992-2-2', '湖南长沙', 1),(1033, '王语嫣', 0, '1989-12-3', '四川成都', 1),(1572, '岳不群', 1, '1993-7-19', '陕西咸阳', 1),(1378, '纪嫣然', 0, '1995-8-12', '四川绵阳', 1),(1954, '林平之', 1, '1994-9-20', '福建莆田', 1),(2035, '东方不败', 1, '1988-6-30', null, 2),(3011, '林震南', 1, '1985-12-12', '福建莆田', 3),(3755, '项少龙', 1, '1993-1-25', null, 3),(3923, '杨不悔', 0, '1985-4-17', '四川成都', 3);</code></pre></li><li><p>插入老师数据</p><pre class=" language-mysql"><code class="language-mysql">insert into tb_teacher (teaid, tname, title, collid) values (1122, '张三丰', '教授', 1),(1133, '宋远桥', '副教授', 1),(1144, '杨逍', '副教授', 1),(2255, '范遥', '副教授', 2),(3366, '韦一笑', '讲师', 3);</code></pre></li><li><p>插入课程数据</p><pre class=" language-mysql"><code class="language-mysql">insert into tb_course (couid, cname, credit, teaid) values (1111, 'Python程序设计', 3, 1122),(2222, 'Web前端开发', 2, 1122),(3333, '操作系统', 4, 1122),(4444, '计算机网络', 2, 1133),(5555, '编译原理', 4, 1144),(6666, '算法和数据结构', 3, 1144),(7777, '经贸法语', 3, 2255),(8888, '成本会计', 2, 3366),(9999, '审计学', 3, 3366);</code></pre></li><li><p>插入选课数据</p><pre class=" language-mysql"><code class="language-mysql">insert into tb_score (sid, cid, seldate, mark) values (1001, 1111, '2017-09-01', 95),(1001, 2222, '2017-09-01', 87.5),(1001, 3333, '2017-09-01', 100),(1001, 4444, '2018-09-03', null),(1001, 6666, '2017-09-02', 100),(1002, 1111, '2017-09-03', 65),(1002, 5555, '2017-09-01', 42),(1033, 1111, '2017-09-03', 92.5),(1033, 4444, '2017-09-01', 78),(1033, 5555, '2017-09-01', 82.5),(1572, 1111, '2017-09-02', 78),(1378, 1111, '2017-09-05', 82),(1378, 7777, '2017-09-02', 65.5),(2035, 7777, '2018-09-03', 88),(2035, 9999, date(now()), null),(3755, 1111, date(now()), null),(3755, 8888, date(now()), null),(3755, 9999, '2017-09-01', 92);</code></pre></li></ul><h5 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h5><ul><li><p>查询所有学生信</p><pre class=" language-mysql"><code class="language-mysql">select * from tb_student;</code></pre></li><li><p>查询所有课程名称及学分(投影和别名)</p><pre class=" language-mysql"><code class="language-mysql">select cname as 课程名称,credit as 学分 from tb_course;</code></pre></li><li><p>查询所有女学生的姓名和出生日期(筛选)</p><pre class=" language-mysql"><code class="language-mysql">select sname as 姓名,birth as 出生日期 from tb_student where gender=0;</code></pre></li><li><p>查询所有80后学生的姓名、性别和出生日期(筛选)</p><pre class=" language-mysql"><code class="language-mysql">select sname,gender,birth from tb_student where birth between'1980-1-1' and '1989-12-31';</code></pre></li><li><p>查询姓”杨“的学生姓名和性别(模糊)</p><pre class=" language-mysql"><code class="language-mysql">select sname,gender from tb_student where sname like '杨%';</code></pre></li><li><p>查询姓”杨“名字两个字的学生姓名和性别(模糊)</p><pre class=" language-mysql"><code class="language-mysql">select sname,gender from tb_student where sname like '杨_';</code></pre></li><li><p>查询姓”杨“名字三个字的学生姓名和性别(模糊)</p><pre class=" language-mysql"><code class="language-mysql">select sname,gender from tb_student where sname like '杨__';</code></pre></li><li><p>查询名字中有”不“字或“嫣”字的学生的姓名(模糊)</p><pre class=" language-mysql"><code class="language-mysql">select sname from tb_student where sname like '%不%' or sname like '%嫣%';</code></pre></li><li><p>查询没有录入家庭住址的学生姓名(空值)</p><pre class=" language-mysql"><code class="language-mysql">select sname from tb_student where addr is null or addr='';</code></pre></li><li><p>查询录入了家庭住址的学生姓名(空值)</p><pre class=" language-mysql"><code class="language-mysql">select sname from tb_student where addr is not null and addr<>'';</code></pre></li><li><p>查询学生选课的所有日期(diatinct —– 去重)</p><pre class=" language-mysql"><code class="language-mysql">select distinct seldate from tb_score;</code></pre></li><li><p>查询学生的家庭住址</p><pre class=" language-mysql"><code class="language-mysql">select distinct addr from tb_student where addr is not null and addr<>'';</code></pre></li><li><p>查询学生的姓名和生日按年龄从大到小排列(排序)</p><pre class=" language-mysql"><code class="language-mysql">select sname,birth from tb_student order by birth asc;</code></pre></li><li><p>查询所有男学生的姓名和生日按年龄从大到小排列(排序)( order by ——- 排序)</p><pre class=" language-mysql"><code class="language-mysql">select sname,birth from tb_student where gender=1 order by birth asc;</code></pre></li><li><p>查询年龄最大的学生的出生日期(聚合函数)</p><pre class=" language-mysql"><code class="language-mysql">select min(birth) from tb_student;</code></pre></li><li><p>查询年龄最小的学生的出生日期(聚合函数)</p><pre class=" language-mysql"><code class="language-mysql">select max(birth) from tb_student;</code></pre></li><li><p>查询男女学生的人数(分组和聚合函数)( 分组——— group by)</p><pre class=" language-mysql"><code class="language-mysql">select if(gender, '男', '女') as 性别, count(gender) as 人数 from tb_student group by gender;</code></pre></li><li><p>查询课程编号为1111的课程的平均成绩(筛选和聚合函数)</p><pre class=" language-mysql"><code class="language-mysql">select avg(mark) as 平均分 from tb_score where cid=1111;</code></pre></li><li><p>查询学号为1001的学生所有课程的总成绩(筛选和聚合函数)</p><pre class=" language-mysql"><code class="language-mysql">select sum(mark) as 平均分 from tb_score where cid=1001;</code></pre></li><li><p>查询每个学生的学号和平均成绩(分组和聚合函数)</p><pre class=" language-mysql"><code class="language-mysql">select sid,avg(mark) from tb_score where mark is not null group by sid;</code></pre></li><li><p>查询平均成绩大于等于90分的学生的学号和平均成绩(先分组，再筛选 ——— 分组后跟having)</p><pre class=" language-mysql"><code class="language-mysql">select sid,avgmark from tb_score group by sid having avg(mark)>=90;</code></pre></li><li><p>查询年龄最大的学生的姓名(子查询)</p><ul><li><p>子查询 — 在一个查询中又使用到了另外一个查询的结果</p></li><li><p>查询年龄最大的学生的姓名（子查询）</p><pre class=" language-mysql"><code class="language-mysql">select sname from tb_student where birth= (select min(birth) from tb_student);</code></pre></li></ul></li><li><p>查询年龄最大的学生的姓名和年龄</p><pre class=" language-mysql"><code class="language-mysql">select sname as 姓名, year(now()) - year(birth) as 年龄from tb_student where birth= (select min(birth) from tb_student); </code></pre></li><li><p>查询选了两门以上的课程的学生姓名(子查询/分组条件/集合运算)</p><pre class=" language-mysql"><code class="language-mysql">select sname from tb_student where stuid in (select sid from tb_score group by sid having count(sid)>2);</code></pre></li><li><p>查询选课学生的姓名和平均成绩(子查询和连接查询)</p><pre class=" language-mysql"><code class="language-mysql">select sname, avgmark from tb_student t1,(select sid, avg(mark) as avgmark from tb_score group by sid) t2where stuid=sid;select sname,cname,mark from tb_studentinner join tb_score on stuid=sidinner join tb_course on couid=cidwhere mark is not null;-- 注意：在连接查询时结果没有给出连接条件就会形成笛卡尔积-- 笛卡儿积-- A(a, b, c)*B(d, e)={ad, ae,bd, be, cd, ce}-- 查询学生姓名、所选课程名称和成绩(连接查询)-- 连接查询(连接查询/连结查询)select sname,cname,markfrom tb_score, tb_student, tb_coursewhere stuid=sid and couid=cid and mark is not null;-- 查询每个学生的姓名和选课数量（左外连接和子查询）-- 左外连接 ----- 把左表（写在连接前面的表）不满足连接条件的记录也查询出来对应记录补null值-- 右外连接 ----- 把右表（写在连接后面的表）不满足连接条件的记录也查询出来对应记录补null值select sname as 姓名, conter as 选课数量 from tb_student left join,(select sid, count(sid) as conter from tb_score group by sid)t2on stuid(+)=sid;</code></pre></li></ul><h3 id="表的连接关系"><a href="#表的连接关系" class="headerlink" title="表的连接关系"></a>表的连接关系</h3><p><img src="/2018/10/16/practice/表连接1.png" alt="表连接1"></p><h4 id="内连接的方式"><a href="#内连接的方式" class="headerlink" title="内连接的方式"></a>内连接的方式</h4><p><img src="/2018/10/16/practice/表连接2.png" alt="表连接2"></p><h4 id="自连接的方式"><a href="#自连接的方式" class="headerlink" title="自连接的方式"></a>自连接的方式</h4><p><img src="/2018/10/16/practice/表连接3.png" alt="表连接3"></p><h4 id="外连接的方式"><a href="#外连接的方式" class="headerlink" title="外连接的方式"></a>外连接的方式</h4><p><img src="/2018/10/16/practice/表连接4.png" alt="表连接4"></p><h2 id="practice2"><a href="#practice2" class="headerlink" title="practice2"></a>practice2</h2><ul><li><p>创建人力资源管理系统数据库</p><pre class=" language-mysql"><code class="language-mysql">drop database if exists HRS;create database HRS default charset utf8 collate utf8_bin;</code></pre></li><li><p>切换数据库上下文环境<br><code>use HRS;</code></p></li><li><p>删除表</p><pre class=" language-mysql"><code class="language-mysql">drop table if exists TbEmp;drop table if exists TbDept;</code></pre></li><li><p>创建部门表</p><pre class=" language-mysql"><code class="language-mysql">create table TbDept(dno tinyint not null comment '部门编号',dname varchar(10) not null comment '部门名称',dloc varchar(20) not null comment '部门所在地',primary key (dno));</code></pre></li><li><p>添加部门记录</p><pre class=" language-mysql"><code class="language-mysql">insert into TbDept values (10, '会计部', '北京');insert into TbDept values (20, '研发部', '成都');insert into TbDept values (30, '销售部', '重庆');insert into TbDept values (40, '运维部', '深圳');</code></pre></li><li><p>创建员工表</p><pre class=" language-mysql"><code class="language-mysql">create table TbEmp(eno int not null comment '员工编号',ename varchar(20) not null comment '员工姓名',job varchar(20) not null comment '员工职位',mgr int comment '主管编号',sal int not null comment '月薪',comm int comment '月补贴',dno tinyint comment '所在部门编号',primary key (eno));</code></pre></li><li><p>添加外键约束</p><pre class=" language-mysql"><code class="language-mysql">alter table TbEmp add constraint fk_dno foreign key (dno) references TbDept(dno) on delete set null on update cascade;-- 更新，删除后赋值为null，所以前面创建的时候就不能添加（is not null)-- on delete set null on update cascade;</code></pre></li><li><p>添加员工记录</p><pre class=" language-mysql"><code class="language-mysql">insert into TbEmp values (7800, '张三丰', '总裁', null, 9000, 1200, 20),(2056, '乔峰', '分析师', 7800, 5000, 1500, 20),(3088, '李莫愁', '设计师', 2056, 3500, 800, 20),(3211, '张无忌', '程序员', 2056, 3200, null, 20),(3233, '丘处机', '程序员', 2056, 3400, null, 20),(3251, '张翠山', '程序员', 2056, 4000, null, 20),(5566, '宋远桥', '会计师', 7800, 4000, 1000, 10),(5234, '郭靖', '出纳', 5566, 2000, null, 10),(3344, '黄蓉', '销售主管', 7800, 3000, 800, 30),(1359, '胡一刀', '销售员', 3344, 1800, 200, 30),(4466, '苗人凤', '销售员', 3344, 2500, null, 30),(3244, '欧阳锋', '程序员', 3088, 3200, null, 20),(3577, '杨过', '会计', 5566, 2200, null, 10),(3588, '朱九真', '会计', 5566, 2500, null, 10);</code></pre><h4 id="习题-1"><a href="#习题-1" class="headerlink" title="习题"></a>习题</h4></li><li><p>查询薪资最高的员工姓名和工资</p><pre class=" language-mysql"><code class="language-mysql">-- select ename, sal+comm from TbEmp order by sal desc limit 0, 1;        ------- 排序出现的问题：可能前几个人的工资一样select ename as 总裁, sal as 工资 from tbempwhere sal=(select max(sal) from tbemp);</code></pre></li><li><p>查询员工的姓名和年薪((月薪+补贴)*12)</p><pre class=" language-mysql"><code class="language-mysql">-- select ename as 姓名, sal12 + if(comm12,comm12,0) as 年薪 from TbEmp; orselect ename as 姓名, (sal + ifnull(comm,0))12 as 年薪 from TbEmp;</code></pre></li><li><p>查询年薪大于5万的员工的姓名和年薪</p><pre class=" language-mysql"><code class="language-mysql">select ename as 姓名, (sal + ifnull(comm,0))12 as 年薪-- from TbEmp where 年薪>50000;from TbEmp where (sal + ifnull(comm,0))12>50000;</code></pre></li><li><p>查询有员工的部门的编号和人数<br><code>select dno,count(dno) as 人数 from TbEmp group by dno;</code>.</p></li><li><p>查询所有部门的名称和人数</p></li></ul><pre class=" language-mysql"><code class="language-mysql">select dno as 部门编号,dname as 部门名称,counter as 人数 from tbdept as t1,(select dno as d,count(dno) as counter from tbemp group by dno)t2where t1.dno=t2.d;</code></pre><pre class=" language-mysql"><code class="language-mysql">select dname as 部门名称, ifnull(total, 0) as 人数 from tbdept t1 left join(select dno, count(dno) as total from tbemp group by dno)t2on t1.dno=t2.dno;</code></pre><ul><li><p>查询薪资最高的员工(Boss除外)的姓名和工资</p><pre class=" language-mysql"><code class="language-mysql">-- select ename as 姓名, sal+if(comm, comm, 0) as 工资 from TbEmp-- order by (sal+if(comm, comm, 0)) desc limit 1, 1;select ename as 员工, sal as 工资 from tbempwhere sal=(select max(sal) from tbemp where mgr is not null);</code></pre></li><li><p>查询薪水超过平均薪水的员工的姓名和工资</p><pre class=" language-mysql"><code class="language-mysql">select ename as 姓名, sal as 工资 from tbempwhere (sal+if(comm, comm, 0))>(select avg(sal+if(comm, comm, 0)) from tbemp);</code></pre><pre class=" language-mysql"><code class="language-mysql">select ename as 姓名, sal as 工资 from TbEmpwhere sal>(select avg(sal) from tbemp);</code></pre></li><li><p>查询薪水超过其所在部门平均薪水的员工的姓名、部门编号和工资</p><pre class=" language-mysql"><code class="language-mysql">select ename, t1.dno, avgsal from tbemp t1,(select dno, avg(sal) as avgsal from tbemp group by dno)t2where t1.dno=t2.dno and sal>avgsal;-- 多个连表条件之间用and连接</code></pre></li><li><p>查询薪水超过其所在部门平均薪水的员工的姓名、部门名称和工资</p><pre class=" language-mysql"><code class="language-mysql">select ename, dname, sal from tbemp t1,(select dno, avg(sal) as avgsal from tbemp group by dno)t2,tbdept t3where t1.dno=t2.dno and sal>avgsal and t2.dno=t3.dno;</code></pre></li><li><p>查询部门中薪水最高的人姓名、工资和所在部门名称</p><pre class=" language-mysql"><code class="language-mysql">select ename, dname, sal from tbemp t1,(select dno, max(sal) as maxsal from tbemp group by dno)t2,tbdept t3where t1.dno=t2.dno and t2.dno=t3.dno and sal=maxsal;</code></pre></li><li><p>查询主管的姓名</p><pre class=" language-mysql"><code class="language-mysql">- -- select ename from tbemp where job like'%主管%';select ename, job from tbempwhere eno in (select distinct mgr from tbemp where mgr is not null);-- 说明：去重操作和集合运算效率是非常低的</code></pre></li><li><p>通常建议用exists或者not exists操作来代替去重和集合运算</p><pre class=" language-mysql"><code class="language-mysql">select ename, job from tbemp t1where exists (select 'x' from tbemp t2 where t1.eno=t2.mgr);</code></pre></li><li><p>视图是查询的快照</p><pre class=" language-mysql"><code class="language-mysql">-- 通过视图可以将用户对表的访问权限进一步加以限制-- 也就是说普通用户看到的就是限制的视图内容create view emp_no_sal asselect ename, dname, sal from tbemp t1,(select dno, avg(sal) as avgsal from tbemp group by dno)t2,tbdept t3where t1.dno=t2.dno and sal>avgsal and t2.dno=t3.dno;</code></pre></li><li><p>索引(相当于一本书的目录）</p><ul><li><p>为表创建索引可以加速查询(用空间换时间)</p></li><li><p>索引不能滥用：</p><ul><li><p>一、索引会让增删改变得更慢，应为增删改的操作可能会导致更新索引</p></li><li><p>二、索引会占用额外的存储空间</p></li><li>索引应该建在经常被用于查询的筛选条件的列上面主键上有默认的索引(唯一索引)</li></ul></li></ul></li><li><p>创建索引</p><pre class=" language-mysql"><code class="language-mysql">-- 说明：使用模糊查询 ----- 如果查询条件不以%开头，索引有效;反之,无效create index idx_emp_ename on tbemp(ename);-- 唯一索引create unique index uni_emp_ename on tbemp(ename);</code></pre></li><li><p>删除索引<br><code>alter table tbemp drop index uni_emp_ename;</code></p></li></ul>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>MySQL</title>
      <link href="/2018/10/16/MySQL/"/>
      <url>/2018/10/16/MySQL/</url>
      
        <content type="html"><![CDATA[<p>MySQL是一种<a href="https://baike.baidu.com/item/%E5%BC%80%E6%94%BE%E6%BA%90%E4%BB%A3%E7%A0%81" target="_blank" rel="noopener">开放源代码</a>的关系型<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86" target="_blank" rel="noopener">数据库管理</a>系统（RDBMS），MySQL<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F" target="_blank" rel="noopener">数据库系统</a>使用最常用的数据库管理语言–<a href="https://baike.baidu.com/item/%E7%BB%93%E6%9E%84%E5%8C%96%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80" target="_blank" rel="noopener">结构化查询语言</a>（SQL）进行数据库管理。</p><p>端口是IP地址区分不同服务的</p><ul><li>Docker —- 屏蔽硬件和软件的差异</li><li>虚拟机（Virtual Machine）指通过软件模拟的具有完整硬件系统功能的、运行在一个完全隔离环境中的完整计算机系统</li></ul><p>图形化的MySQL客户端工具</p><ul><li>Navicat for MySQL</li><li>Tod for MySQL</li><li>SQLyog</li></ul><h3 id="ER-—–-实体关系图"><a href="#ER-—–-实体关系图" class="headerlink" title="ER —– 实体关系图"></a>ER —– 实体关系图</h3><p><img src="/2018/10/16/MySQL/F:/hexo\source\_posts\MySQL\表与表的关系.png" alt="image"></p><h3 id="MySQL中表与表的关系"><a href="#MySQL中表与表的关系" class="headerlink" title="MySQL中表与表的关系"></a>MySQL中表与表的关系</h3><p>一对一：一个实体只对应一个实体</p><p>一对多：一个实体可以对应多个实体</p><p>多对多：多个实体对应多个实体</p><h5 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h5><p>外键/外键约束 ——- 外来的主键 —- 参照完整性</p><p>数据的完整性</p><ul><li>实体完整性==：==<ul><li>每条记录都是独一无二的，没有冗余</li><li>主键/唯一索引（唯一的约束）</li></ul></li></ul><p><code>alter table tb_college add constraint uni_college_collname unique(collname)</code></p><ul><li>参照完整性：<ul><li>B表参照了A表，A表没有的记录在B表中决不能出现</li><li>外键(外键约束)<pre><code>alter table tb_student add column coll_stuid int;alter table tb_student add constraint fk_teacher_coll_stuidforeign key (coll_stuid) references tb_college (num);</code></pre></li></ul></li><li>域完整性：录入的数据都是有效的<ul><li>数据类型/非空约束/默认值约束/检查约束(MySQL中不生效)</li></ul></li></ul><p>数据的一致性</p><h4 id="聚合函数：在所有的数据库中都支持的函数"><a href="#聚合函数：在所有的数据库中都支持的函数" class="headerlink" title="聚合函数：在所有的数据库中都支持的函数"></a>聚合函数：在所有的数据库中都支持的函数</h4><ul><li>max()/ main()/ sum()/ avg()/ count()</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 虚拟机	ER	外键	集合函数 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>操作命令</title>
      <link href="/2018/10/16/%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/10/16/%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="查看自己使用的Shall"><a href="#查看自己使用的Shall" class="headerlink" title="查看自己使用的Shall"></a>查看自己使用的Shall</h3><ul><li>Shall -ps 查看自己使用的Shell</li><li>Shell ——– 人机对话的交互式环境</li><li>bash ——– bourne again shell</li></ul><h3 id="用命令"><a href="#用命令" class="headerlink" title="用命令"></a>用命令</h3><ul><li>clear —— 清屏</li><li>ps —— processes  查看正在运行的进程</li><li>ps -ef —————– 查看运行的进程</li><li>kill PID —— 杀掉进程</li><li>kill -9 ———— 强制杀死进程</li><li>adduser 用户名 ——- 添加用户</li><li>passwd ———- 设置密码</li><li>userdel ———– 删除用户</li><li>su 用户名 ——— 切换用户（switch user）</li><li>sudo ———- 以超级管理员身份操作（super user do）</li><li>chown 拥有者 文件名 ————– 改变文件的拥有者</li><li>‘#’——- 超级管理员</li><li>$ ——– 普通用户</li><li>~ ———- 主目录<h6 id="两个不同的用户"><a href="#两个不同的用户" class="headerlink" title="两个不同的用户"></a>两个不同的用户</h6></li><li>write 用户名 ————— 连接相同的系统的不同用户之间发送消息</li><li>Ctrl d ————— 消息内容结束符</li><li>mesg n / y —————- 不接收消息/接收消息</li><li>wall ————- 给所有用户发消息</li></ul><h4 id="查看命令、帮助文档"><a href="#查看命令、帮助文档" class="headerlink" title="查看命令、帮助文档"></a>查看命令、帮助文档</h4><ul><li>Tab ——– 补全命令，查看命令</li><li>q  ——  结束查看</li><li>man 命令 ——— 查看手册</li><li>命令 –help ———– 查看命令用法</li><li>cd ———– 改变所在目录</li><li>cd /目录名 ——- 去到某个目录</li><li>pwd ——– 查看目录</li><li>ls ——— 查看文件或者文件名（list directory contents）<ul><li>-l 长格式查看</li><li>-a 查看所有（包括以点开头的隐藏文件和文件夹）</li><li>-R 递归查看</li></ul></li><li>| ———- 管道（左边的输出作为右边的输入）</li><li>wget 网址 ——– 通过网络下载文件</li><li>cat ———- concatenate  连接多个文件并显示到标准输出</li><li>cat 文件名 ——— 查看文件</li><li>cat -n 网址 ——– 查看行号</li><li>history ———- 查看所有的历史命令</li><li>！ 历史命令编号 ———- 执行历史命令</li><li>history -c ———— 清除历史命令</li><li>Ctrl c ——— 强行终止命令</li><li>mkdir ——— 创建目录<ul><li>-r 递归删除</li><li>-f 强制删除</li></ul></li><li>rmdir ——— 删除空目录</li><li>cp ———– 复制文件和目录</li><li>cp -r /文件名————- 复制文件夹并修改文件名</li><li>mv —————— 剪切文件</li><li>rm ———- 删除文件和目录</li><li>touch —————- 创建空文件或者修改文件时间</li><li>echo ————— 回声（输入什么，就输出什么）</li><li><strong>&gt;</strong> 件 ———– 输出重定向（输出到指定的文件夹）</li><li>alias / unalies 重新取别名/取消别名</li><li><strong>&gt;&gt;</strong> ———— 追加输出重定向</li><li><strong>2&gt;</strong> ———— 错误输出重定向</li><li>&lt;输入重定向</li><li>grep 搜索字符串</li><li>date ————— 查看时间</li><li>cal —————- 查看日历（calendar）</li><li>head -数字 —————- 查看指定头行数</li><li>tail -数字 —————– 查看指定尾行数</li><li>less/more —————– 分屏查看文件</li><li>wc ——————- world count 统计</li><li>uniq 文件夹 ————- 去掉文件夹中相邻的重复项</li><li>sort 文件夹 ————– 排序</li><li>diff —————比较文件夹的区别</li></ul><h3 id="重启、关机"><a href="#重启、关机" class="headerlink" title="重启、关机"></a>重启、关机</h3><ul><li>重启和关机 - reboot / init 6 / shutdown / init 0</li><li>shutdown ——- 关机</li><li>shutdown -c（cancle） ————– 取消关机</li><li>init 0(关机)/6(重启)</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 超级管理员, 重启 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>意外的操作</title>
      <link href="/2018/10/16/%E6%84%8F%E5%A4%96%E7%9A%84%E6%93%8D%E4%BD%9C/"/>
      <url>/2018/10/16/%E6%84%8F%E5%A4%96%E7%9A%84%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h4 id="hexo中，将图片上传到hexo中"><a href="#hexo中，将图片上传到hexo中" class="headerlink" title="hexo中，将图片上传到hexo中"></a>hexo中，将图片上传到hexo中</h4><h5 id="First"><a href="#First" class="headerlink" title="First"></a>First</h5><ul><li><p>1 把主页配置文件_config.yml里的post_asset_folder:这个选项设置为true</p></li><li><p>2 在你的hexo目录下执行这样一句话npm install hexo-asset-image –save，这是下载安装一个可以上传本地图片的插件，来自dalao：dalao的git</p></li><li><p>3 等待一小段时间后，再运行hexo n “xxxx”来生成md博文时，/source/_posts文件夹内除了xxxx.md文件还有一个同名的文件夹</p></li></ul><h5 id="Second"><a href="#Second" class="headerlink" title="Second"></a>Second</h5><ul><li>4 最后在xxxx.md中想引入图片时，先把图片复制到xxxx这个文件夹中，然后只需要在xxxx.md中按照markdown的格式引入图片：<br><code>![你想输入的替代文字](xxxx/图片名.jpg)</code></li></ul><p>注意： xxxx是这个md文件的名字，也是同名文件夹的名字。只需要有文件夹名字即可，不需要有什么绝对路径。你想引入的图片就只需要放入xxxx这个文件夹内就好了，很像引用相对路径。</p><ul><li>5 最后检查一下，hexo g 生成页面后，进入public\2017\02\26\index.html文件中查看相关字段，可以发现，html标签内的语句是<code>&lt;img src=&quot;2017/02/26/xxxx/图片名.jpg&quot;&gt;</code>，而不是<code>&lt;img src=&quot;xxxx/图片名.jpg&gt;</code>这很重要，关乎你的网页是否可以真正加载你想插入的图片。</li></ul><h4 id="在git中，将本地的文件上传到GitHub库中"><a href="#在git中，将本地的文件上传到GitHub库中" class="headerlink" title="在git中，将本地的文件上传到GitHub库中"></a>在git中，将本地的文件上传到GitHub库中</h4><ul><li>先添加一个本地文件 <code>git add 文件名</code></li><li>再上传到库中 <code>git commit -m &quot;上传说明&quot;</code></li><li>最后同步GitHub上 <code>git push</code></li></ul><h4 id="博客连接GItHub的二级域名的方法："><a href="#博客连接GItHub的二级域名的方法：" class="headerlink" title="博客连接GItHub的二级域名的方法："></a>博客连接GItHub的二级域名的方法：</h4><p><a href="https://blog.csdn.net/lmj623565791/article/details/51319147" target="_blank" rel="noopener">https://blog.csdn.net/lmj623565791/article/details/51319147</a></p><h4 id="修改服务器的登录提示语"><a href="#修改服务器的登录提示语" class="headerlink" title="修改服务器的登录提示语"></a>修改服务器的登录提示语</h4><p>修改文件夹      / etc / profile</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo, github </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/10/15/hello-world/"/>
      <url>/2018/10/15/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-zh-"><code class="language-zh-">$ hexo new "My New Post"</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code>$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Linux操作</title>
      <link href="/2018/10/15/Linux%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2018/10/15/Linux%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>Linux内核最初只是由芬兰人李纳斯·托瓦兹（Linus Torvalds）在赫尔辛基大学上学时出于个人爱好而编写的。</p><p>Linux能运行主要的UNIX工具软件、应用程序和网络协议</p><p>Linux发行版本：Ubuntu、RedHat、CentOS、Debian、Fedora、SuSE、OpenSUSE、Arch Linux、SolusOS 等。</p><h1 id="Linux系统下的操作系统"><a href="#Linux系统下的操作系统" class="headerlink" title="Linux系统下的操作系统"></a>Linux系统下的操作系统</h1><h2 id="1-攻击方式"><a href="#1-攻击方式" class="headerlink" title="1. 攻击方式"></a>1. 攻击方式</h2><p>PING to death  ———- 拼到死</p><p>DOS - Deny of Service ————— 拒绝服务攻击</p><p>DDoS - Distributed Deny of Service ———– 分布式拒绝服务攻击</p><h2 id="2-查看本机IP"><a href="#2-查看本机IP" class="headerlink" title="2. 查看本机IP"></a>2. 查看本机IP</h2><p>ifconfig</p><h2 id="3-连接其它的服务器"><a href="#3-连接其它的服务器" class="headerlink" title="3. 连接其它的服务器"></a>3. 连接其它的服务器</h2><p>ssh <a href="mailto:root@IP" target="_blank" rel="noopener">root@IP</a></p><p>断开某个用户的终端连接： </p><p>​    命令：fuser -k /dev/pts/x  （x为who下看到的这个用户的pts序号，比如本例中的pts/0,pts/1）   </p><p>​            example： fuser -k /dev/pts/0</p><h2 id="4-给其它的服务器拷贝文件"><a href="#4-给其它的服务器拷贝文件" class="headerlink" title="4. 给其它的服务器拷贝文件"></a>4. 给其它的服务器拷贝文件</h2><p>一个用户操作另外两个用户的文件：</p><p> scp  用户名@IP：/绝对路径/文件名 用户名@IP：/绝对路径/文件命名</p><p>从本地到远程用户：</p><p>scp /绝对路径/文件名 用户名@IP：/绝对路径/文件命名</p><h2 id="5-操作远端用户"><a href="#5-操作远端用户" class="headerlink" title="5. 操作远端用户"></a>5. 操作远端用户</h2><p>sftp 用户名@IP</p><p>​    用户名密码</p><p>​    get 要下载的文件名</p><p>​    put 上传的文件名</p><p>​    lls 查看本地目录</p><p>在输入的命令前加上<l>，就可以操作本地文件，直接输入命令，操作连接的用户文件</l></p><p>​    l(命令) 操作本地文件</p><h2 id="6-网络端口"><a href="#6-网络端口" class="headerlink" title="6. 网络端口"></a>6. 网络端口</h2><p>netstat -na | grep 80   查询网络状态</p><p>netstat -nap | grep 80   查看占用端口的进程</p><h2 id="7-服务操作"><a href="#7-服务操作" class="headerlink" title="7. 服务操作"></a>7. 服务操作</h2><p>systemctl start &lt;进程的名字&gt;       开启服务</p><p>systemctl stop <name>       禁用服务</name></p><p>systemctl restart <name>    重启服务</name></p><p>systemctl status <name>    查看服务状态</name></p><p>systemctl senable <name>  开机自启服务</name></p><p>systemctl disable <name>   禁用开机自启服务</name></p><p>计算机网络分层结构模型</p><p>Internet —– TCP/IP协议族</p><p>TCP - Transfer Control Protocol - 传输控制协议</p><p>UDP - User Datagram Protocol - 用户数据报协议</p><p>IP - Internet Protocol - 网际协议</p><p>TCP/IP模型</p><p>应用层（定义应用之间如何传输数据，定义应用级协议）- HTTP/SMTP/SSH/POP3/FTP/ICQ</p><p>传输层（端到端传输数据）- TCP/ UDP</p><p>网络层/网际层 （寻址和路由）</p><p>物理链路层 （数据分帧 + 校验）- 冗余校验码</p><h2 id="Linux常用的防火墙服务有firewall和iptables"><a href="#Linux常用的防火墙服务有firewall和iptables" class="headerlink" title="Linux常用的防火墙服务有firewall和iptables"></a>Linux常用的防火墙服务有firewall和iptables</h2><ul><li><p>systemctl start firewalld    开启防火墙</p></li><li><p>systemctl enable firewalld     设置开机自启防火墙</p></li></ul><ul><li><p>firewalls-cmd  –add-port=80/tcp  –permanent</p></li><li><p>firewalls-cmd  –add-service=80/tcp  –permanent</p></li></ul><ul><li>top —— 查看进程（CPU的利用率排序）</li><li>ctrl + z     —— 把进程放到后台</li><li>ctrl + c    ——  终止进程</li><li>jobs —— 查看后台进程<h2 id="如果执行命令时在命令后面加上-amp-就可以将命令置于后台运行"><a href="#如果执行命令时在命令后面加上-amp-就可以将命令置于后台运行" class="headerlink" title="如果执行命令时在命令后面加上&amp;就可以将命令置于后台运行"></a>如果执行命令时在命令后面加上&amp;就可以将命令置于后台运行</h2>_bg %编号 —— 让暂停的进程继续在后台运行background</li><li>fg %编号 —— 将后台的进程放到前台foreground</li></ul><h2 id="8-Linux根目录下"><a href="#8-Linux根目录下" class="headerlink" title="8. Linux根目录下"></a>8. Linux根目录下</h2><h2 id="http-www-runoob-com-linux-linux-system-contents-html"><a href="#http-www-runoob-com-linux-linux-system-contents-html" class="headerlink" title="http://www.runoob.com/linux/linux-system-contents.html"></a><a href="http://www.runoob.com/linux/linux-system-contents.html" target="_blank" rel="noopener">http://www.runoob.com/linux/linux-system-contents.html</a></h2><p>etc:保存下载安装的文件夹</p><p>安装的软件名.conf ———- 安装的软件的配置</p><p>dev: 设备管理器</p><p>tmp ————— 临时文件</p><p>usr ————– 用户目录</p><h2 id="9-Linux环境"><a href="#9-Linux环境" class="headerlink" title="9. Linux环境"></a>9. Linux环境</h2><p>Linux的shall也是一个交互式的环境，可以输入代码</p><p>执行多个程序可以用分号 隔开 / &amp;&amp; 隔开 / 并列符号 ||</p><p><img src="/2018/10/15/Linux服务器/Linux1.jpg" alt="Linux1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 操作系统 Linux 防火墙 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MySQL预习</title>
      <link href="/2018/10/15/MySQL%E9%A2%84%E4%B9%A0/"/>
      <url>/2018/10/15/MySQL%E9%A2%84%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>MySQL的海豚标志的名字叫“sakila”，它是由MySQL AB的创始人从用户在“海豚命名”的竞赛中建议的大量的名字表中选出的。获胜的名字是由来自非洲斯威士兰的开源软件开发者Ambrose Twebaze提供。</p><h1 id="MySQL预习"><a href="#MySQL预习" class="headerlink" title="MySQL预习"></a>MySQL预习</h1><h3 id="MySQL目录结构"><a href="#MySQL目录结构" class="headerlink" title="MySQL目录结构"></a>MySQL目录结构</h3><ul><li>bin目录，存储可执行文件</li><li>data目录，存储数据文件</li><li>docs，文档</li><li>include目录，存储包含的头文件</li><li>lib目录，存储库文件</li><li>share，错误消息和字符集文件</li></ul><h3 id="MySQL的配置选项"><a href="#MySQL的配置选项" class="headerlink" title="MySQL的配置选项"></a>MySQL的配置选项</h3><ul><li><p><strong>修改编码方式</strong></p><p><strong>[mysql]</strong></p><p><strong>default-character-set=utf8</strong></p><p><strong>[mysqld]</strong></p><p><strong>character-set-server=utf8</strong></p></li></ul><h3 id="MySQL服务的启动和关闭"><a href="#MySQL服务的启动和关闭" class="headerlink" title="MySQL服务的启动和关闭"></a>MySQL服务的启动和关闭</h3><ul><li><p><strong>启动MySQL服务</strong></p><p><strong>net start mysql</strong></p></li><li><p><strong>关闭MySQL服务</strong></p><p><strong>net stop mysql</strong></p></li></ul><h3 id="MySQL的使用"><a href="#MySQL的使用" class="headerlink" title="MySQL的使用"></a>MySQL的使用</h3><ol><li><p><strong>MySQL登录</strong></p><ul><li><p>mysql  参数</p><p><img src="/2018/10/15/MySQL预习/MySQL1.jpg" alt="MySQL1"></p></li></ul></li><li><p><strong>MySQL退出</strong></p><ul><li><strong>mysql &gt; exit;</strong></li><li><strong>mysql &gt; quit;</strong></li><li><strong>mysql &gt; \q;</strong></li></ul></li></ol><h3 id="修改MySQL提示符"><a href="#修改MySQL提示符" class="headerlink" title="修改MySQL提示符"></a>修改MySQL提示符</h3><ul><li><p><strong>连接客户端时通过参数指定</strong></p><p><code>shell&gt;mysql -uroot -proot -prompt 提示符</code>    </p></li><li><p><strong>连接上客户端后，通过prompt的命令来实现</strong></p><ul><li><code>mysql&gt;prompt 提示符</code>    <ul><li><strong>\D ———– 完整的日期</strong></li><li><strong>\d ———– 当前数据库</strong></li><li><strong>\h ———– 服务器的名称</strong></li><li><strong>\u ———– 当前用户</strong></li></ul></li></ul></li></ul><h3 id="MySQL常用命令"><a href="#MySQL常用命令" class="headerlink" title="MySQL常用命令"></a>MySQL常用命令</h3><ul><li><p><strong>显示当前服务器版本</strong></p><p><strong>SELECT  VERSION();</strong></p></li><li><p><strong>显示当前日期时间</strong></p><p><strong>SELECT  NOW();</strong></p></li><li><p><strong>显示当前用户</strong></p><p><strong>SELECT  USER();</strong></p></li></ul><h3 id="MySQL语句的规范"><a href="#MySQL语句的规范" class="headerlink" title="MySQL语句的规范"></a>MySQL语句的规范</h3><ul><li><strong>关键字与函数名称全部大写</strong></li><li><strong>数据库名称、表名称、字段名称全部小写</strong></li><li><strong>SQL语句必须以分号结尾</strong></li></ul><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><ul><li><p><strong>CREATE {DATABASE | SCHEMA} [IF NOT EXISTS] DB_name</strong></p><p><strong>[DEFAULT] CHARACTER SET [=] charset_name</strong></p></li></ul><h3 id="查看当前服务器下的数据表列表"><a href="#查看当前服务器下的数据表列表" class="headerlink" title="查看当前服务器下的数据表列表"></a>查看当前服务器下的数据表列表</h3><ul><li><p><strong>SHOW {DATABASES | SCHEMAS}</strong></p><p><strong>[LIKE ‘pattern‘ | WHERE expr]</strong></p></li></ul><h3 id="修改数据库"><a href="#修改数据库" class="headerlink" title="修改数据库"></a>修改数据库</h3><ul><li><p><strong>ALTER {DATABASE | SCHEMA} [db_name]</strong></p><p><strong>[DEFAULT] CHARACTER SET [=] charset_name</strong></p></li></ul><h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><ul><li><strong>DROP {DATABASE | SCHEMA} [IF EXISTS] bd_name</strong></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python</title>
      <link href="/2018/10/15/README/"/>
      <url>/2018/10/15/README/</url>
      
        <content type="html"><![CDATA[<p>学习是一件庄严而又神圣的事情，贵在坚持</p><p>不断地积累,才能体会到其中的乐趣</p><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><h3 id="第1天"><a href="#第1天" class="headerlink" title="第1天"></a>第1天</h3><ol><li>前端页面 = 标签(内容) + CSS(显示) + JavaScript(行为)</li><li>JavaScript = ECMAScript + BOM(window) + DOM(document)</li><li>window <ul><li>alert() / prompt() / confirm() / close()</li><li>setInterval() / setTimeout() / clearInterval() / clearTimeout()</li></ul></li><li>document<ul><li>getElementById() / getElementsByTagName() / getElementsByClassName()</li><li>querySelector() / querySelectorAll()</li></ul></li><li>HTMLElement<ul><li>textContent / innerHTML</li></ul></li><li>其他知识<ul><li>Date: getFullYear() / getMonth() / getDate() / getDay()</li><li>Math: Math.random()</li><li>parseInt() / parseFloat()</li></ul></li></ol><h3 id="第2天"><a href="#第2天" class="headerlink" title="第2天"></a>第2天</h3><ol><li>JavaScript中的事件处理<ul><li>在标签上使用onXXX属性来进行事件绑定</li><li>通过代码获取标签绑定onXXX属性</li><li>通过代码获取标签然后使用addEventListener()绑定事件<br>使用removeEventListener()反绑定事件<br>这里有浏览器兼容性问题 对于低版本IE要使用<br>attachEvent() / detachEvent()</li></ul></li><li>事件回调函数和事件对象<ul><li>绑定事件监听器的函数都需要传入事件的回调函数</li><li>程序员知道事件发生的时候需要做什么样的处理但是不知道事件什么时候发生</li><li>所以传入一个函数在将来发生事件的时候由系统进行调用 这种函数就称为回调函数</li><li>回调函数的第一个参数代表事件对象（封装了和事件相关的所有信息）对于低版本IE</li><li>可以通过window.event来获取事件对象</li><li>事件对象的属性和方法：<ul><li>target / srcElement - 事件源（引发事件的标签）</li><li>preventDefault() / returnValue=false - 阻止事件的默认行为</li><li>处理事件有两种顺序：事件冒泡（默认，从内向外）/ 事件捕获（从外向内）</li><li>如果要阻止事件的传播行为（例如阻止事件冒泡）可以使用<br>stopPropagation() / cancelBubble=true</li></ul></li></ul></li></ol>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>vim</title>
      <link href="/2018/10/15/vim/"/>
      <url>/2018/10/15/vim/</url>
      
        <content type="html"><![CDATA[<h3 id="vimrc-——————-保存格式的文件"><a href="#vimrc-——————-保存格式的文件" class="headerlink" title="vimrc ——————- 保存格式的文件"></a>vimrc ——————- 保存格式的文件</h3><h2 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h2><ul><li>文件意外中断，r恢复，b删除</li><li>vim 文件1 文件2 ———– 同时打开多个文件</li><li>vim -d 文件1 文件2 ———— 比较文件1和文件2<h5 id="如果vim打开了多个文件，可以在末行模式中"><a href="#如果vim打开了多个文件，可以在末行模式中" class="headerlink" title="如果vim打开了多个文件，可以在末行模式中"></a>如果vim打开了多个文件，可以在末行模式中</h5></li><li>：ls ——— 查看多个文件的编号</li><li>：b 编号 ——— 跳转文件</li><li>：vs —————- 垂直拆分成两个窗口</li><li>：sp —————- 水平拆分成两个窗口</li><li>Ctrl + w Ctrl + w ————— 将光标移到另一个窗口</li><li>：qa —————– 关闭全部窗口</li></ul><h4 id="vim-文件名-————-进入Linux编辑框"><a href="#vim-文件名-————-进入Linux编辑框" class="headerlink" title="vim 文件名 ———— 进入Linux编辑框"></a>vim 文件名 ———— 进入Linux编辑框</h4><h5 id="刚进入是在命令模式下"><a href="#刚进入是在命令模式下" class="headerlink" title="刚进入是在命令模式下"></a>刚进入是在命令模式下</h5><ul><li>i / a ———- 进入编辑模式或者插入模式</li><li><p>（Esc ——— 退出编辑模式）</p></li><li><p>：/ ?/ /————– 进入末行编辑格式</p><ul><li>set nu / nonu ———— 打开/关闭行号</li><li>set autoindent ———— 保存缩进</li><li>syntax on / off ———- 打开/关闭高量语法</li><li>shift + zz ————– 保存</li><li>wq ————— 保存退出</li><li>q! —————- 强制退出，不保存</li><li>w! —————- 强制保存</li><li>map ———— 映射 快捷键</li><li>imap ————– 在插入模式下映射快捷键</li><li>inoremap ————– 在插入模式下不要递归的映射快捷键</li></ul></li></ul><h5 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h5><ul><li>/正则表达式</li><li>n ——— 正向搜索</li><li>N ——— 反向搜索</li><li>？正则表达式 ——– 反向搜索</li><li>：1,100s/查找内容（正则表达式）/替换内容<br>替换范围substitute/正则表达式/替换内容</li><li>：1,$s/查找内容（正则表达式）/替换内容/gice<ul><li>-g:全局模式</li><li>-i:忽略大小写</li><li>-c:确认模式</li><li>-e:忽略错误</li></ul></li></ul><h5 id="检查工具"><a href="#检查工具" class="headerlink" title="检查工具"></a>检查工具</h5><ul><li>pip3 install pycodestyle —– 初步的代码格式检查工具</li><li>pip3 install pylint ——- 高级代码格式检查</li></ul><h5 id="修改操作权限"><a href="#修改操作权限" class="headerlink" title="修改操作权限"></a>修改操作权限</h5><ul><li>ll ——– 查看模式</li><li>chmod ———— 修改读写模式 </li><li>chmod 数字 ———– 修改模式</li><li>chmod a+x ———— 所有用户都添加操作权限</li><li>chmod u+x g+x o+x ———- 添加执行操作</li><li>Ctrl x &amp; Ctrl o ———– 代码提示并补全</li></ul><h5 id="编辑器操作："><a href="#编辑器操作：" class="headerlink" title="编辑器操作："></a>编辑器操作：</h5><ul><li>在命令模式下：都可以配合数字使用<ul><li>光标移动<ul><li>H ———— 左</li><li>J ————- 下</li><li>K ————- 上</li><li>L ————- 右</li><li>HML ————第一行的第一列/页面中间行的第一列/页面最后一行的第一列</li><li>w ————– 移动一个单词</li><li>gg/1G ——— 到第一行</li><li>G ————- 到最后一行</li><li>$ ———– 行末</li><li>0 ———– 行首</li><li>dd ———– 删掉一行代码</li><li>dw ———- 删一个单词</li><li>Ctrl + e ————- 往下翻一行</li><li>Ctrl + y ————- 往上翻一行</li><li>Ctrl + f ————- 往上翻一页</li><li>Ctrl + b ————- 往下翻一页</li><li>数字 + yy ———- 复制多少行</li><li>p ———- 粘贴</li><li>u ————– 撤销</li><li>Ctrl + r ————- 反撤销</li></ul></li></ul></li></ul><h2 id="vim模式下的Python"><a href="#vim模式下的Python" class="headerlink" title="vim模式下的Python"></a>vim模式下的Python</h2><h4 id="三元运算："><a href="#三元运算：" class="headerlink" title="三元运算："></a>三元运算：</h4><ul><li>if成立取前面，不成立取后面</li></ul><p><code>y = year if month &gt;= 3 else year - 1</code></p><h4 id="占位"><a href="#占位" class="headerlink" title="占位"></a>占位</h4><ul><li>{} ————— 占位符，与%d的作用一样</li></ul><p><code>print(f&#39;{month_names[month]} {year}&#39;.center(20))</code></p><h4 id="字符居中"><a href="#字符居中" class="headerlink" title="字符居中"></a>字符居中</h4><p><code>print（f&#39;{}&#39;.center(num))</code></p><h4 id="取命令行参数："><a href="#取命令行参数：" class="headerlink" title="取命令行参数："></a>取命令行参数：</h4><p>从标准输入读取数据</p><pre><code>调用函数 import sys if len(sys.argv) == 3:     year = int(sys.argv[2])     month = int(sys.argv[1])</code></pre><h4 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h4><p>&emsp;&emsp;在某个时候必须给一个确定的结果，递归函数必须要有一个出口；然后必须要有一个递归公式，在函数中调用函数的部分</p><h4 id="动态规划：牺牲空间，减少时间"><a href="#动态规划：牺牲空间，减少时间" class="headerlink" title="动态规划：牺牲空间，减少时间"></a>动态规划：牺牲空间，减少时间</h4><p>优化重复计算的过程，用一个字典保存要重复计算的值，当需要时直接查找字典</p><pre><code>if num &lt;= 0:     return 1 if num == 0 else 0  try:     return temp[num]  except KeyError:     temp[num] = walk(num - 1) + walk(num - 2) + walk(num - 3)     return temp[num]</code></pre><h4 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h4><p>终极原则：高内聚 低耦合(一个函数或者一个类只做一个事情，一个函数或者一个类只表示自己，不与其他关联)【high cohesion low coupling】</p><h6 id="在Python中函数是一等公民"><a href="#在Python中函数是一等公民" class="headerlink" title="在Python中函数是一等公民"></a>在Python中函数是一等公民</h6><h6 id="函数可以赋值给变量，可以作为方法的参数和返回值"><a href="#函数可以赋值给变量，可以作为方法的参数和返回值" class="headerlink" title="函数可以赋值给变量，可以作为方法的参数和返回值"></a>函数可以赋值给变量，可以作为方法的参数和返回值</h6><pre><code>def calc(items, fn=lambda x, y: x - y):     result = items[0]    for index in range(1, len(items)):        result = fn(result,items[index])    return resultitems = [1, 2, 3, 4, 5]    print(calc(items, lambda x, y: x + y))    print(calc(items, lambda x, y: x * y))</code></pre><h4 id="类"><a href="#类" class="headerlink" title="类"></a>类</h4><p>面向对象的程序设计基本上就是三步走：</p><ol><li>定义类<br>-数据抽象：找属性（名词）<br>-行为抽象：找方法（动词）</li><li>创建对象</li><li>给对象发消息</li></ol><h4 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h4><pre><code>def foo(*args, **kwargs)*args ------- 可变参数（不知道有多少个参数，可以通过*号表示）**kwargs --------- 关键字参数（给了参数名的参数，会被打包成一个字典传入函数）默认参数 ----------- 不传入参数def foo1(a, *, b, c)*前面的参数是位置参数在传参的时候可以不用指定参数名*后面的参数是命名关键字参数在传参的时候必须指定参数名否则报错解包items = [1, 2, 3, 4, 5]start， *_ ， end = items（取列表的第一个数和最后一个数）</code></pre><h4 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h4><ul><li>a.装饰器函数：用一个函数装饰另一个函数，给它增加额外的功能</li><li>b.装饰器函数的参数是被装饰的函数，返回的是起装饰作用的函数</li><li>c.当调用被装饰的函数时，其实是执行装饰器中返回的那个函数</li><li>d.凡是需要这个额外功能的函数，只需要加上装饰器即可，而不需要书写重复的代码</li><li>e.给函数添加装饰器的语法就是在函数前写上  @装饰器函数</li></ul>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>数据库</title>
      <link href="/2018/10/15/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2018/10/15/%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>​        数据库（Database）是按照数据结构来组织、存储和管理数据的仓库，</p><p>每个数据库都有一个或多个不同的API用于创建，访问，管理，搜索和复制所保存的数据。</p><p>—– 从删库，到跑路额！</p><ul><li>数据库 —– database - 数据的仓库（集散地）<ul><li>通过数据库可以实现数据的持久化</li><li>数据持久化：文件操作（读写文件）-文本文件 / Excel</li><li>使用数据库的原因：当我们做数据持久化操作时不仅仅是希望能够把数据长久的保存下来，更为重要的是我们很方便的管理数据，在需要数据的时候能够很方便的把需要的数据取出来</li></ul></li><li>1907s IBM - 关系型数据库<ul><li>理论基础：关系代数和集合论</li><li>具体表象：用二维表（行，列）来组织数据<ul><li>行：记录（1212 电脑城 男） - 实体的具体记录</li><li>列：字段（学号，姓名，性别） - 实体的属性</li></ul></li><li>关系型数据库自己的编程语言 - SQL（结构化查询语言）</li><li>DDL（数据定义语言）：create / drop / alter(修改）</li><li>DML（数据操作语言）: insert / delete /update / select</li><li>DCL（数据控制语言）: grant(授权）/ revoke(撤销）</li><li>关系型数据库产品：<ul><li>Oracle - Oracle 12c</li><li>MySQL -Oracle</li><li>SQLServer</li><li>PostgreSQl</li><li>DB2<h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4></li></ul></li></ul></li><li>SQL （Structred Query Language)</li><li>DDL（数据定义语言）：create / drop / alter(修改）</li><li>DML（数据操作语言）: insert / delete /update / select</li><li>DCL（数据控制语言）: grant(授权）/ revoke(撤销)</li><li>DDL(Data Default Language)</li></ul><h2 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h2><h3 id="创建数据库-1"><a href="#创建数据库-1" class="headerlink" title="创建数据库"></a>创建数据库</h3><p><code>create database school default charset utf8;</code></p><h4 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h4><p><code>drop database if exists school;</code></p><h4 id="切换到数据库school"><a href="#切换到数据库school" class="headerlink" title="切换到数据库school"></a>切换到数据库school</h4><p><code>use school;</code></p><h4 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h4><p><code>drop table if exists tb_student;</code></p><h4 id="创建二维表保存数据"><a href="#创建二维表保存数据" class="headerlink" title="创建二维表保存数据"></a>创建二维表保存数据</h4><ul><li>列名 数据类型 约束条件</li><li>非空约束 —- not null</li><li>默认值约束 —– default</li><li>主键 ——- 表中能够唯一标识一条记录的列</li><li>主键约束 —— primary key<pre class=" language-mysql"><code class="language-mysql">create table tb_student(stuid int not null,stuname varchar(4) not null,gender bit default 1,brith date,addr varchar(50),primary key (stuid));</code></pre></li><li>修改表<pre class=" language-mysql"><code class="language-mysql">alter table tb_student add column tel char(11) not null;alter table tb_student drop column brith;alter table tb_student add score int not null;</code></pre></li><li>插入数据<br>– DMl (Data Manipulation Language)<pre class=" language-mysql"><code class="language-mysql">insert into tb_student values (1001, '天明', 0, '四川', '17640141329', 90);insert into tb_student values (1002, '王大锤', 1, '四川', '17640141329',80);insert into tb_student (stuid, tel, stuname, score, addr) values(1003, '17640141329', '盖聂', 100, '四川成都');insert into tb_student (stuid, tel, stuname, score) values(1004, '17640141329', '张三', 60),(1005, '17640141329', '豆丁', 85),(1006, '17640141329', '小明', 55);</code></pre></li><li>删除数据<pre class=" language-mysql"><code class="language-mysql">delete from tb_student where stuid=1006;delete from tb_student where stuname='天明';delete from tb_student where stuid in (1004, 1006, 2000);</code></pre></li><li>截断数据（删除全表）<br><code>truncate table tb_student;</code></li><li>更新数据<pre class=" language-mysql"><code class="language-mysql">update tb_student set addr='四川绵阳', gender=0 where stuid in (1003, 1004);</code></pre></li><li>查询数据<pre class=" language-mysql"><code class="language-mysql">select * from tb_student;-- 投影select stuname, gender from tb_student;-- 别名（alias --- as）select stuname as 姓名,gender 性别 from tb_student;select stuname as 姓名,if(gender, '男', '女') as 性别 from tb_student;select stuname as 姓名,case gender when 1 then '男' else '女' end as 性别 from tb_student;</code></pre></li><li>对列做运算<br>select concat(stuname, ‘: ‘, tel) as 信息 from tb_student;</li><li>筛选<br>select * from tb_student where stuid=1001;</li><li>不等号用&lt;&gt;表示<br><code>`</code>mysql<br>select <em> from tb_student where stuid&lt;&gt;1001;<br>select </em> from tb_student where stuid in (1001, 1003, 1005);<br>select stuid, stuname, gender from tb_student where stuid&gt;1002;<br>select stuid, stuname, gender from tb_student where stuid&lt;=1002;<br>select stuid, stuname, gender from tb_student where gender=0;<br>select <em> from tb_student where stuid between 1002 and 1004;<br>select </em> from tb_student where stuid&gt;1004 and gender=0;<br>select * from tb_student where stuid&gt;1004 or gender=0;</li><li>注意：判断一个字段是否为null不能用=和&lt;&gt;<br>select <em> from tb_student where addr is null;<br>select </em> from tb_student where addr is not null;<br><code>`</code></li><li>%是一个通配符表示零个或任意多个字符<pre class=" language-mysql"><code class="language-mysql">select * from tb_student where stuname like '张%';select * from tb_student where stuname like '%三%';</code></pre></li><li>_也是一个通配符，它表示一个字符<pre class=" language-mysql"><code class="language-mysql">select * from tb_student where stuname like '张_';select * from tb_student where stuname like '张__';</code></pre></li><li>排序——order by </li><li>默认升序（ascending）可以不写，降序descending必须写<pre class=" language-mysql"><code class="language-mysql">select * from tb_student order by stuid desc;select * from tb_student order by tel asc;select * from tb_student order by gender asc, stuid desc;select * from tb_student where gender=0 order by stuid desc;</code></pre></li><li>分页（限制）<pre class=" language-mysql"><code class="language-mysql">select * from tb_student limit 3;select * from tb_student limit 3 offset 3;</code></pre></li><li><p>跳过6条信息，查3条信息<br><code>select * from tb_student limit 3 offset 6;</code></p></li><li><p>跳过2条信息，查4条信息</p><pre class=" language-mysql"><code class="language-mysql">select * from tb_student limit 2,4;select * from tb_student where gender=1 order by stuid desc limit 0, 3;</code></pre></li></ul><h2 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h2><ul><li><p>创建hellokitty用户并设置口令</p><pre class=" language-mysql"><code class="language-mysql">create user 'hellokitty'@'%'identified by '123123';</code></pre></li><li><p>给hellokitty授权</p><pre class=" language-mysql"><code class="language-mysql">grant select on srs.* to 'hellokitty'@'%';grant insert, delete, update on srs.* to 'hellokitty'@'%';grant create, drop, alter on srs.* to 'hellokitty'@'%';</code></pre></li><li><p>获得srs的所有权限，但不能授权给别人</p><pre class=" language-mysql"><code class="language-mysql">grant all privileges on srs.* to 'hellokitty'@'%';grant all privileges on *.* to 'hellokitty'@'%';</code></pre></li><li><p>将hellokitty自己得到的权限再授权给别人</p><pre class=" language-mysql"><code class="language-mysql">grant all privileges on srs.* to 'hellokitty'@'%' with grant option;</code></pre></li><li><p>召回权限</p><pre class=" language-mysql"><code class="language-mysql">revoke all privileges on srs.* from 'hellokitty'@'%';</code></pre></li></ul><h5 id="事务控制"><a href="#事务控制" class="headerlink" title="事务控制"></a>事务控制</h5><ul><li><p>创建hellokitty用户并设置口令</p><pre class=" language-mysql"><code class="language-mysql">create user 'hellokitty'@'%'identified by '123123';</code></pre></li><li><p>给hellokitty授权</p><pre class=" language-mysql"><code class="language-mysql">grant select on srs.* to 'hellokitty'@'%';grant insert, delete, update on srs.* to 'hellokitty'@'%';grant create, drop, alter on srs.* to 'hellokitty'@'%';</code></pre></li><li><p>获得srs的所有权限，但不能授权给别人</p><pre class=" language-mysql"><code class="language-mysql">grant all privileges on srs.* to 'hellokitty'@'%';grant all privileges on *.* to 'hellokitty'@'%';</code></pre></li><li><p>将hellokitty自己得到的权限再授权给别人</p><pre class=" language-mysql"><code class="language-mysql">grant all privileges on srs.* to 'hellokitty'@'%' with grant option;</code></pre></li><li><p>召回权限</p><pre class=" language-mysql"><code class="language-mysql">revoke all privileges on srs.* from 'hellokitty'@'%';</code></pre></li></ul><h6 id="事务控制-1"><a href="#事务控制-1" class="headerlink" title="事务控制"></a>事务控制</h6><ul><li><p>开启事务环境</p><pre class=" language-mysql"><code class="language-mysql">begin-- start transactionupdate tb_score set mark=mark-2 where sid=1001 and mark is not null;update tb_score set mark=mark+2 where sid=1002 and mark is not null;</code></pre></li><li><p>事务提交<br><code>commit；</code></p></li><li>事务回滚<br><code>rollback；</code></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 数据库 表格 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>安装Python</title>
      <link href="/2018/10/15/CentOS%E5%AE%89%E8%A3%85Python3.7/"/>
      <url>/2018/10/15/CentOS%E5%AE%89%E8%A3%85Python3.7/</url>
      
        <content type="html"><![CDATA[<p>认真学习也是有前提的：</p><p>好的学习环境, 好的学习方法, 好的学习状态</p><p>缺一不可哟！</p><p>CentOS安装Python3.7</p><h2 id="1-下载Python源代码："><a href="#1-下载Python源代码：" class="headerlink" title="1.下载Python源代码："></a>1.下载Python源代码：</h2><p><a href="https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tgz" target="_blank" rel="noopener">https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tgz</a></p><h2 id="2-解压缩"><a href="#2-解压缩" class="headerlink" title="2.解压缩"></a>2.解压缩</h2><pre><code>gunzip Python-3.7.0.tgz</code></pre><h2 id="3-解归档"><a href="#3-解归档" class="headerlink" title="3.解归档"></a>3.解归档</h2><pre><code>tar -xvf Python-3.7.0.tar</code></pre><h2 id="4-安装底层依赖库"><a href="#4-安装底层依赖库" class="headerlink" title="4.安装底层依赖库"></a>4.安装底层依赖库</h2><pre><code>yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel libffi-devel</code></pre><h2 id="5-安装前的配置"><a href="#5-安装前的配置" class="headerlink" title="5.安装前的配置"></a>5.安装前的配置</h2><pre><code> ./configure --prefix=/usr/local/Python37 --enable-optimizations</code></pre><h2 id="6-构建安装"><a href="#6-构建安装" class="headerlink" title="6.构建安装"></a>6.构建安装</h2><pre><code>make &amp;&amp; make install</code></pre><p>##7.配置环境变量</p><pre><code>export PATH=$PATH:/usr/local/Python37/bin</code></pre><p>##8.注册软连接（符号链接）</p><pre><code>ln -s /usr/local/Python37/bin/python3 /usr/bin/python3</code></pre><p>硬链接 - 文件的引用，只要引用数不为0，文件就不会被删除<br>软链接 - 相当于是文件的快捷方式，如果文件被删除，软链接就会失效<br>ln -s 带完整路径的文件名，链接文件名</p>]]></content>
      
      
      
        <tags>
            
            <tag> Python 软链接 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>编程相关书籍</title>
      <link href="/2018/10/15/Python%E5%8F%82%E8%80%83%E4%B9%A6%E7%B1%8D/"/>
      <url>/2018/10/15/Python%E5%8F%82%E8%80%83%E4%B9%A6%E7%B1%8D/</url>
      
        <content type="html"><![CDATA[<p>Read ten thousand books and travel ten thousand miles！</p><p>Books are ladders of human progress！</p><h2 id="Python参考书籍"><a href="#Python参考书籍" class="headerlink" title="Python参考书籍"></a>Python参考书籍</h2><h3 id="入门读物"><a href="#入门读物" class="headerlink" title="入门读物"></a>入门读物</h3><ol><li>《Python基础教程》（<em>Beginning Python From Novice to Professional</em>）</li><li>《Python学习手册》（<em>Learning Python</em>）</li><li>《Python编程》（<em>Programming Python</em>）</li><li>《Python Cookbook》</li><li>《Python程序设计》（<em>Python Programming: An Introduction to Computer Science</em>）</li><li>《Modern Python Cookbook》</li></ol><h3 id="进阶读物"><a href="#进阶读物" class="headerlink" title="进阶读物"></a>进阶读物</h3><ol><li>《Python核心编程》（<em>Core Python Applications Programming</em>）</li><li>《流畅的Python》（<em>Fluent Python</em>）</li><li>《Effective Python：编写高质量Python代码的59个有效方法》（<em>Effective Python 59 Specific Ways to Write Better Python</em>）</li><li>《Python设计模式》（<em>Learning Python Design Patterns</em>）</li><li>《Python高级编程》（<em>Expert Python Programming</em>）</li><li>《Python性能分析与优化》（<em>Mastering Python High Performance</em>）</li></ol><h3 id="Web框架"><a href="#Web框架" class="headerlink" title="Web框架"></a>Web框架</h3><ol><li>《Django基础教程》（<em>Tango with Django</em>）</li><li>《轻量级Django》（<em>Lightweight Django</em>）</li><li>《Python Web开发：测试驱动方法》（<em>Test-Driven Development with Python</em>）</li><li>《Web Development with Django Cookbook》</li><li>《Test-Driven Development with Django》</li><li>《Django Project Blueprints 》</li><li>《Flask Web开发：基于Python的Web应用开发实战》（<em>Flask Web Development: Developing Web Applications with Python</em>）</li><li>《深入理解Flask》（<em>Mastering Flask</em>）</li></ol><h3 id="爬虫开发"><a href="#爬虫开发" class="headerlink" title="爬虫开发"></a>爬虫开发</h3><ol><li>《用Python写网络爬虫》（<em>Web Scraping with Python</em>）</li><li>《精通Python爬虫框架Scrapy》（<em>Learning Scrapy</em>）</li><li>《Python网络数据采集》（<em>Web Scraping with Python</em>）</li><li>《Python爬虫开发与项目实战》</li><li>《Python 3网络爬虫开发实战》</li></ol><h3 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h3><ol><li>《利用Python进行数据分析》（<em>Python for Data Analysis</em>）</li><li>《Python数据科学手册》（<em>Python Data Science Handbook</em>）</li><li>《Python金融大数据分析》（<em>Python for Finance</em>）</li><li>《Python数据可视化编程实战》（<em>Python Data Visualization Cookbook</em>）</li><li>《Python数据处理》（<em>Data Wrangling with Python</em>）</li></ol><h3 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h3><ol><li>《Python机器学习基础教程》（<em>Introduction to Machine Learning with Python</em>）</li><li>《Python机器学习实践指南》（<em>Python Machine Learning Blueprints</em>）</li><li>《Python Machine Learning Case Studies》</li><li>《Python机器学习实践：测试驱动的开发方法》（<em>Thoughtful Machine Learning with Python A Test Driven Approach</em>）</li><li>《Python机器学习经典实例》（<em>Python Machine Learning Cookbook</em>）</li><li>《TensorFlow：实战Google深度学习框架》</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Python, Web, 爬虫 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
